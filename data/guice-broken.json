{
	"projectInfos": {
		"numberOfClasses": 1573,
		"numberOfInterfaces": 312,
		"numberOfAnnotations": 155,
		"numberOfRecords": 0,
		"numberOfEnums": 50,
		"totNumberOfEntities": 2090,
		"numberOfEntitiesWithSuperClass": 607,
		"numberOfEntitesWithChildren": 148
	},
	"entities": [
		{
			"documentation": "/**\n * AbstractModule is a helper class used to add bindings to the Guice injector.\n *\n * \u003cp\u003eSimply extend this class, then you can add bindings by either defining @Provides methods (see\n * https://github.com/google/guice/wiki/ProvidesMethods) or implementing {@link #configure()}, and\n * calling the inherited methods which mirror those found in {@link Binder}. For example:\n *\n * \u003cpre\u003e\n * public class MyModule extends AbstractModule {\n *   protected void configure() {\n *     bind(Service.class).to(ServiceImpl.class).in(Singleton.class);\n *     bind(CreditCardPaymentService.class);\n *     bind(PaymentService.class).to(CreditCardPaymentService.class);\n *     bindConstant().annotatedWith(Names.named(\"port\")).to(8080);\n *   }\n * }\n * \u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.AbstractModule",
			"extends": "",
			"Methods": [
				{
					"signature": "protected void configure()",
					"documentation": "/** Configures a {@link Binder} via the exposed methods. */"
				},
				{
					"signature": "protected Binder binder()",
					"documentation": "/** Gets direct access to the underlying {@code Binder}. */"
				},
				{
					"signature": "protected void bindScope(Class\u003c? extends Annotation\u003e scopeAnnotation, Scope scope)",
					"documentation": "/** @see Binder#bindScope(Class, Scope) */"
				},
				{
					"signature": "protected \u003cT\u003e LinkedBindingBuilder\u003cT\u003e bind(Key\u003cT\u003e key)",
					"documentation": "/** @see Binder#bind(Key) */"
				},
				{
					"signature": "protected \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": "/** See {@link Binder#bind(TypeLiteral)}. */"
				},
				{
					"signature": "protected \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(Class\u003cT\u003e clazz)",
					"documentation": "/** See {@link Binder#bind(Class)}. */"
				},
				{
					"signature": "protected AnnotatedConstantBindingBuilder bindConstant()",
					"documentation": "/** @see Binder#bindConstant() */"
				},
				{
					"signature": "protected void install(Module module)",
					"documentation": "/** @see Binder#install(Module) */"
				},
				{
					"signature": "protected void addError(String message, Object... arguments)",
					"documentation": "/** @see Binder#addError(String, Object[]) */"
				},
				{
					"signature": "protected void addError(Throwable t)",
					"documentation": "/** @see Binder#addError(Throwable) */"
				},
				{
					"signature": "protected void addError(Message message)",
					"documentation": "/**\n   * @see Binder#addError(Message)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void requestInjection(Object instance)",
					"documentation": "/**\n   * @see Binder#requestInjection(Object)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void requestStaticInjection(Class\u003c?\u003e... types)",
					"documentation": "/** @see Binder#requestStaticInjection(Class[]) */"
				},
				{
					"signature": "protected void bindInterceptor(\n      Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n      Matcher\u003c? super Method\u003e methodMatcher,\n      MethodInterceptor... interceptors)",
					"documentation": "/** @see Binder#bindInterceptor */"
				},
				{
					"signature": "protected void requireBinding(Key\u003c?\u003e key)",
					"documentation": "/**\n   * Adds a dependency from this module to {@code key}. When the injector is created, Guice will\n   * report an error if {@code key} cannot be injected. Note that this requirement may be satisfied\n   * by implicit binding, such as a public no-arguments constructor.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void requireBinding(Class\u003c?\u003e type)",
					"documentation": "/**\n   * Adds a dependency from this module to {@code type}. When the injector is created, Guice will\n   * report an error if {@code type} cannot be injected. Note that this requirement may be satisfied\n   * by implicit binding, such as a public no-arguments constructor.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected \u003cT\u003e Provider\u003cT\u003e getProvider(Key\u003cT\u003e key)",
					"documentation": "/**\n   * @see Binder#getProvider(Key)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": "/**\n   * @see Binder#getProvider(Class)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void convertToTypes(\n      Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeConverter converter)",
					"documentation": "/**\n   * @see Binder#convertToTypes\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected Stage currentStage()",
					"documentation": "/**\n   * @see Binder#currentStage()\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": "/**\n   * @see Binder#getMembersInjector(Class)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e type)",
					"documentation": "/**\n   * @see Binder#getMembersInjector(TypeLiteral)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void bindListener(Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeListener listener)",
					"documentation": "/**\n   * @see Binder#bindListener(com.google.inject.matcher.Matcher, com.google.inject.spi.TypeListener)\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected void bindListener(\n      Matcher\u003c? super Binding\u003c?\u003e\u003e bindingMatcher, ProvisionListener... listener)",
					"documentation": "/**\n   * @see Binder#bindListener(Matcher, ProvisionListener...)\n   * @since 4.0\n   */"
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.BindingAlreadySetErrorTest",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestModule2",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.IntermediateModule",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.WeakKeySetTest",
				"com.google.inject.internal.util.LineNumbersTest",
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamesTest",
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.HasDependenciesTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SourcesTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.OverrideModuleTest.NamedMunger",
				"com.googlecode.guice.BytecodeGenTest",
				"com.googlecode.guice.Jsr330Test",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.ManyConstructorsTest",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest",
				"com.google.inject.assistedinject.subpkg.SubpackageTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest",
				"com.google.inject.persist.EdslTest",
				"com.google.inject.servlet.EdslTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.TransferRequestIntegrationTest",
				"com.google.inject.spring.SpringIntegrationTest",
				"com.google.inject.struts2.Struts2FactoryTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [
				"com.google.inject.BinderTest.ParentModule",
				"com.google.inject.BinderTest.FooModule",
				"com.google.inject.BinderTest.BarModule",
				"com.google.inject.BinderTest.ConstantModule",
				"com.google.inject.BinderTest.OuterCoreModule",
				"com.google.inject.BinderTest.InnerCoreModule",
				"com.google.inject.BindingTest.MyModule",
				"com.google.inject.DuplicateBindingsTest.ThrowingModule",
				"com.google.inject.DuplicateBindingsTest.FooModule",
				"com.google.inject.DuplicateBindingsTest.FailingProviderModule",
				"com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
				"com.google.inject.PrivateModuleTest.FailingModule",
				"com.google.inject.PrivateModuleTest.ManyPrivateModules",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModule",
				"com.google.inject.RestrictedBindingSourceTest.RoutingModule",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule",
				"com.google.inject.PermittedNetworkModule",
				"com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.TopLevelModulePrivatelyBindingDnsAddress",
				"com.google.inject.RestrictedBindingSourceTest.PermittedModule",
				"com.google.inject.RestrictedBindingSourceTest.UnpermittedModule",
				"com.google.inject.NetworkModuleWithCustomProvides",
				"com.google.inject.ScannedModuleWithPermit",
				"com.google.inject.NetworkModuleVersion2",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModuleThatInstalls",
				"com.google.inject.ScopesTest.OuterRuntimeModule",
				"com.google.inject.ScopesTest.InnerRuntimeModule",
				"com.google.inject.ScopesTest.OuterDeprecatedModule",
				"com.google.inject.ScopesTest.InnerDeprecatedModule",
				"com.google.inject.ScopesTest.OuterScopeModule",
				"com.google.inject.ScopesTest.CustomNoScopeModule",
				"com.google.inject.ScopesTest.CustomSingletonModule",
				"com.google.inject.SerializationTest.MyAbstractModule",
				"com.google.inject.TypeConversionTest.OuterErrorModule",
				"com.google.inject.TypeConversionTest.InnerErrorModule",
				"com.google.inject.TypeConversionTest.InvalidCustomValueModule",
				"com.google.inject.TypeConversionTest.OuterModule",
				"com.google.inject.TypeConversionTest.InnerModule",
				"com.google.inject.ConverterNullModule",
				"com.google.inject.ConverterCustomModule",
				"com.google.inject.OuterAmbiguousModule",
				"com.google.inject.InnerAmbiguousModule",
				"com.google.inject.Ambiguous1Module",
				"com.google.inject.Ambiguous2Module",
				"com.google.inject.OuterThrowsModule",
				"com.google.inject.InnerThrowsModule"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules",
				"com.google.inject.example.JndiProviderClient",
				"com.googlecode.guice.GuiceTck",
				"com.example.App",
				"com.google.inject.assistedinject.FactoryModuleBuilder",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.struts2.GuiceObjectFactory",
				"com.google.inject.struts2.Struts2Factory"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Collects configuration information (primarily \u003ci\u003ebindings\u003c/i\u003e) which will be used to create an\n * {@link Injector}. Guice provides this object to your application's {@link Module} implementors so\n * they may each contribute their own bindings and other registrations.\n *\n * \u003ch3\u003eThe Guice Binding EDSL\u003c/h3\u003e\n *\n * Guice uses an \u003ci\u003eembedded domain-specific language\u003c/i\u003e, or EDSL, to help you create bindings\n * simply and readably. This approach is great for overall usability, but it does come with a small\n * cost: \u003cb\u003eit is difficult to learn how to use the Binding EDSL by reading method-level\n * javadocs\u003c/b\u003e. Instead, you should consult the series of examples below. To save space, these\n * examples omit the opening {@code binder}, just as you will if your module extends {@link\n * AbstractModule}.\n *\n * \u003cpre\u003e\n *     bind(ServiceImpl.class);\u003c/pre\u003e\n *\n * This statement does essentially nothing; it \"binds the {@code ServiceImpl} class to itself\" and\n * does not change Guice's default behavior. You may still want to use this if you prefer your\n * {@link Module} class to serve as an explicit \u003ci\u003emanifest\u003c/i\u003e for the services it provides. Also,\n * in rare cases, Guice may be unable to validate a binding at injector creation time unless it is\n * given explicitly.\n *\n * \u003cpre\u003e\n *     bind(Service.class).to(ServiceImpl.class);\u003c/pre\u003e\n *\n * Specifies that a request for a {@code Service} instance with no binding annotations should be\n * treated as if it were a request for a {@code ServiceImpl} instance. This \u003ci\u003eoverrides\u003c/i\u003e the\n * function of any {@link ImplementedBy @ImplementedBy} or {@link ProvidedBy @ProvidedBy}\n * annotations found on {@code Service}, since Guice will have already \"moved on\" to {@code\n * ServiceImpl} before it reaches the point when it starts looking for these annotations.\n *\n * \u003cpre\u003e\n *     bind(Service.class).toProvider(ServiceProvider.class);\u003c/pre\u003e\n *\n * In this example, {@code ServiceProvider} must extend or implement {@code Provider\u003cService\u003e}. This\n * binding specifies that Guice should resolve an unannotated injection request for {@code Service}\n * by first resolving an instance of {@code ServiceProvider} in the regular way, then calling {@link\n * Provider#get get()} on the resulting Provider instance to obtain the {@code Service} instance.\n *\n * \u003cp\u003eThe {@link Provider} you use here does not have to be a \"factory\"; that is, a provider which\n * always \u003ci\u003ecreates\u003c/i\u003e each instance it provides. However, this is generally a good practice to\n * follow. You can then use Guice's concept of {@link Scope scopes} to guide when creation should\n * happen -- \"letting Guice work for you\".\n *\n * \u003cpre\u003e\n *     bind(Service.class).annotatedWith(Red.class).to(ServiceImpl.class);\u003c/pre\u003e\n *\n * Like the previous example, but only applies to injection requests that use the binding annotation\n * {@code @Red}. If your module also includes bindings for particular \u003ci\u003evalues\u003c/i\u003e of the\n * {@code @Red} annotation (see below), then this binding will serve as a \"catch-all\" for any values\n * of {@code @Red} that have no exact match in the bindings.\n *\n * \u003cpre\u003e\n *     bind(ServiceImpl.class).in(Singleton.class);\n *     // or, alternatively\n *     bind(ServiceImpl.class).in(Scopes.SINGLETON);\u003c/pre\u003e\n *\n * Either of these statements places the {@code ServiceImpl} class into singleton scope. Guice will\n * create only one instance of {@code ServiceImpl} and will reuse it for all injection requests of\n * this type. Note that it is still possible to bind another instance of {@code ServiceImpl} if the\n * second binding is qualified by an annotation as in the previous example. Guice is not overly\n * concerned with \u003ci\u003epreventing\u003c/i\u003e you from creating multiple instances of your \"singletons\", only\n * with \u003ci\u003eenabling\u003c/i\u003e your application to share only one instance if that's all you tell Guice you\n * need.\n *\n * \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e a scope specified in this way \u003ci\u003eoverrides\u003c/i\u003e any scope that was specified with\n * an annotation on the {@code ServiceImpl} class.\n *\n * \u003cp\u003eBesides {@link Singleton}/{@link Scopes#SINGLETON}, there are servlet-specific scopes\n * available in {@code com.google.inject.servlet.ServletScopes}, and your Modules can contribute\n * their own custom scopes for use here as well.\n *\n * \u003cpre\u003e{@code\n * bind(new TypeLiteral\u003cPaymentService\u003cCreditCard\u003e\u003e() {})\n *     .to(CreditCardPaymentService.class);\n * }\u003c/pre\u003e\n *\n * This admittedly odd construct is the way to bind a parameterized type. It tells Guice how to\n * honor an injection request for an element of type {@code PaymentService\u003cCreditCard\u003e}. The class\n * {@code CreditCardPaymentService} must implement the {@code PaymentService\u003cCreditCard\u003e} interface.\n * Guice cannot currently bind or inject a generic type, such as {@code Set\u003cE\u003e}; all type parameters\n * must be fully specified.\n *\n * \u003cpre\u003e\n *     bind(Service.class).toInstance(new ServiceImpl());\n *     // or, alternatively\n *     bind(Service.class).toInstance(SomeLegacyRegistry.getService());\u003c/pre\u003e\n *\n * In this example, your module itself, \u003ci\u003enot Guice\u003c/i\u003e, takes responsibility for obtaining a\n * {@code ServiceImpl} instance, then asks Guice to always use this single instance to fulfill all\n * {@code Service} injection requests. When the {@link Injector} is created, it will automatically\n * perform field and method injection for this instance, but any injectable constructor on {@code\n * ServiceImpl} is simply ignored. Note that using this approach results in \"eager loading\" behavior\n * that you can't control.\n *\n * \u003cpre\u003e\n *     bindConstant().annotatedWith(ServerHost.class).to(args[0]);\u003c/pre\u003e\n *\n * Sets up a constant binding. Constant injections must always be annotated. When a constant\n * binding's value is a string, it is eligible for conversion to all primitive types, to {@link\n * Enum#valueOf(Class, String) all enums}, and to {@link Class#forName class literals}. Conversions\n * for other types can be configured using {@link #convertToTypes(Matcher, TypeConverter)\n * convertToTypes()}.\n *\n * \u003cpre\u003e\n *   {@literal @}Color(\"red\") Color red; // A member variable (field)\n *    . . .\n *     red = MyModule.class.getDeclaredField(\"red\").getAnnotation(Color.class);\n *     bind(Service.class).annotatedWith(red).to(RedService.class);\u003c/pre\u003e\n *\n * If your binding annotation has parameters you can apply different bindings to different specific\n * values of your annotation. Getting your hands on the right instance of the annotation is a bit of\n * a pain -- one approach, shown above, is to apply a prototype annotation to a field in your module\n * class, so that you can read this annotation instance and give it to Guice.\n *\n * \u003cpre\u003e\n *     bind(Service.class)\n *         .annotatedWith(Names.named(\"blue\"))\n *         .to(BlueService.class);\u003c/pre\u003e\n *\n * Differentiating by names is a common enough use case that we provided a standard annotation,\n * {@link com.google.inject.name.Named @Named}. Because of Guice's library support, binding by name\n * is quite easier than in the arbitrary binding annotation case we just saw. However, remember that\n * these names will live in a single flat namespace with all the other names used in your\n * application.\n *\n * \u003cpre\u003e{@code\n * Constructor\u003cT\u003e loneCtor = getLoneCtorFromServiceImplViaReflection();\n * bind(ServiceImpl.class)\n *     .toConstructor(loneCtor);\n * }\u003c/pre\u003e\n *\n * In this example, we directly tell Guice which constructor to use in a concrete class\n * implementation. It means that we do not need to place {@literal @}Inject on any of the\n * constructors and that Guice treats the provided constructor as though it were annotated so. It is\n * useful for cases where you cannot modify existing classes and is a bit simpler than using a\n * {@link Provider}.\n *\n * \u003cp\u003eThe above list of examples is far from exhaustive. If you can think of how the concepts of one\n * example might coexist with the concepts from another, you can most likely weave the two together.\n * If the two concepts make no sense with each other, you most likely won't be able to do it. In a\n * few cases Guice will let something bogus slip by, and will then inform you of the problems at\n * runtime, as soon as you try to create your Injector.\n *\n * \u003cp\u003eThe other methods of Binder such as {@link #bindScope}, {@link #bindInterceptor}, {@link\n * #install}, {@link #requestStaticInjection}, {@link #addError} and {@link #currentStage} are not\n * part of the Binding EDSL; you can learn how to use these in the usual way, from the method\n * documentation.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author kevinb@google.com (Kevin Bourrillion)\n */",
			"name": "com.google.inject.Binder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.PrivateBinder"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A mapping from a {@link Key} to the strategy for getting instances of the type. This interface is\n * part of the introspection API and is intended primarily for use by tools.\n *\n * \u003cp\u003eBindings are created in several ways:\n *\n * \u003cul\u003e\n *   \u003cli\u003eExplicitly in a module, via {@code bind()} and {@code bindConstant()} statements:\n *       \u003cpre\u003e\n *     bind(Service.class).annotatedWith(Red.class).to(ServiceImpl.class);\n *     bindConstant().annotatedWith(ServerHost.class).to(args[0]);\u003c/pre\u003e\n *   \u003cli\u003eImplicitly by the Injector by following a type's {@link ImplementedBy pointer} {@link\n *       ProvidedBy annotations} or by using its {@link Inject annotated} or default constructor.\n *   \u003cli\u003eBy converting a bound instance to a different type.\n *   \u003cli\u003eFor {@link Provider providers}, by delegating to the binding for the provided type.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eThey exist on both modules and on injectors, and their behaviour is different for each:\n *\n * \u003cul\u003e\n *   \u003cli\u003e\u003cstrong\u003eModule bindings\u003c/strong\u003e are incomplete and cannot be used to provide instances.\n *       This is because the applicable scopes and interceptors may not be known until an injector\n *       is created. From a tool's perspective, module bindings are like the injector's source code.\n *       They can be inspected or rewritten, but this analysis must be done statically.\n *   \u003cli\u003e\u003cstrong\u003eInjector bindings\u003c/strong\u003e are complete and valid and can be used to provide\n *       instances. From a tools' perspective, injector bindings are like reflection for an\n *       injector. They have full runtime information, including the complete graph of injections\n *       necessary to satisfy a binding.\n * \u003c/ul\u003e\n *\n * @param \u003cT\u003e the bound type. The injected is always assignable to this type.\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.Binding",
			"extends": "com.google.inject.spi.Element",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates annotations which are used for binding. Only one such annotation may apply to a single\n * injection point. You must also annotate binder annotations with {@code @Retention(RUNTIME)}. For\n * example:\n *\n * \u003cpre\u003e\n *   {@code @}Retention(RUNTIME)\n *   {@code @}Target({ FIELD, PARAMETER, METHOD })\n *   {@code @}BindingAnnotation\n *   public {@code @}interface Transactional {}\n * \u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.BindingAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BoundInstanceInjectionTest",
				"com.google.inject.InjectorTest",
				"com.google.inject.KeyTest",
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ReflectionTest",
				"com.google.inject.RequestInjectionTest",
				"com.google.inject.TypeConversionTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MapBinderTest.Marker",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.MultibinderTest.Marker",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.OptionalBinderTest.Marker",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.Ann",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.tools.jmx.JmxTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.SomeBindingAnnotation",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestAnnotation",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Element",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.internal.Internal",
				"com.google.inject.name.Named",
				"com.google.inject.Blue",
				"com.google.inject.Red",
				"com.google.inject.Color",
				"com.google.inject.Another",
				"com.google.inject.Other",
				"com.google.inject.S",
				"com.google.inject.I",
				"com.google.inject.Foo",
				"com.google.inject.Bar",
				"com.google.inject.AllDefaults",
				"com.google.inject.SomeDefaults",
				"com.google.inject.NoDefaults",
				"com.google.inject.Marker",
				"com.google.inject.Green",
				"com.google.inject.ForField",
				"com.google.inject.ForMethod",
				"com.google.inject.NumericValue",
				"com.google.inject.BooleanValue",
				"com.google.inject.EnumValue",
				"com.google.inject.ClassName",
				"com.google.inject.internal.Abc",
				"com.google.inject.internal.De",
				"com.google.inject.spi.SampleAnnotation",
				"com.google.inject.spi.Sole",
				"com.google.inject.spi.Blue",
				"com.google.inject.assistedinject.Assisted",
				"com.google.inject.grapher.graphviz.Graphviz",
				"com.google.inject.grapher.Annotated",
				"com.google.inject.grapher.demo.Driver",
				"com.google.inject.grapher.demo.Inventor",
				"com.google.inject.grapher.demo.Nuclear",
				"com.google.inject.grapher.demo.Renewable",
				"com.google.inject.grapher.demo.Used",
				"com.google.inject.tools.jmx.Transactional",
				"com.google.inject.persist.jpa.Jpa",
				"com.google.inject.servlet.RequestParameters",
				"com.google.inject.servlet.ScopingOnly",
				"com.google.inject.servlet.Null",
				"com.google.inject.throwingproviders.NotExceptionScoping"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Thrown when a programming error such as a misplaced annotation, illegal binding, or unsupported\n * scope is found. Clients should catch this exception, log it, and stop execution.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.ConfigurationException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "public ConfigurationException(Iterable\u003cMessage\u003e messages)",
					"documentation": "/** Creates a ConfigurationException containing {@code messages}. */"
				},
				{
					"signature": "public ConfigurationException withPartialValue(Object partialValue)",
					"documentation": "/** Returns a copy of this configuration exception with the specified partial value. */"
				},
				{
					"signature": "public Collection\u003cMessage\u003e getErrorMessages()",
					"documentation": "/** Returns messages for the errors that caused this exception. */"
				},
				{
					"signature": "@SuppressWarnings({\n    \"unchecked\",\n    \"TypeParameterUnusedInFormals\"\n  }) \n  public \u003cE\u003e E getPartialValue()",
					"documentation": "/**\n   * Returns a value that was only partially computed due to this exception. The caller can use this\n   * while collecting additional configuration problems.\n   *\n   * @return the partial value, or {@code null} if none was set. The type of the partial value is\n   *     specified by the throwing method.\n   */"
				},
				{
					"signature": "@Override public String getMessage()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Messages"
			],
			"usedBy": [
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.assistedinject.BindingCollector",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Thrown when errors occur while creating a {@link Injector}. Includes a list of encountered\n * errors. Clients should catch this exception, log it, and stop execution.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.CreationException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "public CreationException(Collection\u003cMessage\u003e messages)",
					"documentation": "/** Creates a CreationException containing {@code messages}. */"
				},
				{
					"signature": "public Collection\u003cMessage\u003e getErrorMessages()",
					"documentation": "/** Returns messages for the errors that caused this exception. */"
				},
				{
					"signature": "@Override\n  public String getMessage()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Messages"
			],
			"usedBy": [
				"com.google.inject.internal.Errors"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Acccompanies a {@literal @}{@link com.google.inject.Provides Provides} method annotation in a\n * private module to indicate that the provided binding is exposed.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.Exposed",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.OverrideModuleTest.ExampleModule",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestPrivateModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The entry point to the Guice framework. Creates {@link Injector}s from {@link Module}s.\n *\n * \u003cp\u003eGuice supports a model of development that draws clear boundaries between APIs,\n * Implementations of these APIs, Modules which configure these implementations, and finally\n * Applications which consist of a collection of Modules. It is the Application, which typically\n * defines your {@code main()} method, that bootstraps the Guice Injector using the {@code Guice}\n * class, as in this example:\n *\n * \u003cpre\u003e\n *     public class FooApplication {\n *       public static void main(String[] args) {\n *         Injector injector = Guice.createInjector(\n *             new ModuleA(),\n *             new ModuleB(),\n *             . . .\n *             new FooApplicationFlagsModule(args)\n *         );\n *\n *         // Now just bootstrap the application and you're done\n *         FooStarter starter = injector.getInstance(FooStarter.class);\n *         starter.runApplication();\n *       }\n *     }\n * \u003c/pre\u003e\n */",
			"name": "com.google.inject.Guice",
			"extends": "",
			"Methods": [
				{
					"signature": "private Guice()",
					"documentation": "/**\n * The entry point to the Guice framework. Creates {@link Injector}s from {@link Module}s.\n *\n * \u003cp\u003eGuice supports a model of development that draws clear boundaries between APIs,\n * Implementations of these APIs, Modules which configure these implementations, and finally\n * Applications which consist of a collection of Modules. It is the Application, which typically\n * defines your {@code main()} method, that bootstraps the Guice Injector using the {@code Guice}\n * class, as in this example:\n *\n * \u003cpre\u003e\n *     public class FooApplication {\n *       public static void main(String[] args) {\n *         Injector injector = Guice.createInjector(\n *             new ModuleA(),\n *             new ModuleB(),\n *             . . .\n *             new FooApplicationFlagsModule(args)\n *         );\n *\n *         // Now just bootstrap the application and you're done\n *         FooStarter starter = injector.getInstance(FooStarter.class);\n *         starter.runApplication();\n *       }\n *     }\n * \u003c/pre\u003e\n */"
				},
				{
					"signature": "public static Injector createInjector(Module... modules)",
					"documentation": "/**\n   * Creates an injector for the given set of modules. This is equivalent to calling {@link\n   * #createInjector(Stage, Module...)} with Stage.DEVELOPMENT.\n   *\n   * @throws CreationException if one or more errors occur during injector construction\n   */"
				},
				{
					"signature": "public static Injector createInjector(Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/**\n   * Creates an injector for the given set of modules. This is equivalent to calling {@link\n   * #createInjector(Stage, Iterable)} with Stage.DEVELOPMENT.\n   *\n   * @throws CreationException if one or more errors occur during injector creation\n   */"
				},
				{
					"signature": "public static Injector createInjector(Stage stage, Module... modules)",
					"documentation": "/**\n   * Creates an injector for the given set of modules, in a given development stage.\n   *\n   * @throws CreationException if one or more errors occur during injector creation.\n   */"
				},
				{
					"signature": "public static Injector createInjector(Stage stage, Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/**\n   * Creates an injector for the given set of modules, in a given development stage.\n   *\n   * @throws CreationException if one or more errors occur during injector construction\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.BindingAlreadySetErrorTest",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.GenericErrorTest",
				"com.google.inject.errors.MissingConstructorErrorTest",
				"com.google.inject.errors.MissingImplementationErrorTest",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest",
				"com.google.inject.errors.ScopeNotFoundErrorTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.WeakKeySetTest",
				"com.google.inject.internal.util.LineNumbersTest",
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamesTest",
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.BindingTargetVisitorTest",
				"com.google.inject.spi.HasDependenciesTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SourcesTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.googlecode.guice.BytecodeGenTest",
				"com.googlecode.guice.Jsr330Test",
				"com.googlecode.guice.bundle.OSGiTestActivator",
				"com.example.AppTest",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.ManyConstructorsTest",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest",
				"com.google.inject.assistedinject.subpkg.SubpackageTest",
				"com.google.inject.daggeradapter.BindsTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.ModuleIncludesTest",
				"com.google.inject.daggeradapter.ModuleSubcomponentsTest",
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.OptionalBindingsTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.persist.EdslTest",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.CustomPropsEntityManagerFactoryProvisionTest",
				"com.google.inject.persist.jpa.DynamicFinderTest",
				"com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest",
				"com.google.inject.persist.jpa.EntityManagerFactoryProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest",
				"com.google.inject.persist.jpa.JpaWorkManagerTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest",
				"com.google.inject.servlet.ContextPathTest",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest",
				"com.google.inject.servlet.EdslTest",
				"com.google.inject.servlet.ExtensionSpiTest",
				"com.google.inject.servlet.FilterDispatchIntegrationTest",
				"com.google.inject.servlet.FilterPipelineTest",
				"com.google.inject.servlet.InjectedFilterPipelineTest",
				"com.google.inject.servlet.InvalidScopeBindingTest",
				"com.google.inject.servlet.MultiModuleDispatchIntegrationTest",
				"com.google.inject.servlet.MultipleServletInjectorsTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ServletDispatchIntegrationTest",
				"com.google.inject.servlet.ServletModuleTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.TransferRequestIntegrationTest",
				"com.google.inject.servlet.VarargsFilterDispatchIntegrationTest",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest",
				"com.google.inject.spring.SpringIntegrationTest",
				"com.google.inject.struts2.Struts2FactoryTest",
				"com.google.inject.struts2.Struts2FactoryTest.TestListener",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalInjectorCreator"
			],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuice",
				"com.google.inject.example.ClientServiceWithGuiceDefaults",
				"com.google.inject.example.JndiProviderClient",
				"com.google.inject.internal.SpiUtils",
				"com.googlecode.guice.GuiceTck",
				"com.example.App",
				"com.google.inject.grapher.demo.InjectorGrapherDemo",
				"com.google.inject.tools.jmx.Manager",
				"com.google.inject.struts2.example.ExampleListener",
				"com.google.inject.struts2.GuiceObjectFactory"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A pointer to the default implementation of a type.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.ImplementedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BinderTest.HasImplementedBy2",
				"com.google.inject.BinderTest.HasImplementedByThatNeedsAnotherImplementedBy",
				"com.google.inject.BinderTest.HasImplementedByThatWantsExplicit",
				"com.google.inject.BinderTestSuite",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.DuplicateBindingsTest.A",
				"com.google.inject.ImplicitBindingTest",
				"com.google.inject.ImplicitBindingTest.InvalidLinked",
				"com.google.inject.ImplicitBindingTest.InvalidLinked2",
				"com.google.inject.InjectorTest",
				"com.google.inject.InjectorTest.PineTree",
				"com.google.inject.InjectorTest.SeaHorse",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.JitBindingsTest.ImplBy",
				"com.google.inject.JitBindingsTest.ImplByScoped",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ProvisionListenerTest.JitFoo",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.ScopesTest.ImplementedBySingleton"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.HasImplementedBy1",
				"com.google.inject.AWithImplementedBy",
				"com.google.inject.I",
				"com.google.inject.EnumWithImplementedBy",
				"com.google.inject.G",
				"com.google.inject.RoutingTable",
				"com.google.inject.D",
				"com.google.inject.In",
				"com.google.inject.H",
				"com.google.inject.example.ClientServiceWithGuiceDefaults",
				"com.google.inject.example.Service",
				"com.google.inject.servlet.FilterPipeline"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates members of your implementation class (constructors, methods and fields) into which the\n * {@link Injector} should inject values. The Injector fulfills injection requests for:\n *\n * \u003cul\u003e\n *   \u003cli\u003eEvery instance it constructs. The class being constructed must have exactly one of its\n *       constructors marked with {@code @Inject} or must have a constructor taking no parameters.\n *       The Injector then proceeds to perform field and method injections.\n *   \u003cli\u003ePre-constructed instances passed to {@link Injector#injectMembers}, {@link\n *       com.google.inject.binder.LinkedBindingBuilder#toInstance(Object)} and {@link\n *       com.google.inject.binder.LinkedBindingBuilder#toProvider(javax.inject.Provider)}. In this\n *       case all constructors are, of course, ignored.\n *   \u003cli\u003eStatic fields and methods of classes which any {@link Module} has specifically requested\n *       static injection for, using {@link Binder#requestStaticInjection}.\n * \u003c/ul\u003e\n *\n * In all cases, a member can be injected regardless of its Java access specifier (private, default,\n * protected, public).\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Inject",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BinderTest.MissingParameter",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatNeedsAnotherImplementedBy",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatWantsExplicit",
				"com.google.inject.BinderTestSuite",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsA",
				"com.google.inject.BinderTestSuite.InjectsPlainA",
				"com.google.inject.BinderTestSuite.InjectsScopedA",
				"com.google.inject.BinderTestSuite.InjectsScopedANamedApple",
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BindingAnnotationTest.BlueFoo",
				"com.google.inject.BindingAnnotationTest.ColorFoo",
				"com.google.inject.BindingOrderTest",
				"com.google.inject.BindingOrderTest.BoundFirst",
				"com.google.inject.BindingTest",
				"com.google.inject.BindingTest.TooManyConstructors",
				"com.google.inject.BindingTest.ButterSandwitch",
				"com.google.inject.BoundInstanceInjectionTest",
				"com.google.inject.BoundInstanceInjectionTest.O",
				"com.google.inject.BoundInstanceInjectionTest.MalformedInjectable",
				"com.google.inject.BoundInstanceInjectionTest.MalformedProvider",
				"com.google.inject.BoundProviderTest",
				"com.google.inject.BoundProviderTest.FooProvider",
				"com.google.inject.BoundProviderTest.SingletonFooProvider",
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.BP",
				"com.google.inject.CircularDependencyTest.C",
				"com.google.inject.CircularDependencyTest.D",
				"com.google.inject.CircularDependencyTest.C2",
				"com.google.inject.CircularDependencyTest.D2",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.CircularDependencyTest.RealF",
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.CircularDependencyTest.JImpl",
				"com.google.inject.CircularDependencyTest.L",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.DuplicateBindingsTest.FooImpl",
				"com.google.inject.DuplicateBindingsTest.Bar",
				"com.google.inject.EagerSingletonTest",
				"com.google.inject.EagerSingletonTest.A",
				"com.google.inject.GenericInjectionTest",
				"com.google.inject.GenericInjectionTest.Parameterized",
				"com.google.inject.GenericInjectionTest.SubParameterizedDeps",
				"com.google.inject.GenericInjectionTest.ParameterizedDeps",
				"com.google.inject.ImplicitBindingTest",
				"com.google.inject.ImplicitBindingTest.Bar",
				"com.google.inject.ImplicitBindingTest.Invalid",
				"com.google.inject.ImplicitBindingTest.InvalidLinked2Impl",
				"com.google.inject.ImplicitBindingTest.RequiresProviderForSelfWithOtherType",
				"com.google.inject.ImplicitBindingTest.A",
				"com.google.inject.ImplicitBindingTest.B",
				"com.google.inject.ImplicitBindingTest.C",
				"com.google.inject.InjectorTest",
				"com.google.inject.InjectorTest.Foo",
				"com.google.inject.InjectorTest.BarImpl",
				"com.google.inject.InjectorTest.TeeImpl",
				"com.google.inject.InjectorTest.Static",
				"com.google.inject.InjectorTest.Private",
				"com.google.inject.InjectorTest.Protected",
				"com.google.inject.Java8LanguageFeatureBindingTest",
				"com.google.inject.Java8LanguageFeatureBindingTest.StringProvider",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.JitBindingsTest.WantsScopedFooImpl",
				"com.google.inject.JitBindingsTest.FooBar",
				"com.google.inject.JitBindingsTest.ProviderFooBar",
				"com.google.inject.JitBindingsTest.WantsTypeLiterals",
				"com.google.inject.KeyTest",
				"com.google.inject.LoggerInjectionTest",
				"com.google.inject.LoggerInjectionTest.Foo",
				"com.google.inject.MethodInterceptionTest",
				"com.google.inject.MethodInterceptionTest.BaseSetter",
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.NullableInjectionPointTest.FooConstructor",
				"com.google.inject.NullableInjectionPointTest.FooMethod",
				"com.google.inject.NullableInjectionPointTest.NullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.NullableFooMethod",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooMethod",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooMethod",
				"com.google.inject.OptionalBindingTest",
				"com.google.inject.OptionalBindingTest.HasOptionalInjections",
				"com.google.inject.OptionalBindingTest.HasOptionalConstructor",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.PrivateModuleTest.AB",
				"com.google.inject.ProviderInjectionTest",
				"com.google.inject.ProviderInjectionTest.StaticallyInjectable",
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ProvisionExceptionTest.A",
				"com.google.inject.ProvisionExceptionTest.C",
				"com.google.inject.ProvisionExceptionTest.E",
				"com.google.inject.ProvisionExceptionTest.MethodWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.ConstructorWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.LikeScala",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ProvisionExceptionTest.F",
				"com.google.inject.ProvisionExceptionsTest",
				"com.google.inject.ProvisionExceptionsTest.Explosion",
				"com.google.inject.ProvisionExceptionsTest.TracerImpl",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ProvisionListenerTest.DependsOnFooBombInCxtor",
				"com.google.inject.ProvisionListenerTest.A",
				"com.google.inject.ProvisionListenerTest.BImpl",
				"com.google.inject.ProvisionListenerTest.E",
				"com.google.inject.ProvisionListenerTest.X",
				"com.google.inject.ProvisionListenerTest.Y",
				"com.google.inject.RequestInjectionTest",
				"com.google.inject.RequestInjectionTest.HasInjections",
				"com.google.inject.RequestInjectionTest.BlowsUpOnInject",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.RoutingTableImpl",
				"com.google.inject.ScopesTest",
				"com.google.inject.ScopesTest.GImpl",
				"com.google.inject.ScopesTest.HImpl",
				"com.google.inject.ScopesTest.I0",
				"com.google.inject.ScopesTest.I1",
				"com.google.inject.ScopesTest.I2",
				"com.google.inject.ScopesTest.J0",
				"com.google.inject.ScopesTest.J1",
				"com.google.inject.ScopesTest.J2",
				"com.google.inject.ScopesTest.K0",
				"com.google.inject.ScopesTest.K1",
				"com.google.inject.ScopesTest.K2",
				"com.google.inject.SuperclassTest",
				"com.google.inject.SuperclassTest.Super",
				"com.google.inject.TypeListenerTest",
				"com.google.inject.TypeListenerTest.D",
				"com.google.inject.errors.MissingImplementationErrorTest",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingConstructor",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingMethod",
				"com.google.inject.errors.MissingImplementationErrorTest.RequestHandler",
				"com.google.inject.errors.MissingImplementationErrorTest.Server",
				"com.google.inject.errors.MissingImplementationErrorTest.DependsOnMissingBindings",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.MultibinderTest.ObjectWithInjectionPoint",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.OptionalBinderTest.JitBinding",
				"com.google.inject.internal.OptionalBinderTest.DependsOnJitBinding",
				"com.google.inject.internal.ProxyFactoryTest",
				"com.google.inject.internal.ProxyFactoryTest.A",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamedClient",
				"com.google.inject.name.NamedEquivalanceTest.Jsr330NamedClient",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.ElementsTest.C",
				"com.google.inject.spi.HasDependenciesTest",
				"com.google.inject.spi.HasDependenciesTest.A",
				"com.google.inject.spi.HasDependenciesTest.ProviderOfA",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.InjectionPointTest.Constructable",
				"com.google.inject.spi.InjectionPointTest.TooManyConstructors",
				"com.google.inject.spi.InjectionPointTest.TooManyConstructorsWithOptional",
				"com.google.inject.spi.InjectionPointTest.HasInjections",
				"com.google.inject.spi.InjectionPointTest.ParameterizedInjections",
				"com.google.inject.spi.InjectionPointTest.Super",
				"com.google.inject.spi.InjectionPointTest.Sub",
				"com.google.inject.spi.InjectionPointTest.RestrictedSuper",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.InjectorSpiTest.Baz",
				"com.google.inject.spi.InjectorSpiTest.ClassWithInjectableField",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.spi.SpiBindingsTest.D",
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.spi.ToolStageInjectorTest.Bar",
				"com.google.inject.spi.ToolStageInjectorTest.Foo",
				"com.google.inject.spi.ToolStageInjectorTest.Tooled",
				"com.googlecode.guice.PackageVisibilityTestModule",
				"com.googlecode.guice.PackageVisibilityTestModule.PublicUserOfPackagePrivate",
				"com.googlecode.guice.bundle.OSGiTestActivator",
				"com.googlecode.guice.bundle.OSGiTestActivator.AA",
				"com.googlecode.guice.bundle.OSGiTestActivator.AB",
				"com.googlecode.guice.bundle.OSGiTestActivator.AC",
				"com.googlecode.guice.bundle.OSGiTestActivator.AD",
				"com.googlecode.guice.bundle.OSGiTestActivator.BA",
				"com.googlecode.guice.bundle.OSGiTestActivator.BB",
				"com.googlecode.guice.bundle.OSGiTestActivator.BC",
				"com.googlecode.guice.bundle.OSGiTestActivator.BD",
				"com.googlecode.guice.bundle.OSGiTestActivator.CA",
				"com.googlecode.guice.bundle.OSGiTestActivator.CB",
				"com.googlecode.guice.bundle.OSGiTestActivator.CC",
				"com.googlecode.guice.bundle.OSGiTestActivator.CD",
				"com.googlecode.guice.bundle.OSGiTestActivator.DA",
				"com.googlecode.guice.bundle.OSGiTestActivator.DB",
				"com.googlecode.guice.bundle.OSGiTestActivator.DC",
				"com.googlecode.guice.bundle.OSGiTestActivator.DD",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.ExtensionSpiTest.Cat",
				"com.google.inject.assistedinject.ExtensionSpiTest.SimpleCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.CatWithAName",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Dog",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AssistedSingleton",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
				"com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
				"com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
				"com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
				"com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
				"com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
				"com.google.inject.assistedinject.FactoryProvider2Test.Z",
				"com.google.inject.assistedinject.FactoryProvider2Test.Prius",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.WildcardCollection",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
				"com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.Delegater",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssisted",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithoutOverride",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest.Thing",
				"com.google.inject.grapher.AbstractInjectorGrapherTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A2",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClass",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClassProvider",
				"com.google.inject.persist.jpa.DynamicFinderTest",
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaDao",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest.JpaDao",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest.JpaDao",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest.TransactionalObject",
				"com.google.inject.servlet.ContextPathTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.SomeObject",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.NormalInjectableFoo",
				"com.google.inject.throwingproviders.ThrowingProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Providers",
				"com.google.inject.util.Providers.GuicifiedProviderWithDependencies",
				"com.google.inject.example.ClientServiceWithGuice",
				"com.google.inject.example.ClientServiceWithGuice.Client",
				"com.google.inject.example.ClientServiceWithGuiceDefaults",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.Client",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.assistedinject.Equals",
				"com.google.inject.assistedinject.Equals.Impl",
				"com.google.inject.grapher.graphviz.GraphvizGrapher",
				"com.google.inject.grapher.demo.DancePartyImpl",
				"com.google.inject.grapher.demo.DeLorian",
				"com.google.inject.grapher.demo.EnergySourceProvider",
				"com.google.inject.grapher.demo.Lightning",
				"com.google.inject.grapher.demo.PlutoniumProvider",
				"com.google.inject.persist.PersistFilter",
				"com.google.inject.persist.jpa.JpaFinderProxy",
				"com.google.inject.persist.jpa.JpaPersistService",
				"com.google.inject.persist.jpa.JpaPersistService.EntityManagerFactoryProvider",
				"com.google.inject.servlet.GuiceFilter",
				"com.google.inject.servlet.InternalServletModule",
				"com.google.inject.servlet.InternalServletModule.BackwardsCompatibleServletContextProvider",
				"com.google.inject.servlet.ManagedFilterPipeline",
				"com.google.inject.servlet.ManagedServletPipeline",
				"com.google.inject.spring.SpringIntegration",
				"com.google.inject.spring.SpringIntegration.InjectableSpringProvider",
				"com.google.inject.struts2.example.Count"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds the graphs of objects that make up your application. The injector tracks the dependencies\n * for each type and uses bindings to inject them. This is the core of Guice, although you rarely\n * interact with it directly. This \"behind-the-scenes\" operation is what distinguishes dependency\n * injection from its cousin, the service locator pattern.\n *\n * \u003cp\u003eContains several default bindings:\n *\n * \u003cul\u003e\n *   \u003cli\u003eThis {@link Injector} instance itself\n *   \u003cli\u003eA {@code Provider\u003cT\u003e} for each binding of type {@code T}\n *   \u003cli\u003eThe {@link java.util.logging.Logger} for the class being injected\n *   \u003cli\u003eThe {@link Stage} in which the Injector was created\n * \u003c/ul\u003e\n *\n * Injectors are created using the facade class {@link Guice}.\n *\n * \u003cp\u003eAn injector can also {@link #injectMembers(Object) inject the dependencies} of\n * already-constructed instances. This can be used to interoperate with objects created by other\n * frameworks or services.\n *\n * \u003cp\u003eInjectors can be {@link #createChildInjector(Iterable) hierarchical}. Child injectors inherit\n * the configuration of their parent injectors, but the converse does not hold.\n *\n * \u003cp\u003eThe injector's {@link #getBindings() internal bindings} are available for introspection. This\n * enables tools and extensions to operate on an injector reflectively.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.Injector",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Guice uses Key objects to identify a dependency that can be resolved by the Guice {@link\n * Injector}. A Guice key consists of an injection type and an optional annotation.\n *\n * \u003cp\u003eFor example, {@code Key.get(Service.class, Transactional.class)} will match:\n *\n * \u003cpre\u003e\n *   {@literal @}Inject\n *   public void setService({@literal @}Transactional Service service) {\n *     ...\n *   }\n * \u003c/pre\u003e\n *\n * \u003cp\u003e{@code Key} supports generic types via subclassing just like {@link TypeLiteral}.\n *\n * \u003cp\u003eKeys do not differentiate between primitive types (int, char, etc.) and their corresponding\n * wrapper types (Integer, Character, etc.). Primitive types will be replaced with their wrapper\n * types when keys are created.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Key",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  protected Key(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Constructs a new key. Derives the type from this class's type parameter.\n   *\n   * \u003cp\u003eClients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   *\n   * \u003cp\u003eExample usage for a binding of type {@code Foo} annotated with {@code @Bar}:\n   *\n   * \u003cp\u003e{@code new Key\u003cFoo\u003e(Bar.class) {}}.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  protected Key(Annotation annotation)",
					"documentation": "/**\n   * Constructs a new key. Derives the type from this class's type parameter.\n   *\n   * \u003cp\u003eClients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   *\n   * \u003cp\u003eExample usage for a binding of type {@code Foo} annotated with {@code @Bar}:\n   *\n   * \u003cp\u003e{@code new Key\u003cFoo\u003e(new Bar()) {}}.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  protected Key()",
					"documentation": "/**\n   * Constructs a new key. Derives the type from this class's type parameter.\n   *\n   * \u003cp\u003eClients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   *\n   * \u003cp\u003eExample usage for a binding of type {@code Foo}:\n   *\n   * \u003cp\u003e{@code new Key\u003cFoo\u003e() {}}.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private Key(Type type, AnnotationStrategy annotationStrategy)",
					"documentation": "/** Unsafe. Constructs a key from a manually specified type. */"
				},
				{
					"signature": "private Key(TypeLiteral\u003cT\u003e typeLiteral, AnnotationStrategy annotationStrategy)",
					"documentation": "/** Constructs a key from a manually specified type. */"
				},
				{
					"signature": "private int computeHashCode()",
					"documentation": "/** Computes the hash code for this key. */"
				},
				{
					"signature": "public final TypeLiteral\u003cT\u003e getTypeLiteral()",
					"documentation": "/** Gets the key type. */"
				},
				{
					"signature": "public final Class\u003c? extends Annotation\u003e getAnnotationType()",
					"documentation": "/** Gets the annotation type. Will be {@code null} if this key lacks an annotation. */"
				},
				{
					"signature": "public final Annotation getAnnotation()",
					"documentation": "/**\n   * Gets the annotation instance if available. Will be {@code null} if this key lacks an annotation\n   * \u003ci\u003eor\u003c/i\u003e the key was constructed with a {@code Class\u003cAnnotation\u003e}.\n   *\n   * \u003cp\u003e\u003cb\u003eWarning:\u003c/b\u003e this can return null even if this key is annotated. To check whether a\n   * {@code Key} has an annotation use {@link #hasAnnotationType} instead.\n   */"
				},
				{
					"signature": "boolean hasAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "String getAnnotationName()",
					"documentation": ""
				},
				{
					"signature": "Class\u003c? super T\u003e getRawType()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cProvider\u003cT\u003e\u003e providerKey()",
					"documentation": "/** Gets the key of this key's provider. */"
				},
				{
					"signature": "@Override\n  public final boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final String toString()",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e Key\u003cT\u003e get(Class\u003cT\u003e type, AnnotationStrategy annotationStrategy)",
					"documentation": "/** Gets a key for an injection type and an annotation strategy. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(Class\u003cT\u003e type)",
					"documentation": "/** Gets a key for an injection type. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(Class\u003cT\u003e type, Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Gets a key for an injection type and an annotation type. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(Class\u003cT\u003e type, Annotation annotation)",
					"documentation": "/** Gets a key for an injection type and an annotation. */"
				},
				{
					"signature": "public static Key\u003c?\u003e get(Type type)",
					"documentation": "/** Gets a key for an injection type. */"
				},
				{
					"signature": "public static Key\u003c?\u003e get(Type type, Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Gets a key for an injection type and an annotation type. */"
				},
				{
					"signature": "public static Key\u003c?\u003e get(Type type, Annotation annotation)",
					"documentation": "/** Gets a key for an injection type and an annotation. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": "/** Gets a key for an injection type. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(\n      TypeLiteral\u003cT\u003e typeLiteral, Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Gets a key for an injection type and an annotation type. */"
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e get(TypeLiteral\u003cT\u003e typeLiteral, Annotation annotation)",
					"documentation": "/** Gets a key for an injection type and an annotation. */"
				},
				{
					"signature": "public \u003cU\u003e Key\u003cU\u003e ofType(Class\u003cU\u003e type)",
					"documentation": "/**\n   * Returns a new key of the specified type with the same annotation as this key.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public Key\u003c?\u003e ofType(Type type)",
					"documentation": "/**\n   * Returns a new key of the specified type with the same annotation as this key.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public \u003cU\u003e Key\u003cU\u003e ofType(TypeLiteral\u003cU\u003e type)",
					"documentation": "/**\n   * Returns a new key of the specified type with the same annotation as this key.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public Key\u003cT\u003e withAnnotation(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new key of the same type with the specified annotation.\n   *\n   * \u003cp\u003eThis is equivalent to {@code Key.get(key.getTypeLiteral(), annotation)} but may be more\n   * convenient to use in certain cases.\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "public Key\u003cT\u003e withAnnotation(Annotation annotation)",
					"documentation": "/**\n   * Returns a new key of the same type with the specified annotation.\n   *\n   * \u003cp\u003eThis is equivalent to {@code Key.get(key.getTypeLiteral(), annotation)} but may be more\n   * convenient to use in certain cases.\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "public boolean hasAttributes()",
					"documentation": "/**\n   * Returns true if this key has annotation attributes.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public Key\u003cT\u003e withoutAttributes()",
					"documentation": "/**\n   * Returns this key without annotation attributes, i.e. with only the annotation type.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "static AnnotationStrategy strategyFor(Annotation annotation)",
					"documentation": "/** Gets the strategy for an annotation. */"
				},
				{
					"signature": "static AnnotationStrategy strategyFor(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Gets the strategy for an annotation type. */"
				},
				{
					"signature": "private static void ensureRetainedAtRuntime(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "private static void ensureIsBindingAnnotation(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.WeakKeySetTest",
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.subpkg.SubpackageTest",
				"com.google.inject.daggeradapter.BindsTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.OptionalBindingsTest",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.servlet.ExtensionSpiTest",
				"com.google.inject.servlet.FilterDefinitionTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ServletDefinitionPathsTest",
				"com.google.inject.servlet.ServletDefinitionTest",
				"com.google.inject.servlet.ServletPipelineRequestDispatcherTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.spring.SpringIntegrationTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key.AnnotationInstanceStrategy",
				"com.google.inject.Key.AnnotationTypeStrategy",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.MoreTypes"
			],
			"usedBy": [
				"com.google.inject.internal.AbstractBindingBuilder",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.InjectorShell",
				"com.google.inject.internal.ProviderMethodsModule",
				"com.google.inject.internal.ProvisionListenerCallbackStore",
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealMultibinder.BindingSelection",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.OptionalBinder",
				"com.google.inject.internal.SpiUtils",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.assistedinject.Parameter",
				"com.google.inject.daggeradapter.Keys",
				"com.google.inject.grapher.DefaultRootKeySetCreator",
				"com.google.inject.servlet.FiltersModuleBuilder",
				"com.google.inject.servlet.FilterKeyBindingBuilderImpl",
				"com.google.inject.servlet.ServletScopes",
				"com.google.inject.servlet.ServletScopes.RequestScope",
				"com.google.inject.servlet.ServletsModuleBuilder",
				"com.google.inject.servlet.ServletKeyBindingBuilderImpl",
				"com.google.inject.servlet.Module",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule",
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.SecondaryBinder"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.AnnotationStrategy",
				"com.google.inject.Key.NullAnnotationStrategy",
				"com.google.inject.Key.AnnotationInstanceStrategy",
				"com.google.inject.Key.AnnotationTypeStrategy"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.AnnotationStrategy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.Key.NullAnnotationStrategy",
				"com.google.inject.Key.AnnotationInstanceStrategy",
				"com.google.inject.Key.AnnotationTypeStrategy"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Key.NullAnnotationStrategy",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public boolean hasAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotationStrategy withoutAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Annotation getAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e getAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.AnnotationStrategy"
			],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Key.AnnotationInstanceStrategy",
			"extends": "",
			"Methods": [
				{
					"signature": "AnnotationInstanceStrategy(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean hasAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotationStrategy withoutAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Annotation getAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e getAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.AnnotationStrategy"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.Key"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Key.AnnotationTypeStrategy",
			"extends": "",
			"Methods": [
				{
					"signature": "AnnotationTypeStrategy(Class\u003c? extends Annotation\u003e annotationType, Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean hasAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotationStrategy withoutAttributes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Annotation getAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e getAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.AnnotationStrategy"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.Key"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Injects dependencies into the fields and methods on instances of type {@code T}. Ignores the\n * presence or absence of an injectable constructor.\n *\n * @param \u003cT\u003e type to inject members of\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.MembersInjector",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ElementsTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.TypeListenerTest.CountingMembersInjector"
			],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.MembersInjectorLookup"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A module contributes configuration information, typically interface bindings, which will be used\n * to create an {@link Injector}. A Guice-based application is ultimately composed of little more\n * than a set of {@code Module}s and some bootstrapping code.\n *\n * \u003cp\u003eYour Module classes can use a more streamlined syntax by extending {@link AbstractModule}\n * rather than implementing this interface directly.\n *\n * \u003cp\u003eIn addition to the bindings configured via {@link #configure}, bindings will be created for\n * all methods annotated with {@literal @}{@link Provides}. Use scope and binding annotations on\n * these methods to configure the bindings.\n */",
			"name": "com.google.inject.Module",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.util.OverrideModuleTest",
				"com.googlecode.guice.BytecodeGenTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.AbstractModule",
				"com.google.inject.PrivateModule",
				"com.google.inject.ModuleTest.A",
				"com.google.inject.ModuleTest.B",
				"com.google.inject.ModuleTest.C",
				"com.google.inject.ModuleTest.D"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Thrown from {@link Provider#get} when an attempt is made to access a scoped object while the\n * scope in question is not currently active.\n *\n * @author kevinb@google.com (Kevin Bourrillion)\n * @since 2.0\n */",
			"name": "com.google.inject.OutOfScopeException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "public OutOfScopeException(String message)",
					"documentation": "/**\n * Thrown from {@link Provider#get} when an attempt is made to access a scoped object while the\n * scope in question is not currently active.\n *\n * @author kevinb@google.com (Kevin Bourrillion)\n * @since 2.0\n */"
				},
				{
					"signature": "public OutOfScopeException(String message, Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public OutOfScopeException(Throwable cause)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ContinuingHttpServletRequest",
				"com.google.inject.servlet.GuiceFilter",
				"com.google.inject.servlet.ServletScopes"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Returns a binder whose configuration information is hidden from its environment by default. See\n * {@link com.google.inject.PrivateModule PrivateModule} for details.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.PrivateBinder",
			"extends": "com.google.inject.Binder",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A module whose configuration information is hidden from its environment by default. Only bindings\n * that are explicitly exposed will be available to other modules and to the users of the injector.\n * This module may expose the bindings it creates and the bindings of the modules it installs.\n *\n * \u003cp\u003eA private module can be nested within a regular module or within another private module using\n * {@link Binder#install install()}. Its bindings live in a new environment that inherits bindings,\n * type converters, scopes, and interceptors from the surrounding (\"parent\") environment. When you\n * nest multiple private modules, the result is a tree of environments where the injector's\n * environment is the root.\n *\n * \u003cp\u003eGuice EDSL bindings can be exposed with {@link #expose(Class) expose()}. {@literal @}{@link\n * com.google.inject.Provides Provides} bindings can be exposed with the {@literal @}{@link Exposed}\n * annotation:\n *\n * \u003cpre\u003e\n * public class FooBarBazModule extends PrivateModule {\n *   protected void configure() {\n *     bind(Foo.class).to(RealFoo.class);\n *     expose(Foo.class);\n *\n *     install(new TransactionalBarModule());\n *     expose(Bar.class).annotatedWith(Transactional.class);\n *\n *     bind(SomeImplementationDetail.class);\n *     install(new MoreImplementationDetailsModule());\n *   }\n *\n *   {@literal @}Provides {@literal @}Exposed\n *   public Baz provideBaz() {\n *     return new SuperBaz();\n *   }\n * }\n * \u003c/pre\u003e\n *\n * \u003cp\u003ePrivate modules are implemented using {@link Injector#createChildInjector(Module[]) parent\n * injectors}. When it can satisfy their dependencies, just-in-time bindings will be created in the\n * root environment. Such bindings are shared among all environments in the tree.\n *\n * \u003cp\u003eThe scope of a binding is constrained to its environment. A singleton bound in a private\n * module will be unique to its environment. But a binding for the same type in a different private\n * module will yield a different instance.\n *\n * \u003cp\u003eA shared binding that injects the {@code Injector} gets the root injector, which only has\n * access to bindings in the root environment. An explicit binding that injects the {@code Injector}\n * gets access to all bindings in the child environment.\n *\n * \u003cp\u003eTo promote a just-in-time binding to an explicit binding, bind it:\n *\n * \u003cpre\u003e\n *   bind(FooImpl.class);\n * \u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.PrivateModule",
			"extends": "",
			"Methods": [
				{
					"signature": "protected final \u003cT\u003e void expose(Key\u003cT\u003e key)",
					"documentation": "/** Makes the binding for {@code key} available to other modules and the injector. */"
				},
				{
					"signature": "protected final AnnotatedElementBuilder expose(Class\u003c?\u003e type)",
					"documentation": "/**\n   * Makes a binding for {@code type} available to other modules and the injector. Use {@link\n   * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a\n   * binding annotation.\n   */"
				},
				{
					"signature": "protected final AnnotatedElementBuilder expose(TypeLiteral\u003c?\u003e type)",
					"documentation": "/**\n   * Makes a binding for {@code type} available to other modules and the injector. Use {@link\n   * AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a\n   * binding annotation.\n   */"
				},
				{
					"signature": "protected final PrivateBinder binder()",
					"documentation": "/** Returns the current binder. */"
				},
				{
					"signature": "protected final void bindScope(Class\u003c? extends Annotation\u003e scopeAnnotation, Scope scope)",
					"documentation": "/** @see Binder#bindScope(Class, Scope) */"
				},
				{
					"signature": "protected final \u003cT\u003e LinkedBindingBuilder\u003cT\u003e bind(Key\u003cT\u003e key)",
					"documentation": "/** @see Binder#bind(Key) */"
				},
				{
					"signature": "protected final \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": "/** @see Binder#bind(TypeLiteral) */"
				},
				{
					"signature": "protected final \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(Class\u003cT\u003e clazz)",
					"documentation": "/** @see Binder#bind(Class) */"
				},
				{
					"signature": "protected final AnnotatedConstantBindingBuilder bindConstant()",
					"documentation": "/** @see Binder#bindConstant() */"
				},
				{
					"signature": "protected final void install(Module module)",
					"documentation": "/** @see Binder#install(Module) */"
				},
				{
					"signature": "protected final void addError(String message, Object... arguments)",
					"documentation": "/** @see Binder#addError(String, Object[]) */"
				},
				{
					"signature": "protected final void addError(Throwable t)",
					"documentation": "/** @see Binder#addError(Throwable) */"
				},
				{
					"signature": "protected final void addError(Message message)",
					"documentation": "/** @see Binder#addError(Message) */"
				},
				{
					"signature": "protected final void requestInjection(Object instance)",
					"documentation": "/** @see Binder#requestInjection(Object) */"
				},
				{
					"signature": "protected final void requestStaticInjection(Class\u003c?\u003e... types)",
					"documentation": "/** @see Binder#requestStaticInjection(Class[]) */"
				},
				{
					"signature": "protected final void bindInterceptor(\n      Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n      Matcher\u003c? super Method\u003e methodMatcher,\n      MethodInterceptor... interceptors)",
					"documentation": "/**\n   * @see Binder#bindInterceptor(com.google.inject.matcher.Matcher,\n   *     com.google.inject.matcher.Matcher, org.aopalliance.intercept.MethodInterceptor[])\n   */"
				},
				{
					"signature": "protected final void requireBinding(Key\u003c?\u003e key)",
					"documentation": "/** Instructs Guice to require a binding to the given key. */"
				},
				{
					"signature": "protected final void requireBinding(Class\u003c?\u003e type)",
					"documentation": "/** Instructs Guice to require a binding to the given type. */"
				},
				{
					"signature": "protected final \u003cT\u003e Provider\u003cT\u003e getProvider(Key\u003cT\u003e key)",
					"documentation": "/** @see Binder#getProvider(Key) */"
				},
				{
					"signature": "protected final \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": "/** @see Binder#getProvider(Class) */"
				},
				{
					"signature": "protected final void convertToTypes(\n      Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeConverter converter)",
					"documentation": "/**\n   * @see Binder#convertToTypes(com.google.inject.matcher.Matcher,\n   *     com.google.inject.spi.TypeConverter)\n   */"
				},
				{
					"signature": "protected final Stage currentStage()",
					"documentation": "/** @see Binder#currentStage() */"
				},
				{
					"signature": "protected \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": "/** @see Binder#getMembersInjector(Class) */"
				},
				{
					"signature": "protected \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e type)",
					"documentation": "/** @see Binder#getMembersInjector(TypeLiteral) */"
				},
				{
					"signature": "protected void bindListener(Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeListener listener)",
					"documentation": "/**\n   * @see Binder#bindListener(com.google.inject.matcher.Matcher, com.google.inject.spi.TypeListener)\n   */"
				},
				{
					"signature": "protected void bindListener(\n      Matcher\u003c? super Binding\u003c?\u003e\u003e bindingMatcher, ProvisionListener... listeners)",
					"documentation": "/**\n   * @see Binder#bindListener(Matcher, ProvisionListener...)\n   * @since 4.0\n   */"
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.servlet.ServletScopesTest"
			],
			"subClasses": [
				"com.google.inject.PrivateModuleTest.FailingPrivateModule",
				"com.google.inject.PrivateModuleTest.SecondFailingPrivateModule",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleCreatesUnexposedNetworkBinding",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleExposesNetworkBinding"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A pointer to the default provider type for a type.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.ProvidedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BinderTest.HasProvidedBy2",
				"com.google.inject.BinderTestSuite",
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.CircularDependencyTest.C2",
				"com.google.inject.CircularDependencyTest.D2",
				"com.google.inject.ImplicitBindingTest",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy2",
				"com.google.inject.InjectorTest",
				"com.google.inject.InjectorTest.Money",
				"com.google.inject.InjectorTest.Chicken",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.JitBindingsTest.ProvBy",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ProvisionListenerTest.JitFoo2",
				"com.google.inject.ScopesTest",
				"com.google.inject.ScopesTest.ProvidedBySingleton"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.HasProvidedBy1",
				"com.google.inject.AWithProvidedBy",
				"com.google.inject.A",
				"com.google.inject.B",
				"com.google.inject.Provided",
				"com.google.inject.NonEmptyEnum",
				"com.google.inject.EmptyEnum",
				"com.google.inject.E",
				"com.google.inject.grapher.demo.EnergySource"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An object capable of providing instances of type {@code T}. Providers are used in numerous ways\n * by Guice:\n *\n * \u003cul\u003e\n * \u003cli\u003eWhen the default means for obtaining instances (an injectable or parameterless constructor)\n *     is insufficient for a particular binding, the module can specify a custom {@code Provider}\n *     instead, to control exactly how Guice creates or obtains instances for the binding.\n * \u003cli\u003eAn implementation class may always choose to have a {@code Provider\u003cT\u003e} instance injected,\n *     rather than having a {@code T} injected directly. This may give you access to multiple\n *     instances, instances you wish to safely mutate and discard, instances which are out of scope\n *     (e.g. using a {@code @RequestScoped} object from within a {@code @SessionScoped} object), or\n *     instances that will be initialized lazily.\n * \u003cli\u003eA custom {@link Scope} is implemented as a decorator of {@code Provider\u003cT\u003e}, which decides\n *     when to delegate to the backing provider and when to provide the instance some other way.\n * \u003cli\u003eThe {@link Injector} offers access to the {@code Provider\u003cT\u003e} it uses to fulfill requests for\n *     a given key, via the {@link Injector#getProvider} methods.\n * \u003c/ul\u003e\n *\n * @param \u003cT\u003e the type of object this provides\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Provider",
			"extends": "javax.inject.Provider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.TestScope"
			],
			"subClasses": [
				"com.google.inject.ShardedStringProvider"
			],
			"implementedBy": [
				"com.google.inject.BinderTest.HasProvidedBy1Provider",
				"com.google.inject.BinderTest.HasProvidedBy2Provider",
				"com.google.inject.BinderTestSuite.PlainAProvider",
				"com.google.inject.BindingTest.FooProvider",
				"com.google.inject.BindingTest.Counter",
				"com.google.inject.BoundInstanceInjectionTest.MalformedProvider",
				"com.google.inject.BoundProviderTest.FooProvider",
				"com.google.inject.BoundProviderTest.SingletonFooProvider",
				"com.google.inject.CircularDependencyTest.AP",
				"com.google.inject.CircularDependencyTest.AutoAP",
				"com.google.inject.CircularDependencyTest.BP",
				"com.google.inject.CircularDependencyTest.C2P",
				"com.google.inject.CircularDependencyTest.D2P",
				"com.google.inject.DuplicateBindingsTest.FooProvider",
				"com.google.inject.DuplicateBindingsTest.BarProvider",
				"com.google.inject.DuplicateBindingsTest.HashEqualsTester",
				"com.google.inject.ImplicitBindingTest.ProvidedProvider",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedByProvider",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy2Provider",
				"com.google.inject.ImplicitBindingTest.TestStringProvider",
				"com.google.inject.ImplicitBindingTest.NonEmptyEnumProvider",
				"com.google.inject.ImplicitBindingTest.EmptyEnumProvider",
				"com.google.inject.InjectorTest.Tree",
				"com.google.inject.InjectorTest.Chicken",
				"com.google.inject.Java8LanguageFeatureBindingTest.StringProvider",
				"com.google.inject.JitBindingsTest.FooProvider",
				"com.google.inject.JitBindingsTest.ProvByProvider",
				"com.google.inject.MethodInterceptionTest.BarGetter",
				"com.google.inject.OptionalBindingTest.HasOptionalInjectionsProvider",
				"com.google.inject.ProvisionExceptionTest.DProvider",
				"com.google.inject.ProvisionExceptionTest.FProvider",
				"com.google.inject.ProvisionListenerTest.FooP",
				"com.google.inject.ProvisionListenerTest.JitFoo2P",
				"com.google.inject.ProvisionListenerTest.DP",
				"com.google.inject.ScopesTest.EProvider",
				"com.google.inject.ScopesTest.ImplementationProvider",
				"com.google.inject.ScopesTest.SBarrierProvider"
			],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.SingletonScope",
				"com.google.inject.servlet.ServletScopes",
				"com.google.inject.servlet.ServletScopes.RequestScope",
				"com.google.inject.servlet.ServletScopes.SessionScope"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates methods of a {@link Module} to create a provider method binding. The method's return\n * type is bound to its returned value. Guice will pass dependencies to the method as parameters.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.Provides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.DuplicateBindingsTest.FailedModule",
				"com.google.inject.DuplicateBindingsTest.FailingProviderModule",
				"com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
				"com.google.inject.GenericInjectionTest",
				"com.google.inject.Java8LanguageFeatureBindingTest",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ProvisionExceptionsTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModule",
				"com.google.inject.RestrictedBindingSourceTest.RoutingModule",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule",
				"com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule",
				"com.google.inject.ScopesTest",
				"com.google.inject.errors.BindingAlreadySetErrorTest",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithProviderMethodModule",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule2",
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule",
				"com.google.inject.errors.GenericErrorTest",
				"com.google.inject.errors.GenericErrorTest.ProvisionErrorModule",
				"com.google.inject.errors.MissingConstructorErrorTest",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorModule",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorAtInjectRequiredModule",
				"com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructorModule",
				"com.google.inject.errors.MissingImplementationErrorTest",
				"com.google.inject.errors.MissingImplementationErrorTest.HintsModule",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProvidesMethodModule",
				"com.google.inject.errors.ScopeNotFoundErrorTest",
				"com.google.inject.errors.ScopeNotFoundErrorTest.ErrorModule",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module1",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module2",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.ProviderMethodsTest.FooModule",
				"com.google.inject.spi.ProviderMethodsTest.VisibilityModule",
				"com.google.inject.spi.ProviderMethodsTest.BaseModule",
				"com.google.inject.spi.ProviderMethodsTest.Sub1Module",
				"com.google.inject.spi.ProviderMethodsTest.Sub2Module",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule",
				"com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
				"com.google.inject.spi.ProviderMethodsTest.GenericSuperModule",
				"com.google.inject.spi.ProviderMethodsTest.RestrictedSuper",
				"com.google.inject.spi.ProviderMethodsTest.ModuleImpl",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateModule",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateStaticModule",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.OverrideModuleTest.ExampleModule",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SimpleGuiceModule",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.ShortNameFactoryTest.ProvidingModule",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.TransferRequestIntegrationTest",
				"com.google.inject.struts2.Struts2FactoryTest",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithoutPermit",
				"com.google.inject.NetworkModuleVersion2",
				"com.google.inject.internal.Main",
				"com.google.inject.spi.ProvideTs",
				"com.google.inject.spi.SubClassModule",
				"com.googlecode.guice.GuiceTck",
				"com.example.App",
				"com.example.App.MessageModule",
				"com.google.inject.grapher.demo.BackToTheFutureModule",
				"com.google.inject.persist.jpa.JpaPersistModule",
				"com.google.inject.servlet.InternalServletModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Indicates that there was a runtime failure while providing an instance.\n *\n * @author kevinb@google.com (Kevin Bourrillion)\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.ProvisionException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "public ProvisionException(Iterable\u003cMessage\u003e messages)",
					"documentation": "/** Creates a ProvisionException containing {@code messages}. */"
				},
				{
					"signature": "public ProvisionException(String message, Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public ProvisionException(String message)",
					"documentation": ""
				},
				{
					"signature": "public Collection\u003cMessage\u003e getErrorMessages()",
					"documentation": "/** Returns messages for the errors that caused this exception. */"
				},
				{
					"signature": "@Override\n  public String getMessage()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MessagesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Messages",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.SingletonScope"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotation restricting the binding of the target type to permitted sources.\n *\n * \u003cp\u003eBindings restricted by this annotation may only be created by sources annotated with a permit\n * from {@link #permits} -- otherwise, an error message including the {@link #explanation} is\n * issued.\n *\n * \u003cp\u003eThere are two kinds of binding source:\n *\n * \u003col\u003e\n *   \u003cli\u003eModule: a module is the source of a binding if it creates it (either directly, or\n *       indirectly by installing another module). For example: if module A creates restricted\n *       binding X, and module C installs module B that installs A; then all 3 modules C,B,A are\n *       sources of X, and it's enough for any one of them to be annotated with a permit from X's\n *       restriction.\n *   \u003cli\u003eMethod Scanner ({@code ModuleAnnotatedMethodScanner}): If a binding was created by a\n *       scanner, then that scanner is also a source of the binding (in addition to the module\n *       sources) and a permit may be given to the scanner by annotating its class.\n * \u003c/ol\u003e\n *\n * \u003cp\u003eBindings with qualifier annotations are restricted solely by the annotation on their qualifier\n * (restrictions on the type are ignored for qualified bindings). Unqualified bindings are\n * restricted by the annotation on their type.\n *\n * \u003cp\u003eThis allows libraries to prevent their clients from binding their keys, similar to how\n * declaring a class final prevents subtyping. For example, a library may want to prevent users from\n * creating mock bindings for tests, using the {@link #explanation} - included in the error message\n * - to point them to a supported testing module.\n *\n * \u003cp\u003eExample usage:\n *\n * \u003cpre\u003e\n * {@literal @}RestrictedBindingSource.Permit\n * {@literal @}Retention(RetentionPolicy.RUNTIME)\n * {@literal @}interface NetworkPermit {}\n *\n * {@literal @}RestrictedBindingSource(\n *   explanation = \"Only NetworkModule can create network bindings.\",\n *   permits = {NetworkPermit.class})\n * {@literal @}Qualifier\n * {@literal @}Retention(RetentionPolicy.RUNTIME)\n * public {@literal @}interface GatewayIpAdress {}\n *\n * {@literal @}NetworkPermit\n * public final class NetworkModule extends AbstractModule {\n *   // Allowed because the module is annotated with {@literal @}NetworkPermit.\n *   {@literal @}Provides\n *   {@literal @}GatewayIpAdress\n *   int provideGatewayIp() { ... }\n * }\n * \u003c/pre\u003e\n *\n * @author vzm@google.com (Vladimir Makaric)\n * @since 5.0\n */",
			"name": "com.google.inject.RestrictedBindingSource",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.GatewayIpAdress",
				"com.google.inject.Hostname",
				"com.google.inject.RoutingTable",
				"com.google.inject.MacAddress",
				"com.google.inject.Foo",
				"com.google.inject.HostIp",
				"com.google.inject.DnsAddress",
				"com.google.inject.Network",
				"com.google.inject.testing.fieldbinder.Foo"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.Permit",
				"com.google.inject.RestrictedBindingSource.RestrictionLevel"
			]
		},
		{
			"documentation": "/**\n   * Meta-annotation indicating that the target annotation is a permit for binding restricted\n   * bindings. Annotating a binding source (defined in top-level javadoc) with a permit gives it\n   * permission to bind the restricted bindings guarded by the permit (see {@link #permits}).\n   *\n   * @since 5.0\n   */",
			"name": "com.google.inject.Permit",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Level of restriction. Determines how violations are handled.\n   *\n   * @since 5.0\n   */",
			"name": "com.google.inject.RestrictedBindingSource.RestrictionLevel",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A scope is a level of visibility that instances provided by Guice may have. By default, an\n * instance created by the {@link Injector} has \u003ci\u003eno scope\u003c/i\u003e, meaning it has no state from the\n * framework's perspective -- the {@code Injector} creates it, injects it once into the class that\n * required it, and then immediately forgets it. Associating a scope with a particular binding\n * allows the created instance to be \"remembered\" and possibly used again for other injections.\n *\n * \u003cp\u003eAn example of a scope is {@link Scopes#SINGLETON}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Scope",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.BinderTestSuite.TwoAtATimeScope",
				"com.google.inject.CircularDependencyTest.BasicSingleton",
				"com.google.inject.RememberProviderScope",
				"com.google.inject.ProviderGetScope"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates annotations which are used for scoping. Only one such annotation may apply to a single\n * implementation class. You must also annotate scope annotations with {@code @Retention(RUNTIME)}.\n * For example:\n *\n * \u003cpre\u003e\n *   {@code @}Retention(RUNTIME)\n *   {@code @}Target(TYPE, METHOD)\n *   {@code @}ScopeAnnotation\n *   public {@code @}interface SessionScoped {}\n * \u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.ScopeAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTestSuite",
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.errors.ScopeNotFoundErrorTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.OverrideModuleTest.TestScopeAnnotation",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.TestScope"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.Singleton",
				"com.google.inject.TwoAtATimeScoped",
				"com.google.inject.SimpleSingleton",
				"com.google.inject.MyScope",
				"com.google.inject.CustomScoped",
				"com.google.inject.NotRuntimeRetainedScoped",
				"com.google.inject.errors.BatchScoped",
				"com.google.inject.errors.RequestScoped",
				"com.google.inject.servlet.SessionScoped",
				"com.google.inject.servlet.CustomScoped",
				"com.google.inject.throwingproviders.BadScope",
				"com.google.inject.throwingproviders.Scoped"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Built-in scope implementations.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Scopes",
			"extends": "",
			"Methods": [
				{
					"signature": "private Scopes()",
					"documentation": "/**\n * Built-in scope implementations.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "@Override\n        public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": "/**\n   * No scope; the same as not applying any scope at all. Each time the Injector obtains an instance\n   * of an object with \"no scope\", it injects this instance then immediately forgets it. When the\n   * next request for the same binding arrives it will need to obtain the instance over again.\n   *\n   * \u003cp\u003eThis exists only in case a class has been annotated with a scope annotation such as {@link\n   * Singleton @Singleton}, and you need to override this to \"no scope\" in your binding.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Boolean visitNoScoping()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Boolean visitScopeAnnotation(Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Boolean visitScope(Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Boolean visitEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public static boolean isSingleton(Binding\u003c?\u003e binding)",
					"documentation": "/**\n   * Returns true if {@code binding} is singleton-scoped. If the binding is a {@link\n   * com.google.inject.spi.LinkedKeyBinding linked key binding} and belongs to an injector (ie. it\n   * was retrieved via {@link Injector#getBinding Injector.getBinding()}), then this method will\n   * also true if the target binding is singleton-scoped.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "do",
					"documentation": "/**\n   * Returns true if {@code binding} is singleton-scoped. If the binding is a {@link\n   * com.google.inject.spi.LinkedKeyBinding linked key binding} and belongs to an injector (ie. it\n   * was retrieved via {@link Injector#getBinding Injector.getBinding()}), then this method will\n   * also true if the target binding is singleton-scoped.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public static boolean isScoped(\n      Binding\u003c?\u003e binding, final Scope scope, final Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": "/**\n   * Returns true if {@code binding} has the given scope. If the binding is a {@link\n   * com.google.inject.spi.LinkedKeyBinding linked key binding} and belongs to an injector (ie. it\n   * was retrieved via {@link Injector#getBinding Injector.getBinding()}), then this method will\n   * also true if the target binding has the given scope.\n   *\n   * @param binding binding to check\n   * @param scope scope implementation instance\n   * @param scopeAnnotation scope annotation class\n   * @since 4.0\n   */"
				},
				{
					"signature": "do",
					"documentation": "/**\n   * Returns true if {@code binding} has the given scope. If the binding is a {@link\n   * com.google.inject.spi.LinkedKeyBinding linked key binding} and belongs to an injector (ie. it\n   * was retrieved via {@link Injector#getBinding Injector.getBinding()}), then this method will\n   * also true if the target binding has the given scope.\n   *\n   * @param binding binding to check\n   * @param scope scope implementation instance\n   * @param scopeAnnotation scope annotation class\n   * @since 4.0\n   */"
				},
				{
					"signature": "private static Injector getInjector(LinkedKeyBinding\u003c?\u003e linkedKeyBinding)",
					"documentation": ""
				},
				{
					"signature": "public static boolean isCircularProxy(Object object)",
					"documentation": "/**\n   * Returns true if the object is a proxy for a circular dependency, constructed by Guice because\n   * it encountered a circular dependency. Scope implementations should be careful to \u003cb\u003enot cache\n   * circular proxies\u003c/b\u003e, because the proxies are not intended for general purpose use. (They are\n   * designed just to fulfill the immediate injection, not all injections. Caching them can lead to\n   * IllegalArgumentExceptions or ClassCastExceptions.)\n   *\n   * @since 4.0\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.BytecodeGen",
				"com.google.inject.internal.SingletonScope",
				"com.google.inject.spi.BindingScopingVisitor"
			],
			"usedBy": [
				"com.google.inject.servlet.ServletScopes"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this to implementation classes when you want only one instance (per {@link Injector}) to be\n * reused for all injections for that binding.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Singleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingTest",
				"com.google.inject.BindingTest.F",
				"com.google.inject.BoundProviderTest",
				"com.google.inject.BoundProviderTest.SingletonFooProvider",
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.AutoAP",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.CircularDependencyTest.RealF",
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.EagerSingletonTest",
				"com.google.inject.EagerSingletonTest.A",
				"com.google.inject.EagerSingletonTest.B",
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.InjectorTest",
				"com.google.inject.InjectorTest.BarImpl",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.JitBindingsTest.ScopedFooImpl",
				"com.google.inject.JitBindingsTest.ImplByScopedImpl",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.ParentInjectorTest.A",
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ProvisionListenerTest.Sole",
				"com.google.inject.ScopesTest",
				"com.google.inject.ComponentAnnotationTest",
				"com.google.inject.ScopesTest.Injected",
				"com.google.inject.ScopesTest.AnnotatedSingleton",
				"com.google.inject.ScopesTest.RealLinkedSingleton",
				"com.google.inject.ScopesTest.JustInTimeSingleton",
				"com.google.inject.ScopesTest.SingletonAndCustomScoped",
				"com.google.inject.ScopesTest.ThrowingSingleton",
				"com.google.inject.ScopesTest.GImpl",
				"com.google.inject.ScopesTest.HImpl",
				"com.google.inject.ScopesTest.I0",
				"com.google.inject.ScopesTest.I1",
				"com.google.inject.ScopesTest.I2",
				"com.google.inject.ScopesTest.J0",
				"com.google.inject.ScopesTest.J1",
				"com.google.inject.ScopesTest.J2",
				"com.google.inject.ScopesTest.K0",
				"com.google.inject.ScopesTest.K1",
				"com.google.inject.ScopesTest.K2",
				"com.google.inject.ScopesTest.SingletonClass",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AssistedSingleton",
				"com.google.inject.tools.jmx.JmxTest",
				"com.google.inject.tools.jmx.JmxTest.TransactionalFoo",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.ContinuingServlet",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.OffRequestCallable",
				"com.google.inject.servlet.FilterDispatchIntegrationTest",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingServlet",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingFilter",
				"com.google.inject.servlet.FilterPipelineTest",
				"com.google.inject.servlet.FilterPipelineTest.TestFilter",
				"com.google.inject.servlet.FilterPipelineTest.NeverFilter",
				"com.google.inject.servlet.InjectedFilterPipelineTest",
				"com.google.inject.servlet.InjectedFilterPipelineTest.TestFilter",
				"com.google.inject.servlet.InjectedFilterPipelineTest.NeverFilter",
				"com.google.inject.servlet.InvalidScopeBindingTest",
				"com.google.inject.servlet.InvalidScopeBindingTest.MySingletonFilter",
				"com.google.inject.servlet.MultiModuleDispatchIntegrationTest",
				"com.google.inject.servlet.MultiModuleDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.OffRequestCallable",
				"com.google.inject.servlet.ServletDispatchIntegrationTest",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.NeverServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardingServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardedServlet",
				"com.google.inject.servlet.VarargsFilterDispatchIntegrationTest",
				"com.google.inject.servlet.VarargsFilterDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.NeverServlet",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestFilter"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [
				"com.google.inject.A",
				"com.google.inject.D",
				"com.google.inject.E",
				"com.google.inject.example.ClientServiceWithGuiceDefaults",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.ServiceImpl",
				"com.google.inject.persist.PersistFilter",
				"com.google.inject.persist.jpa.JpaFinderProxy",
				"com.google.inject.persist.jpa.JpaPersistService",
				"com.google.inject.persist.jpa.JpaPersistService.EntityManagerFactoryProvider",
				"com.google.inject.servlet.InternalServletModule",
				"com.google.inject.servlet.InternalServletModule.BackwardsCompatibleServletContextProvider",
				"com.google.inject.servlet.ManagedFilterPipeline",
				"com.google.inject.servlet.ManagedServletPipeline",
				"com.google.inject.servlet.DummyServlet"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The stage we're running in.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.Stage",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Represents a generic type {@code T}. Java doesn't yet provide a way to represent generic types,\n * so this class does. Forces clients to create a subclass of this class which enables retrieval of\n * the type information even at runtime.\n *\n * \u003cp\u003eFor example, to create a type literal for {@code List\u003cString\u003e}, you can create an empty\n * anonymous inner class:\n *\n * \u003cp\u003e{@code TypeLiteral\u003cList\u003cString\u003e\u003e list = new TypeLiteral\u003cList\u003cString\u003e\u003e() {};}\n *\n * \u003cp\u003eAlong with modeling generic types, this class can resolve type parameters. For example, to\n * figure out what type {@code keySet()} returns on a {@code Map\u003cInteger, String\u003e}, use this code:\n *\n * \u003cpre\u003e{@code\n * TypeLiteral\u003cMap\u003cInteger, String\u003e\u003e mapType\n *     = new TypeLiteral\u003cMap\u003cInteger, String\u003e\u003e() {};\n * TypeLiteral\u003c?\u003e keySetType\n *     = mapType.getReturnType(Map.class.getMethod(\"keySet\"));\n * System.out.println(keySetType); // prints \"Set\u003cInteger\u003e\"\n * }\u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.TypeLiteral",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  protected TypeLiteral()",
					"documentation": "/**\n   * Constructs a new type literal. Derives represented class from type parameter.\n   *\n   * \u003cp\u003eClients create an empty anonymous subclass. Doing so embeds the type parameter in the\n   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  TypeLiteral(Type type)",
					"documentation": "/** Unsafe. Constructs a type literal manually. */"
				},
				{
					"signature": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass)",
					"documentation": "/**\n   * Returns the type from super class's type parameter in {@link MoreTypes#canonicalize(Type)\n   * canonical form}.\n   */"
				},
				{
					"signature": "static TypeLiteral\u003c?\u003e fromSuperclassTypeParameter(Class\u003c?\u003e subclass)",
					"documentation": "/** Gets type literal from super class's type parameter. */"
				},
				{
					"signature": "public final Class\u003c? super T\u003e getRawType()",
					"documentation": "/**\n   * Returns the raw (non-generic) type for this type.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "public final Type getType()",
					"documentation": "/** Gets underlying {@code Type} instance. */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  final TypeLiteral\u003cProvider\u003cT\u003e\u003e providerType()",
					"documentation": "/** Gets the type of this type's provider. */"
				},
				{
					"signature": "@Override\n  public final int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final String toString()",
					"documentation": ""
				},
				{
					"signature": "public static TypeLiteral\u003c?\u003e get(Type type)",
					"documentation": "/** Gets type literal for the given {@code Type} instance. */"
				},
				{
					"signature": "public static \u003cT\u003e TypeLiteral\u003cT\u003e get(Class\u003cT\u003e type)",
					"documentation": "/** Gets type literal for the given {@code Class} instance. */"
				},
				{
					"signature": "private List\u003cTypeLiteral\u003c?\u003e\u003e resolveAll(Type[] types)",
					"documentation": "/** Returns an immutable list of the resolved types. */"
				},
				{
					"signature": "TypeLiteral\u003c?\u003e resolve(Type toResolve)",
					"documentation": "/** Resolves known type parameters in {@code toResolve} and returns the result. */"
				},
				{
					"signature": "Type resolveType(Type toResolve)",
					"documentation": ""
				},
				{
					"signature": "public TypeLiteral\u003c?\u003e getSupertype(Class\u003c?\u003e supertype)",
					"documentation": "/**\n   * Returns the generic form of {@code supertype}. For example, if this is {@code\n   * ArrayList\u003cString\u003e}, this returns {@code Iterable\u003cString\u003e} given the input {@code\n   * Iterable.class}.\n   *\n   * @param supertype a superclass of, or interface implemented by, this.\n   * @since 2.0\n   */"
				},
				{
					"signature": "public TypeLiteral\u003c?\u003e getFieldType(Field field)",
					"documentation": "/**\n   * Returns the resolved generic type of {@code field}.\n   *\n   * @param field a field defined by this or any superclass.\n   * @since 2.0\n   */"
				},
				{
					"signature": "public List\u003cTypeLiteral\u003c?\u003e\u003e getParameterTypes(Member methodOrConstructor)",
					"documentation": "/**\n   * Returns the resolved generic parameter types of {@code methodOrConstructor}.\n   *\n   * @param methodOrConstructor a method or constructor defined by this or any supertype.\n   * @since 2.0\n   */"
				},
				{
					"signature": "public List\u003cTypeLiteral\u003c?\u003e\u003e getExceptionTypes(Member methodOrConstructor)",
					"documentation": "/**\n   * Returns the resolved generic exception types thrown by {@code constructor}.\n   *\n   * @param methodOrConstructor a method or constructor defined by this or any supertype.\n   * @since 2.0\n   */"
				},
				{
					"signature": "public TypeLiteral\u003c?\u003e getReturnType(Method method)",
					"documentation": "/**\n   * Returns the resolved generic return type of {@code method}.\n   *\n   * @param method a method defined by this or any supertype.\n   * @since 2.0\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MoreTypesTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.util.TypesTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.OptionalBindingsTest",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.CheckedProvidersTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.util.Types"
			],
			"usedBy": [
				"com.google.inject.internal.BindingBuilder",
				"com.google.inject.internal.Initializer",
				"com.google.inject.internal.Initializer.InjectableReference",
				"com.google.inject.internal.InjectionRequestProcessor",
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.ProviderMethodsModule",
				"com.google.inject.internal.ProvidesMethodScanner",
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealOptionalBinder",
				"com.google.inject.internal.aop.ClassBuilding",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder",
				"com.google.inject.spi.InjectionRequest",
				"com.google.inject.internal.SpiUtils",
				"com.google.inject.assistedinject.FactoryModuleBuilder",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.daggeradapter.DaggerMethodScanner",
				"com.google.inject.servlet.ManagedFilterPipeline",
				"com.google.inject.servlet.ManagedServletPipeline",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule",
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.SecondaryBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * See the EDSL examples at {@link com.google.inject.Binder}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.binder.AnnotatedBindingBuilder",
			"extends": "com.google.inject.binder.LinkedBindingBuilder",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * See the EDSL examples at {@link com.google.inject.Binder}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.binder.AnnotatedConstantBindingBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * See the EDSL examples at {@link com.google.inject.Binder}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.binder.AnnotatedElementBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Binds to a constant value. */",
			"name": "com.google.inject.binder.ConstantBindingBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * See the EDSL examples at {@link com.google.inject.Binder}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.binder.LinkedBindingBuilder",
			"extends": "com.google.inject.binder.ScopedBindingBuilder",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.binder.AnnotatedBindingBuilder"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * See the EDSL examples at {@link com.google.inject.Binder}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.binder.ScopedBindingBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.binder.LinkedBindingBuilder"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Base class used to create a new binding with the Guice EDSL described in {@link Binder}.\n * Constructing an AbstractBindingBuilder will create a new binding and add it into the {@link\n * Binder}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.AbstractBindingBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "public AbstractBindingBuilder(Binder binder, List\u003cElement\u003e elements, Object source, Key\u003cT\u003e key)",
					"documentation": "/** The new binding being added to the {@link #binder}'s {@link #elements} list */"
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e getBinding()",
					"documentation": ""
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e setBinding(BindingImpl\u003cT\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e annotatedWithInternal(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Sets the binding to a copy with the specified annotation on the bound key */"
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e annotatedWithInternal(Annotation annotation)",
					"documentation": "/** Sets the binding to a copy with the specified annotation on the bound key */"
				},
				{
					"signature": "public void in(final Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				},
				{
					"signature": "public void in(final Scope scope)",
					"documentation": ""
				},
				{
					"signature": "public void asEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "protected boolean keyTypeIsSet()",
					"documentation": ""
				},
				{
					"signature": "protected void checkNotTargetted()",
					"documentation": ""
				},
				{
					"signature": "protected void checkNotAnnotated()",
					"documentation": ""
				},
				{
					"signature": "protected void checkNotScoped()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.BindingBuilder",
				"com.google.inject.internal.ConstantBindingBuilderImpl"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Guarantees that processing of Binding elements happens in a sane way.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.AbstractBindingProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "AbstractBindingProcessor(Errors errors, ProcessedBindingData processedBindingData)",
					"documentation": "/**\n * Guarantees that processing of Binding elements happens in a sane way.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "protected \u003cT\u003e UntargettedBindingImpl\u003cT\u003e invalidBinding(\n      InjectorImpl injector, Key\u003cT\u003e key, Object source)",
					"documentation": ""
				},
				{
					"signature": "protected void putBinding(BindingImpl\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private static boolean isOkayDuplicate(\n      BindingImpl\u003c?\u003e original, BindingImpl\u003c?\u003e binding, InjectorBindingData bindingData)",
					"documentation": "/**\n   * We tolerate duplicate bindings if one exposes the other or if the two bindings are considered\n   * duplicates (see {@link Bindings#areDuplicates(BindingImpl, BindingImpl)}.\n   *\n   * @param original the binding in the parent injector (candidate for an exposing binding)\n   * @param binding the binding to check (candidate for the exposed binding)\n   */"
				},
				{
					"signature": "private \u003cT\u003e void validateKey(Object source, Key\u003cT\u003e key)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.BindingProcessor",
				"com.google.inject.internal.UntargettedBindingProcessor"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Processor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.Processor"
			]
		},
		{
			"documentation": "/**\n   * Processor for visiting bindings. Each overriden method that wants to actually process the\n   * binding should call prepareBinding first.\n   */",
			"name": "com.google.inject.internal.Processor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "Processor(BindingImpl\u003cT\u003e binding)",
					"documentation": "/**\n   * Processor for visiting bindings. Each overriden method that wants to actually process the\n   * binding should call prepareBinding first.\n   */"
				},
				{
					"signature": "protected void prepareBinding()",
					"documentation": ""
				},
				{
					"signature": "protected void scheduleInitialization(BindingImpl\u003c?\u003e binding)",
					"documentation": "/**\n     * Schedule initialization of this binding to occur immediately after all bindings have been\n     * initialially processed.\n     */"
				},
				{
					"signature": "protected void scheduleDelayedInitialization(BindingImpl\u003c?\u003e binding)",
					"documentation": "/**\n     * Schedule initialization for this binding to occur after all other static initialization of\n     * bindings.\n     */"
				},
				{
					"signature": "private void initializeBinding(BindingImpl\u003c?\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.AbstractBindingProcessor"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Abstract base class for creating an injector from module elements.\n *\n * \u003cp\u003eExtending classes must return {@code true} from any overridden {@code visit*()} methods, in\n * order for the element processor to remove the handled element.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.AbstractProcessor",
			"extends": "com.google.inject.spi.DefaultElementVisitor",
			"Methods": [
				{
					"signature": "protected AbstractProcessor(Errors errors)",
					"documentation": "/**\n * Abstract base class for creating an injector from module elements.\n *\n * \u003cp\u003eExtending classes must return {@code true} from any overridden {@code visit*()} methods, in\n * order for the element processor to remove the handled element.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public void process(Iterable\u003cInjectorShell\u003e isolatedInjectorBuilders)",
					"documentation": ""
				},
				{
					"signature": "public void process(InjectorImpl injector, List\u003cElement\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected Boolean visitOther(Element element)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.AbstractBindingProcessor",
				"com.google.inject.internal.InjectionRequestProcessor",
				"com.google.inject.internal.InjectorOptionsProcessor",
				"com.google.inject.internal.InterceptorBindingProcessor",
				"com.google.inject.internal.ListenerBindingProcessor",
				"com.google.inject.internal.LookupProcessor",
				"com.google.inject.internal.MessageProcessor",
				"com.google.inject.internal.ModuleAnnotatedMethodScannerProcessor",
				"com.google.inject.internal.PrivateElementProcessor",
				"com.google.inject.internal.ScopeBindingProcessor",
				"com.google.inject.internal.TypeConverterBindingProcessor"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotation utilities.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.Annotations",
			"extends": "",
			"Methods": [
				{
					"signature": "public static boolean isMarker(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Returns {@code true} if the given annotation type has no attributes. */"
				},
				{
					"signature": "public static boolean isAllDefaultMethods(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  public static \u003cT extends Annotation\u003e T generateAnnotation(Class\u003cT\u003e annotationType)",
					"documentation": "/**\n   * Generates an Annotation for the annotation class. Requires that the annotation is all\n   * optionals.\n   */"
				},
				{
					"signature": "private static \u003cT extends Annotation\u003e T generateAnnotationImpl(final Class\u003cT\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "private static ImmutableMap\u003cString, Object\u003e resolveMembers(\n      Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "private static boolean annotationEquals(\n      Class\u003c? extends Annotation\u003e type, Map\u003cString, Object\u003e members, Object other)\n      throws Exception",
					"documentation": "/** Implements {@link Annotation#equals}. */"
				},
				{
					"signature": "private static int annotationHashCode(\n      Class\u003c? extends Annotation\u003e type, Map\u003cString, Object\u003e members) throws Exception",
					"documentation": "/** Implements {@link Annotation#hashCode}. */"
				},
				{
					"signature": "private static String annotationToString(\n      Class\u003c? extends Annotation\u003e type, Map\u003cString, Object\u003e members) throws Exception",
					"documentation": "/** Implements {@link Annotation#toString}. */"
				},
				{
					"signature": "public static boolean isRetainedAtRuntime(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Returns true if the given annotation is retained at runtime. */"
				},
				{
					"signature": "public static Class\u003c? extends Annotation\u003e findScopeAnnotation(\n      Errors errors, Class\u003c?\u003e implementation)",
					"documentation": "/** Returns the scope annotation on {@code type}, or null if none is specified. */"
				},
				{
					"signature": "public static Class\u003c? extends Annotation\u003e findScopeAnnotation(\n      Errors errors, Annotation[] annotations)",
					"documentation": "/** Returns the scoping annotation, or null if there isn't one. */"
				},
				{
					"signature": "static boolean containsComponentAnnotation(Annotation[] annotations)",
					"documentation": ""
				},
				{
					"signature": "public static String memberValueString(String value)",
					"documentation": "/**\n   * Returns {@code value}, quoted if annotation implementations quote their member values. In Java\n   * 9, annotations quote their string members.\n   */"
				},
				{
					"signature": "public static String memberValueString(String memberName, Object value)",
					"documentation": "/**\n   * Returns string representation of the annotation memeber.\n   *\n   * \u003cp\u003eThe value of the member is prefixed with `memberName=` unless the runtime omits the member\n   * name. The value of the member is quoted if annotation implementations quote their member values\n   * and the value type is String.\n   *\n   * \u003cp\u003eIn Java 9, annotations quote their string members and in Java 15, the member name is\n   * omitted.\n   */"
				},
				{
					"signature": "@TestAnnotation(\"determineAnnotationToStringConfig\")\n  private static AnnotationToStringConfig determineAnnotationToStringConfig()",
					"documentation": ""
				},
				{
					"signature": "public static boolean isScopeAnnotation(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "public static void checkForMisplacedScopeAnnotations(\n      Class\u003c?\u003e type, Object source, Errors errors)",
					"documentation": "/**\n   * Adds an error if there is a misplaced annotations on {@code type}. Scoping annotations are not\n   * allowed on abstract classes or interfaces.\n   */"
				},
				{
					"signature": "public static Key\u003c?\u003e getKey(\n      TypeLiteral\u003c?\u003e type, Member member, Annotation[] annotations, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Gets a key for the given type, member and annotations. */"
				},
				{
					"signature": "public static Annotation findBindingAnnotation(\n      Errors errors, Member member, Annotation[] annotations)",
					"documentation": "/** Returns the binding annotation on {@code member}, or null if there isn't one. */"
				},
				{
					"signature": "public static boolean isBindingAnnotation(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Returns true if annotations of the specified type are binding annotations. */"
				},
				{
					"signature": "public static Annotation canonicalizeIfNamed(Annotation annotation)",
					"documentation": "/**\n   * If the annotation is an instance of {@code javax.inject.Named}, canonicalizes to\n   * com.google.guice.name.Named. Returns the given annotation otherwise.\n   */"
				},
				{
					"signature": "public static Class\u003c? extends Annotation\u003e canonicalizeIfNamed(\n      Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * If the annotation is the class {@code javax.inject.Named}, canonicalizes to\n   * com.google.guice.name.Named. Returns the given annotation class otherwise.\n   */"
				},
				{
					"signature": "public static String nameOf(Key\u003c?\u003e key)",
					"documentation": "/**\n   * Returns the name the binding should use. This is based on the annotation. If the annotation has\n   * an instance and is not a marker annotation, we ask the annotation for its toString. If it was a\n   * marker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\n   * is the empty string.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BindingTest",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.ImplicitBindingTest",
				"com.google.inject.MembersInjectorTest",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamedEquivalanceTest.JsrNamed",
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamed",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.servlet.ServletTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.Annotations.AnnotationToStringConfig",
				"com.google.inject.internal.TestAnnotation",
				"com.google.inject.internal.Annotations.AnnotationChecker",
				"com.google.inject.name.Names"
			],
			"usedBy": [
				"com.google.inject.Key",
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.name.NamedImpl",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.throwingproviders.CheckedProvideUtils",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.Annotations.AnnotationToStringConfig",
				"com.google.inject.internal.TestAnnotation",
				"com.google.inject.internal.Annotations.AnnotationChecker"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Annotations.AnnotationToStringConfig",
			"extends": "",
			"Methods": [
				{
					"signature": "AnnotationToStringConfig(boolean quote, boolean includeMemberName)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Annotations"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.TestAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Annotations"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Checks for the presence of annotations. Caches results because Android doesn't. */",
			"name": "com.google.inject.internal.Annotations.AnnotationChecker",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n          public Boolean load(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Returns true if the given class has one of the desired annotations. */"
				},
				{
					"signature": "AnnotationChecker(Collection\u003cClass\u003c? extends Annotation\u003e\u003e annotationTypes)",
					"documentation": "/** Constructs a new checker that looks for annotations of the given types. */"
				},
				{
					"signature": "boolean hasAnnotations(Class\u003c? extends Annotation\u003e annotated)",
					"documentation": "/** Returns true if the given type has one of the desired annotations. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Annotations"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Error reported by Guice when a key is bound at multiple places the injector. */",
			"name": "com.google.inject.internal.BindingAlreadySetError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "BindingAlreadySetError(Binding\u003c?\u003e binding, Binding\u003c?\u003e original, List\u003cObject\u003e sources)",
					"documentation": "/** Error reported by Guice when a key is bound at multiple places the injector. */"
				},
				{
					"signature": "@Override\n  public boolean isMergeable(ErrorDetail\u003c?\u003e otherError)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingAlreadySetError withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Bind a non-constant key.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.BindingBuilder",
			"extends": "com.google.inject.internal.AbstractBindingBuilder",
			"Methods": [
				{
					"signature": "public BindingBuilder(Binder binder, List\u003cElement\u003e elements, Object source, Key\u003cT\u003e key)",
					"documentation": "/**\n * Bind a non-constant key.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e annotatedWith(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e annotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e to(Class\u003c? extends T\u003e implementation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e to(TypeLiteral\u003c? extends T\u003e implementation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e to(Key\u003c? extends T\u003e linkedKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void toInstance(T instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e toProvider(Provider\u003c? extends T\u003e provider)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e toProvider(javax.inject.Provider\u003c? extends T\u003e provider)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e toProvider(\n      Class\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e toProvider(\n      TypeLiteral\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingBuilder\u003cT\u003e toProvider(\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cS extends T\u003e ScopedBindingBuilder toConstructor(Constructor\u003cS\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cS extends T\u003e ScopedBindingBuilder toConstructor(\n      Constructor\u003cS\u003e constructor, TypeLiteral\u003c? extends S\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "private void copyErrorsToBinder(ConfigurationException e)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.binder.AnnotatedBindingBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.spi.InjectionPoint"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.internal.BindingImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "BindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "BindingImpl(Object source, Key\u003cT\u003e key, Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Key\u003cT\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Provider\u003cT\u003e getProvider()",
					"documentation": ""
				},
				{
					"signature": "public InternalFactory\u003c? extends T\u003e getInternalFactory()",
					"documentation": ""
				},
				{
					"signature": "public Scoping getScoping()",
					"documentation": ""
				},
				{
					"signature": "public boolean isConstant()",
					"documentation": "/**\n   * Is this a constant binding? This returns true for constant bindings as well as toInstance()\n   * bindings.\n   */"
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptVisitor(ElementVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptScopingVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "protected BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "public InjectorImpl getInjector()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Binding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.internal.ExposedBindingImpl",
				"com.google.inject.internal.InjectorImpl.SyntheticProviderBindingImpl",
				"com.google.inject.internal.InjectorImpl.ConvertedConstantBindingImpl",
				"com.google.inject.internal.InstanceBindingImpl",
				"com.google.inject.internal.LinkedBindingImpl",
				"com.google.inject.internal.LinkedProviderBindingImpl",
				"com.google.inject.internal.ProviderInstanceBindingImpl",
				"com.google.inject.internal.UntargettedBindingImpl"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@link Binder#bind} and {@link Binder#bindConstant} elements.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.BindingProcessor",
			"extends": "com.google.inject.internal.AbstractBindingProcessor",
			"Methods": [
				{
					"signature": "BindingProcessor(\n      Errors errors, Initializer initializer, ProcessedBindingData processedBindingData)",
					"documentation": "/**\n * Handles {@link Binder#bind} and {@link Binder#bindConstant} elements.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Boolean visit(Binding\u003cT\u003e command)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e void bindExposed(PrivateElements privateElements, Key\u003cT\u003e key)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Delegates to a custom factory which is also bound in the injector. */",
			"name": "com.google.inject.internal.BoundProviderFactory",
			"extends": "com.google.inject.internal.ProviderInternalFactory",
			"Methods": [
				{
					"signature": "BoundProviderFactory(\n      InjectorImpl injector,\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey,\n      Object source,\n      ProvisionListenerStackCallback\u003cT\u003e provisionCallback)",
					"documentation": "/** Delegates to a custom factory which is also bound in the injector. */"
				},
				{
					"signature": "@Override\n  public void notify(Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected T provision(\n      Provider\u003c? extends T\u003e provider,\n      Dependency\u003c?\u003e dependency,\n      ConstructionContext\u003cT\u003e constructionContext)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.CreationListener"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility methods for circular proxies, faster reflection, and method interception.\n *\n * \u003cp\u003eThis class makes heavy use of {@link Function} and {@link BiFunction} types when interacting\n * with generated fast-classes and enhanced proxies. This is a deliberate design decision to avoid\n * using Guice-specific types in the generated classes. This means generated classes can be defined\n * in the same {@link ClassLoader} as their host class without needing access to Guice's own {@link\n * ClassLoader}. (In other words it removes any need for bridge {@link ClassLoader}s.)\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.BytecodeGen",
			"extends": "",
			"Methods": [
				{
					"signature": "public static boolean isCircularProxy(Object object)",
					"documentation": "/** Returns true if the given object is a circular proxy. */"
				},
				{
					"signature": "static \u003cT\u003e T newCircularProxy(Class\u003cT\u003e type, InvocationHandler handler)",
					"documentation": "/** Creates a new circular proxy for the given type. */"
				},
				{
					"signature": "static EnhancerBuilder enhancerBuilder(Class\u003c?\u003e hostClass)",
					"documentation": "/** Create a builder of enhancers for the given class. */"
				},
				{
					"signature": "static BiFunction\u003cObject, Object[], Object\u003e enhancedConstructor(\n      Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e enhancer, Constructor\u003c?\u003e constructor)",
					"documentation": "/**\n   * Returns an invoker that constructs an enhanced instance. The invoker function accepts an array\n   * of invocation handlers plus an array of arguments for the original constructor.\n   */"
				},
				{
					"signature": "static BiFunction\u003cObject, Object[], Object\u003e superMethod(\n      Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e enhancer, Method method)",
					"documentation": "/**\n   * Returns an invoker that calls the original unenhanced method. The invoker function accepts an\n   * enhanced instance plus an array of arguments for the original method.\n   */"
				},
				{
					"signature": "static BiFunction\u003cObject, Object[], Object\u003e fastConstructor(Constructor\u003c?\u003e constructor)",
					"documentation": "/**\n   * Returns a fast invoker for the given constructor. The invoker function ignores the first\n   * parameter and accepts an array of arguments for the constructor in the second parameter.\n   *\n   * \u003cp\u003eReturns {@code null} if the constructor cannot be \"fast-invoked\" due to visibility issues.\n   */"
				},
				{
					"signature": "static BiFunction\u003cObject, Object[], Object\u003e fastMethod(Method method)",
					"documentation": "/**\n   * Returns a fast invoker for the given method. The invoker function accepts an instance, which\n   * will be {@code null} for static methods, and an array of arguments for the method.\n   *\n   * \u003cp\u003eReturns {@code null} if the method cannot be \"fast-invoked\" due to visibility issues.\n   */"
				},
				{
					"signature": "private static Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e fastClass(Executable member)",
					"documentation": "/**\n   * Prepares the class declaring the given member for fast invocation using bytecode generation.\n   */"
				},
				{
					"signature": "@Override\n        protected Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e computeValue(Class\u003c?\u003e hostClass)",
					"documentation": "/** Lazy association between classes and their generated fast-classes. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.ClassBuilding"
			],
			"usedBy": [
				"com.google.inject.Scopes"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.EnhancerBuilder"
			]
		},
		{
			"documentation": "/** Builder of enhanced classes. */",
			"name": "com.google.inject.internal.EnhancerBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Error reported by Guice when a key is already bound in one or more child injectors or private\n * modules.\n */",
			"name": "com.google.inject.internal.ChildBindingAlreadySetError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "ChildBindingAlreadySetError(Key\u003c?\u003e key, Iterable\u003cObject\u003e existingSoruces, List\u003cObject\u003e sources)",
					"documentation": "/**\n * Error reported by Guice when a key is already bound in one or more child injectors or private\n * modules.\n */"
				},
				{
					"signature": "@Override\n  public boolean isMergeable(ErrorDetail\u003c?\u003e otherError)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public ChildBindingAlreadySetError withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				},
				{
					"signature": "private List\u003cObject\u003e trimSource(List\u003cObject\u003e sources)",
					"documentation": "/** Omit the key itself in the source list since the information is redundant. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Bind a constant.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ConstantBindingBuilderImpl",
			"extends": "com.google.inject.internal.AbstractBindingBuilder",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  public ConstantBindingBuilderImpl(Binder binder, List\u003cElement\u003e elements, Object source)",
					"documentation": "/**\n * Bind a constant.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public ConstantBindingBuilder annotatedWith(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public ConstantBindingBuilder annotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final String value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final long value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final boolean value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final double value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final float value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final short value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final char value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final byte value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void to(final Class\u003c?\u003e value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cE extends Enum\u003cE\u003e\u003e void to(final E value)",
					"documentation": ""
				},
				{
					"signature": "private void toConstant(Class\u003c?\u003e type, Object instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.binder.AnnotatedConstantBindingBuilder",
				"com.google.inject.binder.ConstantBindingBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.internal.ConstantFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "public ConstantFactory(Initializable\u003cT\u003e initializable)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Context of a dependency construction. Used to manage circular references.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.ConstructionContext",
			"extends": "",
			"Methods": [
				{
					"signature": "public T getCurrentReference()",
					"documentation": "/**\n * Context of a dependency construction. Used to manage circular references.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public void removeCurrentReference()",
					"documentation": ""
				},
				{
					"signature": "public void setCurrentReference(T currentReference)",
					"documentation": ""
				},
				{
					"signature": "public boolean isConstructing()",
					"documentation": ""
				},
				{
					"signature": "public void startConstruction()",
					"documentation": ""
				},
				{
					"signature": "public void finishConstruction()",
					"documentation": ""
				},
				{
					"signature": "public Object createProxy(InjectorOptions injectorOptions, Class\u003c?\u003e expectedType)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "public void setProxyDelegates(T delegate)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Proxies calls to a {@link java.lang.reflect.Constructor} for a class {@code T}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.ConstructionProxy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.DefaultConstructionProxyFactory.FastClassProxy",
				"com.google.inject.internal.DefaultConstructionProxyFactory.ReflectiveProxy",
				"com.google.inject.internal.ProxyFactory.ProxyConstructor"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates {@link ConstructionProxy} instances.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.ConstructionProxyFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.DefaultConstructionProxyFactory",
				"com.google.inject.internal.ProxyFactory"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ConstructorBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "private ConstructorBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e scopedFactory,\n      Scoping scoping,\n      Factory\u003cT\u003e factory,\n      InjectionPoint constructorInjectionPoint)",
					"documentation": ""
				},
				{
					"signature": "public ConstructorBindingImpl(\n      Key\u003cT\u003e key,\n      Object source,\n      Scoping scoping,\n      InjectionPoint constructorInjectionPoint,\n      Set\u003cInjectionPoint\u003e injectionPoints)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e ConstructorBindingImpl\u003cT\u003e create(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      InjectionPoint constructorInjector,\n      Object source,\n      Scoping scoping,\n      Errors errors,\n      boolean failIfNotLinked,\n      boolean atInjectRequired)\n      throws ErrorsException",
					"documentation": "/**\n   * @param constructorInjector the constructor to use, or {@code null} to use the default.\n   * @param failIfNotLinked true if this ConstructorBindingImpl's InternalFactory should only\n   *     succeed if retrieved from a linked binding\n   */"
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\") \n  public void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "boolean isInitialized()",
					"documentation": "/** True if this binding has been initialized and is ready for use. */"
				},
				{
					"signature": "InjectionPoint getInternalConstructor()",
					"documentation": "/** Returns an injection point that can be used to clean up the constructor store. */"
				},
				{
					"signature": "Set\u003cDependency\u003c?\u003e\u003e getInternalDependencies()",
					"documentation": "/** Returns a set of dependencies that can be iterated over to clean up stray JIT bindings. */"
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public InjectionPoint getConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cInjectionPoint\u003e getInjectableMembers()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Map\u003cMethod, List\u003cMethodInterceptor\u003e\u003e getMethodInterceptors()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\") \n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ConstructorBinding",
				"com.google.inject.internal.DelayedInitialize"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.ConstructorBindingImpl.Factory",
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.InjectionPoint"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.ConstructorBindingImpl.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ConstructorBindingImpl.Factory",
			"extends": "",
			"Methods": [
				{
					"signature": "Factory(boolean failIfNotLinked, Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n        throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.CyclicFactory"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ConstructorBindingImpl"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates instances using an injectable constructor. After construction, all injectable fields and\n * methods are injected.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.ConstructorInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "ConstructorInjector(\n      Set\u003cInjectionPoint\u003e injectableMembers,\n      ConstructionProxy\u003cT\u003e constructionProxy,\n      SingleParameterInjector\u003c?\u003e[] parameterInjectors,\n      MembersInjectorImpl\u003cT\u003e membersInjector)",
					"documentation": "/**\n * Creates instances using an injectable constructor. After construction, all injectable fields and\n * methods are injected.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public ImmutableSet\u003cInjectionPoint\u003e getInjectableMembers()",
					"documentation": ""
				},
				{
					"signature": "ConstructionProxy\u003cT\u003e getConstructionProxy()",
					"documentation": ""
				},
				{
					"signature": "Object construct(\n      final InternalContext context,\n      Dependency\u003c?\u003e dependency,\n      @Nullable ProvisionListenerStackCallback\u003cT\u003e provisionCallback)\n      throws InternalProvisionException",
					"documentation": "/**\n   * Construct an instance. Returns {@code Object} instead of {@code T} because it may return a\n   * proxy.\n   */"
				},
				{
					"signature": "private T provision(InternalContext context, ConstructionContext\u003cT\u003e constructionContext)\n      throws InternalProvisionException",
					"documentation": "/** Provisions a new T. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Constructor injectors by type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ConstructorInjectorStore",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        protected ConstructorInjector\u003c?\u003e create(InjectionPoint constructorInjector, Errors errors)\n            throws ErrorsException",
					"documentation": "/**\n * Constructor injectors by type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "ConstructorInjectorStore(InjectorImpl injector)",
					"documentation": ""
				},
				{
					"signature": "public ConstructorInjector\u003c?\u003e get(InjectionPoint constructorInjector, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Returns a new complete constructor injector with injection listeners registered. */"
				},
				{
					"signature": "boolean remove(InjectionPoint ip)",
					"documentation": "/**\n   * Purges an injection point from the cache. Use this only if the cache is not actually valid and\n   * needs to be purged. (See issue 319 and\n   * ImplicitBindingTest#testCircularJitBindingsLeaveNoResidue and\n   * #testInstancesRequestingProvidersForThemselvesWithChildInjectors for examples of when this is\n   * necessary.)\n   *\n   * \u003cp\u003eReturns true if the injector for that point was stored in the cache, false otherwise.\n   */"
				},
				{
					"signature": "private \u003cT\u003e ConstructorInjector\u003cT\u003e createConstructor(InjectionPoint injectionPoint, Errors errors)\n      throws ErrorsException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Something that is notified upon creation. */",
			"name": "com.google.inject.internal.CreationListener",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.BoundProviderFactory",
				"com.google.inject.internal.ExposedKeyFactory",
				"com.google.inject.internal.FactoryProxy"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Simplified version of {@link Lock} that is special due to how it handles deadlocks detection.\n *\n * \u003cp\u003eIs an inherent part of {@link SingletonScope}, moved into a upper level class due to its size\n * and complexity.\n *\n * @param \u003cID\u003e Lock identification provided by the client, is returned unmodified to the client when\n *     lock cycle is detected to identify it. Only toString() needs to be implemented. Lock\n *     references this object internally, for the purposes of Garbage Collection you should not use\n *     heavy IDs. Lock is referenced by a lock factory as long as it's owned by a thread.\n * @see SingletonScope\n * @see com.google.inject.internal.CycleDetectingLock.CycleDetectingLockFactory\n * @author timofeyb (Timothy Basanov)\n */",
			"name": "com.google.inject.internal.CycleDetectingLock",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.CycleDetectingLockFactory.ReentrantCycleDetectingLock"
			],
			"uses": [
				"com.google.inject.internal.CycleDetectingLockFactory.ReentrantCycleDetectingLock"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.CycleDetectingLockFactory"
			]
		},
		{
			"documentation": "/**\n   * Wraps locks so they would never cause a deadlock. On each {@link\n   * CycleDetectingLock#lockOrDetectPotentialLocksCycle} we check for dependency cycles within locks\n   * created by the same factory. Either we detect a cycle and return it or take it atomically.\n   *\n   * \u003cp\u003eImportant to note that we do not prevent deadlocks in the client code. As an example: Thread\n   * A takes lock L and creates singleton class CA depending on the singleton class CB. Meanwhile\n   * thread B is creating class CB and is waiting on the lock L. Issue happens due to client code\n   * creating interdependent classes and using locks, where no guarantees on the creation order from\n   * Guice are provided.\n   *\n   * \u003cp\u003eInstances of these locks are not intended to be exposed outside of {@link SingletonScope}.\n   */",
			"name": "com.google.inject.internal.CycleDetectingLockFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "CycleDetectingLock\u003cID\u003e create(ID userLockId)",
					"documentation": "/**\n     * Creates new lock within this factory context. We can guarantee that locks created by the same\n     * factory would not deadlock.\n     *\n     * @param userLockId lock id that would be used to report lock cycles if detected\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.CycleDetectingLockFactory.ReentrantCycleDetectingLock"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.CycleDetectingLockFactory.ReentrantCycleDetectingLock"
			]
		},
		{
			"documentation": "/** The implementation for {@link CycleDetectingLock}. */",
			"name": "com.google.inject.internal.CycleDetectingLockFactory.ReentrantCycleDetectingLock",
			"extends": "",
			"Methods": [
				{
					"signature": "ReentrantCycleDetectingLock(\n          CycleDetectingLockFactory\u003cID\u003e lockFactory, ID userLockId, Lock lockImplementation)",
					"documentation": "/**\n       * Number of times that thread owned this lock. Guarded by {@code\n       * CycleDetectingLockFactory.this}.\n       */"
				},
				{
					"signature": "@Override\n      public ListMultimap\u003cThread, ID\u003e lockOrDetectPotentialLocksCycle()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void unlock()",
					"documentation": ""
				},
				{
					"signature": "void checkState() throws IllegalStateException",
					"documentation": "/** Check consistency of an internal state. */"
				},
				{
					"signature": "private ListMultimap\u003cThread, ID\u003e detectPotentialLocksCycle()",
					"documentation": "/**\n       * Algorithm to detect a potential lock cycle.\n       *\n       * \u003cp\u003eFor lock's thread owner check which lock is it trying to take. Repeat recursively. When\n       * current thread is found a potential cycle is detected.\n       *\n       * @see CycleDetectingLock#lockOrDetectPotentialLocksCycle()\n       */"
				},
				{
					"signature": "private ReentrantCycleDetectingLock\u003c?\u003e addAllLockIdsAfter(\n          Thread thread,\n          ReentrantCycleDetectingLock\u003c?\u003e lock,\n          ListMultimap\u003cThread, ID\u003e potentialLocksCycle)",
					"documentation": "/**\n       * Adds all locks held by the given thread that are after the given lock and then returns the\n       * lock the thread is currently waiting on, if any\n       */"
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.CycleDetectingLock"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.CycleDetectingLock",
				"com.google.inject.internal.CycleDetectingLockFactory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility class for retrieving declared fields or methods in a particular order, because the JVM\n * doesn't guarantee ordering for listing declared methods. We don't externally guarantee an\n * ordering, but having a consistent ordering allows deterministic behavior and simpler tests.\n *\n * \u003cp\u003eFor class ordering, within a single classloader there can only be one class with a given name,\n * so we just compare the names.\n *\n * \u003cp\u003eFor method ordering, within a single class it is sufficient to compare the non-generic method\n * signature which consists of the name, return type and parameter types.\n */",
			"name": "com.google.inject.internal.DeclaredMembers",
			"extends": "",
			"Methods": [
				{
					"signature": "private DeclaredMembers()",
					"documentation": "/**\n * Utility class for retrieving declared fields or methods in a particular order, because the JVM\n * doesn't guarantee ordering for listing declared methods. We don't externally guarantee an\n * ordering, but having a consistent ordering allows deterministic behavior and simpler tests.\n *\n * \u003cp\u003eFor class ordering, within a single classloader there can only be one class with a given name,\n * so we just compare the names.\n *\n * \u003cp\u003eFor method ordering, within a single class it is sufficient to compare the non-generic method\n * signature which consists of the name, return type and parameter types.\n */"
				},
				{
					"signature": "public static Field[] getDeclaredFields(Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public static Method[] getDeclaredMethods(Class\u003c?\u003e type)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Produces construction proxies that invoke the class constructor.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.DefaultConstructionProxyFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "DefaultConstructionProxyFactory(InjectionPoint injectionPoint)",
					"documentation": "/** @param injectionPoint an injection point whose member is a constructor of {@code T}. */"
				},
				{
					"signature": "@Override\n  public ConstructionProxy\u003cT\u003e create()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.ConstructionProxyFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.DefaultConstructionProxyFactory.FastClassProxy",
				"com.google.inject.internal.DefaultConstructionProxyFactory.ReflectiveProxy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.DefaultConstructionProxyFactory.FastClassProxy",
				"com.google.inject.internal.DefaultConstructionProxyFactory.ReflectiveProxy"
			]
		},
		{
			"documentation": "/** A {@link ConstructionProxy} that uses bytecode generation to invoke the constructor. */",
			"name": "com.google.inject.internal.DefaultConstructionProxyFactory.FastClassProxy",
			"extends": "",
			"Methods": [
				{
					"signature": "FastClassProxy(\n        InjectionPoint injectionPoint,\n        Constructor\u003cT\u003e constructor,\n        BiFunction\u003cObject, Object[], Object\u003e fastConstructor)",
					"documentation": "/** A {@link ConstructionProxy} that uses bytecode generation to invoke the constructor. */"
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public T newInstance(Object... arguments) throws InvocationTargetException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Constructor\u003cT\u003e getConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableMap\u003cMethod, List\u003cMethodInterceptor\u003e\u003e getMethodInterceptors()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.ConstructionProxy"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.DefaultConstructionProxyFactory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.DefaultConstructionProxyFactory.ReflectiveProxy",
			"extends": "",
			"Methods": [
				{
					"signature": "ReflectiveProxy(InjectionPoint injectionPoint, Constructor\u003cT\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T newInstance(Object... arguments) throws InvocationTargetException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Constructor\u003cT\u003e getConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableMap\u003cMethod, List\u003cMethodInterceptor\u003e\u003e getMethodInterceptors()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.ConstructionProxy"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.DefaultConstructionProxyFactory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Returns providers and members injectors that haven't yet been initialized. As a part of injector\n * creation it's necessary to {@link #initialize initialize} these lookups.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.DeferredLookups",
			"extends": "",
			"Methods": [
				{
					"signature": "DeferredLookups(InjectorImpl injector)",
					"documentation": "/**\n * Returns providers and members injectors that haven't yet been initialized. As a part of injector\n * creation it's necessary to {@link #initialize initialize} these lookups.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "void initialize(Errors errors)",
					"documentation": "/** Initialize the specified lookups, either immediately or when the injector is created. */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e getProvider(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.Lookups"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.MembersInjectorLookup",
				"com.google.inject.spi.ProviderLookup"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Something that needs some delayed initialization, typically a binding or internal factory that\n * needs to be created; put into the bindings map and then initialized later.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.DelayedInitialize",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.internal.InternalProviderInstanceBindingImpl",
				"com.google.inject.internal.LinkedProviderBindingImpl",
				"com.google.inject.internal.ProvidedByInternalFactory"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.DelegatingInvocationHandler",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "void setDelegate(T delegate)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Error reported by Guice when duplicate elements are found in a {@link Multibinder} that does not\n * permit duplicates.\n */",
			"name": "com.google.inject.internal.DuplicateElementError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "DuplicateElementError(\n      Key\u003cSet\u003cT\u003e\u003e setKey, List\u003cBinding\u003cT\u003e\u003e bindings, T[] values, List\u003cObject\u003e sources)",
					"documentation": "/**\n * Error reported by Guice when duplicate elements are found in a {@link Multibinder} that does not\n * permit duplicates.\n */"
				},
				{
					"signature": "private DuplicateElementError(\n      Key\u003cSet\u003cT\u003e\u003e setKey, ImmutableMultimap\u003cT, Element\u003cT\u003e\u003e elements, List\u003cObject\u003e sources)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e others, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "private void formatElement(Element\u003cT\u003e element, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public DuplicateElementError\u003cT\u003e withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e ImmutableMultimap\u003cT, Element\u003cT\u003e\u003e indexElements(List\u003cBinding\u003cT\u003e\u003e bindings, T[] values)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.DuplicateElementError.Element"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.DuplicateElementError.Element"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.DuplicateElementError.Element",
			"extends": "",
			"Methods": [
				{
					"signature": "Element(T value, Binding\u003cT\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.DuplicateElementError"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Error reported by Guice when a duplicate key is found in a {@link MapBinder} that does not permit\n * duplicates.\n */",
			"name": "com.google.inject.internal.DuplicateMapKeyError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "DuplicateMapKeyError(\n      Key\u003cMap\u003cK, V\u003e\u003e mapKey, Multimap\u003cK, Binding\u003cV\u003e\u003e duplicates, List\u003cObject\u003e sources)",
					"documentation": "/**\n * Error reported by Guice when a duplicate key is found in a {@link MapBinder} that does not permit\n * duplicates.\n */"
				},
				{
					"signature": "@Override\n  protected final void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e others, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public DuplicateMapKeyError\u003cK, V\u003e withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK, V\u003e String getDuplicateKeysMessage(\n      Key\u003cMap\u003cK, V\u003e\u003e mapKey, Multimap\u003cK, Binding\u003cV\u003e\u003e duplicates)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An internal binding annotation applied to each element in a multibinding. All elements are\n * assigned a globally-unique id to allow different modules to contribute multibindings\n * independently.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Element",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.RealElementTest",
				"com.google.inject.internal.RealElementTest.Holder"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.Type"
			]
		},
		{
			"documentation": "/**\n * An internal binding annotation applied to each element in a multibinding. All elements are\n * assigned a globally-unique id to allow different modules to contribute multibindings\n * independently.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Type",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.EncounterImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "EncounterImpl(Errors errors, Lookups lookups)",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "void invalidate()",
					"documentation": ""
				},
				{
					"signature": "ImmutableList\u003cMethodAspect\u003e getAspects()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void bindInterceptor(\n      Matcher\u003c? super Method\u003e methodMatcher,\n      org.aopalliance.intercept.MethodInterceptor... interceptors)",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cMembersInjector\u003c? super T\u003e\u003e getMembersInjectors()",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cInjectionListener\u003c? super T\u003e\u003e getInjectionListeners()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void register(MembersInjector\u003c? super T\u003e membersInjector)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void register(InjectionListener\u003c? super T\u003e injectionListener)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void addError(String message, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void addError(Throwable t)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void addError(Message message)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e getProvider(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.TypeEncounter"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Helper for formatting Guice errors. */",
			"name": "com.google.inject.internal.ErrorFormatter",
			"extends": "",
			"Methods": [
				{
					"signature": "private ErrorFormatter()",
					"documentation": "/** Helper for formatting Guice errors. */"
				},
				{
					"signature": "static void formatSources(int index, List\u003cObject\u003e sources, Formatter formatter)",
					"documentation": "/**\n   * Format a list of sources to the given {@code formatter}, prefixed by the give {@code index}.\n   */"
				},
				{
					"signature": "static void formatSources(List\u003cObject\u003e sources, Formatter formatter)",
					"documentation": "/** Format a list of sources to the given {@code formatter}. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles errors in the Injector.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.ErrorHandler",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Enum used to identify a specific Guice error. */",
			"name": "com.google.inject.internal.ErrorId",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A collection of error messages. If this type is passed as a method parameter, the method is\n * considered to have executed successfully only if new errors were not added to this collection.\n *\n * \u003cp\u003eErrors can be chained to provide additional context. To add context, call {@link #withSource}\n * to create a new Errors instance that contains additional context. All messages added to the\n * returned instance will contain full context.\n *\n * \u003cp\u003eTo avoid messages with redundant context, {@link #withSource} should be added sparingly. A\n * good rule of thumb is to assume a method's caller has already specified enough context to\n * identify that method. When calling a method that's defined in a different context, call that\n * method with an errors object that includes its context.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Errors",
			"extends": "",
			"Methods": [
				{
					"signature": "static \u003cT\u003e T checkNotNull(T reference, String name)",
					"documentation": "/**\n   * Throws a ConfigurationException with an NullPointerExceptions as the cause if the given\n   * reference is {@code null}.\n   */"
				},
				{
					"signature": "static void checkConfiguration(boolean condition, String format, Object... args)",
					"documentation": "/**\n   * Throws a ConfigurationException with a formatted {@link Message} if this condition is {@code\n   * false}.\n   */"
				},
				{
					"signature": "public Errors()",
					"documentation": "/** null unless (root == this) and error messages exist. Never an empty list. */"
				},
				{
					"signature": "public Errors(Object source)",
					"documentation": ""
				},
				{
					"signature": "private Errors(Errors parent, Object source)",
					"documentation": ""
				},
				{
					"signature": "public Errors withSource(Object source)",
					"documentation": "/** Returns an instance that uses {@code source} as a reference point for newly added errors. */"
				},
				{
					"signature": "public Errors aopDisabled(InterceptorBinding binding)",
					"documentation": ""
				},
				{
					"signature": "public Errors missingImplementation(Key\u003c?\u003e key)",
					"documentation": "/**\n   * We use a fairly generic error message here. The motivation is to share the same message for\n   * both bind time errors:\n   *\n   * \u003cpre\u003e\u003ccode\u003eGuice.createInjector(new AbstractModule() {\n   *   public void configure() {\n   *     bind(Runnable.class);\n   *   }\n   * }\u003c/code\u003e\u003c/pre\u003e\n   *\n   * ...and at provide-time errors:\n   *\n   * \u003cpre\u003e\u003ccode\u003eGuice.createInjector().getInstance(Runnable.class);\u003c/code\u003e\u003c/pre\u003e\n   *\n   * Otherwise we need to know who's calling when resolving a just-in-time binding, which makes\n   * things unnecessarily complex.\n   */"
				},
				{
					"signature": "\u003cT\u003e Errors missingImplementationWithHint(Key\u003cT\u003e key, Injector injector)",
					"documentation": "/** Within guice's core, allow for better missing binding messages */"
				},
				{
					"signature": "public Errors jitDisabled(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Errors jitDisabledInParent(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Errors atInjectRequired(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public Errors converterReturnedNull(\n      String stringValue,\n      Object source,\n      TypeLiteral\u003c?\u003e type,\n      TypeConverterBinding typeConverterBinding)",
					"documentation": ""
				},
				{
					"signature": "public Errors conversionTypeError(\n      String stringValue,\n      Object source,\n      TypeLiteral\u003c?\u003e type,\n      TypeConverterBinding typeConverterBinding,\n      Object converted)",
					"documentation": ""
				},
				{
					"signature": "public Errors conversionError(\n      String stringValue,\n      Object source,\n      TypeLiteral\u003c?\u003e type,\n      TypeConverterBinding typeConverterBinding,\n      RuntimeException cause)",
					"documentation": ""
				},
				{
					"signature": "public Errors ambiguousTypeConversion(\n      String stringValue,\n      Object source,\n      TypeLiteral\u003c?\u003e type,\n      TypeConverterBinding a,\n      TypeConverterBinding b)",
					"documentation": ""
				},
				{
					"signature": "public Errors bindingToProvider()",
					"documentation": ""
				},
				{
					"signature": "public Errors notASubtype(Class\u003c?\u003e implementationType, Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public Errors recursiveImplementationType()",
					"documentation": ""
				},
				{
					"signature": "public Errors recursiveProviderType()",
					"documentation": ""
				},
				{
					"signature": "public Errors missingRuntimeRetention(Class\u003c? extends Annotation\u003e annotation)",
					"documentation": ""
				},
				{
					"signature": "public Errors missingScopeAnnotation(Class\u003c? extends Annotation\u003e annotation)",
					"documentation": ""
				},
				{
					"signature": "public Errors optionalConstructor(Constructor\u003c?\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotBindToGuiceType(String simpleName)",
					"documentation": ""
				},
				{
					"signature": "public Errors scopeNotFound(Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				},
				{
					"signature": "public Errors scopeAnnotationOnAbstractType(\n      Class\u003c? extends Annotation\u003e scopeAnnotation, Class\u003c?\u003e type, Object source)",
					"documentation": ""
				},
				{
					"signature": "public Errors misplacedBindingAnnotation(Member member, Annotation bindingAnnotation)",
					"documentation": ""
				},
				{
					"signature": "public Errors missingConstructor(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public Errors tooManyConstructors(Class\u003c?\u003e implementation)",
					"documentation": ""
				},
				{
					"signature": "public Errors constructorNotDefinedByType(Constructor\u003c?\u003e constructor, TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public \u003cK, V\u003e Errors duplicateMapKey(Key\u003cMap\u003cK, V\u003e\u003e mapKey, Multimap\u003cK, Binding\u003cV\u003e\u003e duplicates)",
					"documentation": ""
				},
				{
					"signature": "public Errors duplicateScopes(\n      ScopeBinding existing, Class\u003c? extends Annotation\u003e annotationType, Scope scope)",
					"documentation": ""
				},
				{
					"signature": "public Errors voidProviderMethod()",
					"documentation": ""
				},
				{
					"signature": "public Errors missingConstantValues()",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectInnerClass(Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectLocalClass(Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public Errors duplicateBindingAnnotations(\n      Member member, Class\u003c? extends Annotation\u003e a, Class\u003c? extends Annotation\u003e b)",
					"documentation": ""
				},
				{
					"signature": "public Errors staticInjectionOnInterface(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectFinalField(Field field)",
					"documentation": ""
				},
				{
					"signature": "public Errors atTargetIsMissingParameter(\n      Annotation bindingAnnotation, String parameterName, Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectAbstractMethod(Method method)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectMethodWithTypeParameters(Method method)",
					"documentation": ""
				},
				{
					"signature": "public Errors duplicateScopeAnnotations(\n      Class\u003c? extends Annotation\u003e a, Class\u003c? extends Annotation\u003e b)",
					"documentation": ""
				},
				{
					"signature": "public Errors recursiveBinding(Key\u003c?\u003e key, Key\u003c?\u003e linkedKey)",
					"documentation": ""
				},
				{
					"signature": "Errors bindingAlreadySet(Binding\u003c?\u003e binding, Binding\u003c?\u003e original)",
					"documentation": ""
				},
				{
					"signature": "public Errors bindingAlreadySet(Key\u003c?\u003e key, Object source)",
					"documentation": ""
				},
				{
					"signature": "public Errors jitBindingAlreadySet(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Errors childBindingAlreadySet(Key\u003c?\u003e key, Set\u003cObject\u003e sources)",
					"documentation": ""
				},
				{
					"signature": "public Errors errorCheckingDuplicateBinding(Key\u003c?\u003e key, Object source, Throwable t)",
					"documentation": ""
				},
				{
					"signature": "public Errors errorNotifyingTypeListener(\n      TypeListenerBinding listener, TypeLiteral\u003c?\u003e type, Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public Errors exposedButNotBound(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Errors keyNotFullySpecified(TypeLiteral\u003c?\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "public Errors errorEnhancingClass(Class\u003c?\u003e clazz, Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public static Collection\u003cMessage\u003e getMessagesFromThrowable(Throwable throwable)",
					"documentation": ""
				},
				{
					"signature": "public Errors errorInUserCode(Throwable cause, String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectRawProvider()",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectRawMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectTypeLiteralOf(Type unsupportedType)",
					"documentation": ""
				},
				{
					"signature": "public Errors cannotInjectRawTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "public void throwCreationExceptionIfErrorsExist()",
					"documentation": ""
				},
				{
					"signature": "public void throwConfigurationExceptionIfErrorsExist()",
					"documentation": ""
				},
				{
					"signature": "public void throwProvisionExceptionIfErrorsExist()",
					"documentation": ""
				},
				{
					"signature": "public Errors merge(Collection\u003cMessage\u003e messages)",
					"documentation": ""
				},
				{
					"signature": "public Errors merge(Errors moreErrors)",
					"documentation": ""
				},
				{
					"signature": "public Errors merge(InternalProvisionException ipe)",
					"documentation": ""
				},
				{
					"signature": "private List\u003cObject\u003e getSources()",
					"documentation": ""
				},
				{
					"signature": "public void throwIfNewErrors(int expectedSize) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "public ErrorsException toException()",
					"documentation": ""
				},
				{
					"signature": "public boolean hasErrors()",
					"documentation": ""
				},
				{
					"signature": "public Errors addMessage(String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public Errors addMessage(ErrorId errorId, String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "private Errors addMessage(\n      ErrorId errorId, Throwable cause, String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public Errors addMessage(Message message)",
					"documentation": ""
				},
				{
					"signature": "public static String format(String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cMessage\u003e getMessages()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int compare(Message a, Message b)",
					"documentation": ""
				},
				{
					"signature": "public int size()",
					"documentation": ""
				},
				{
					"signature": "public static Object convert(Object o)",
					"documentation": ""
				},
				{
					"signature": "public static Object convert(Object o, ElementSource source)",
					"documentation": ""
				},
				{
					"signature": "public static void formatSource(Formatter formatter, Object source)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.CreationException",
				"com.google.inject.ProvisionException",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.BindingSelection",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealMultibinder.BindingSelection",
				"com.google.inject.internal.RealOptionalBinder",
				"com.google.inject.internal.RealOptionalBinder.BindingSelection",
				"com.google.inject.spi.BindingSourceRestriction",
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.spi.Message",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerBinding",
				"com.google.inject.spi.ProviderLookup",
				"com.google.inject.spi.ScopeBinding",
				"com.google.inject.spi.TypeConverterBinding",
				"com.google.inject.util.Modules",
				"com.google.inject.util.Modules.OverrideModule",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.daggeradapter.DaggerAdapter",
				"com.google.inject.daggeradapter.DaggerAdapter.DaggerCompatibilityModule",
				"com.google.inject.servlet.GuiceFilter",
				"com.google.inject.throwingproviders.CheckedProvideUtils",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Indicates that a result could not be returned while preparing or resolving a binding. The caller\n * should {@link Errors#merge(Errors) merge} the errors from this exception with their existing\n * errors.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ErrorsException",
			"extends": "Exception",
			"Methods": [
				{
					"signature": "public ErrorsException(Errors errors)",
					"documentation": "/**\n * Indicates that a result could not be returned while preparing or resolving a binding. The caller\n * should {@link Errors#merge(Errors) merge} the errors from this exception with their existing\n * errors.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public Errors getErrors()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ExposedBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "ExposedBindingImpl(\n      InjectorImpl injector,\n      Object source,\n      Key\u003cT\u003e key,\n      InternalFactory\u003cT\u003e factory,\n      PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public PrivateElements getPrivateElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ExposedBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This factory exists in a parent injector. When invoked, it retrieves its value from a child\n * injector.\n */",
			"name": "com.google.inject.internal.ExposedKeyFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "ExposedKeyFactory(Key\u003cT\u003e key, PrivateElements privateElements)",
					"documentation": "/**\n * This factory exists in a parent injector. When invoked, it retrieves its value from a child\n * injector.\n */"
				},
				{
					"signature": "@Override\n  public void notify(Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory",
				"com.google.inject.internal.CreationListener"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** For private binder's expose() method. */",
			"name": "com.google.inject.internal.ExposureBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "public ExposureBuilder(Binder binder, Object source, Key\u003cT\u003e key)",
					"documentation": "/** For private binder's expose() method. */"
				},
				{
					"signature": "protected void checkNotAnnotated()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void annotatedWith(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void annotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "public Key\u003c?\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.binder.AnnotatedElementBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A placeholder which enables us to swap in the real factory once the injector is created. Used for\n * a linked binding, so that getting the linked binding returns the link's factory.\n */",
			"name": "com.google.inject.internal.FactoryProxy",
			"extends": "",
			"Methods": [
				{
					"signature": "FactoryProxy(InjectorImpl injector, Key\u003cT\u003e key, Key\u003c? extends T\u003e targetKey, Object source)",
					"documentation": "/**\n * A placeholder which enables us to swap in the real factory once the injector is created. Used for\n * a linked binding, so that getting the linked binding returns the link's factory.\n */"
				},
				{
					"signature": "@Override\n  public void notify(final Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory",
				"com.google.inject.internal.CreationListener"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Lazily creates (and caches) values for keys. If creating the value fails (with errors), an\n * exception is thrown on retrieval.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.FailableCache",
			"extends": "",
			"Methods": [
				{
					"signature": "public V get(K key, Errors errors) throws ErrorsException",
					"documentation": "/**\n * Lazily creates (and caches) values for keys. If creating the value fails (with errors), an\n * exception is thrown on retrieval.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "boolean remove(K key)",
					"documentation": ""
				},
				{
					"signature": "Map\u003cK, V\u003e asMap()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Generic error message representing a Guice internal error. */",
			"name": "com.google.inject.internal.GenericErrorDetail",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "public GenericErrorDetail(\n      ErrorId errorId, String message, List\u003cObject\u003e sources, Throwable cause)",
					"documentation": "/** Generic error message representing a Guice internal error. */"
				},
				{
					"signature": "@Override\n  public void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public GenericErrorDetail withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Message"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Class used for restricting APIs in other packages to only be used by this package.\n *\n * \u003cp\u003eOther packages can reference this class but only this package can reference an instance of it,\n * so adding this class as a method param ensures that only this package can call it (provided null\n * is disallowed).\n */",
			"name": "com.google.inject.internal.GuiceInternal",
			"extends": "",
			"Methods": [
				{
					"signature": "private GuiceInternal()",
					"documentation": "/**\n * Class used for restricting APIs in other packages to only be used by this package.\n *\n * \u003cp\u003eOther packages can reference this class but only this package can reference an instance of it,\n * so adding this class as a method param ensures that only this package can call it (provided null\n * is disallowed).\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Visits bindings to return a {@code IndexedBinding} that can be used to emulate the binding\n * deduplication that Guice internally performs.\n *\n * \u003cp\u003eNote: simply using equals/hashCode on the BindingImpls doesn't work because they all have\n * unique annotations. This works around that by reimplementing equality semantics that ignores\n * {@link Element#uniqueId()}. A better solution might be to introduce the idea of an 'anonymous'\n * binding to guice, that might support this usecase directly.\n */",
			"name": "com.google.inject.internal.Indexer",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "Indexer(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "boolean isIndexable(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private Object scope(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ConstructorBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ConvertedConstantBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ExposedBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(InstanceBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(LinkedKeyBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ProviderBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ProviderInstanceBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(ProviderKeyBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Indexer.IndexedBinding visit(UntargettedBinding\u003c? extends Object\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visitEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visitNoScoping()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visitScope(Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visitScopeAnnotation(Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.BindingScopingVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Indexer.IndexedBinding"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.BindingType",
				"com.google.inject.internal.Indexer.IndexedBinding"
			]
		},
		{
			"documentation": "/**\n * Visits bindings to return a {@code IndexedBinding} that can be used to emulate the binding\n * deduplication that Guice internally performs.\n *\n * \u003cp\u003eNote: simply using equals/hashCode on the BindingImpls doesn't work because they all have\n * unique annotations. This works around that by reimplementing equality semantics that ignores\n * {@link Element#uniqueId()}. A better solution might be to introduce the idea of an 'anonymous'\n * binding to guice, that might support this usecase directly.\n */",
			"name": "com.google.inject.internal.BindingType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Indexer.IndexedBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "IndexedBinding(Binding\u003c?\u003e binding, BindingType type, Object scope, Object extraEquality)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Indexer"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Holds a reference that requires initialization to be performed before it can be used.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Initializable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.Initializer.InjectableReference"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.Initializables",
			"extends": "",
			"Methods": [
				{
					"signature": "static \u003cT\u003e Initializable\u003cT\u003e of(final T instance)",
					"documentation": "/** Returns an initializable for an instance that requires no initialization. */"
				},
				{
					"signature": "@Override\n      public T get()",
					"documentation": "/** Returns an initializable for an instance that requires no initialization. */"
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Manages and injects instances at injector-creation time. This is made more complicated by\n * instances that request other instances while they're being injected. We overcome this by using\n * {@link Initializable}, which attempts to perform injection before use.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Initializer",
			"extends": "",
			"Methods": [
				{
					"signature": "\u003cT\u003e Initializable\u003cT\u003e requestInjection(\n      InjectorImpl injector,\n      T instance,\n      Binding\u003cT\u003e binding,\n      Object source,\n      Set\u003cInjectionPoint\u003e injectionPoints)",
					"documentation": "/**\n   * Registers an instance for member injection when that step is performed.\n   *\n   * @param instance an instance that optionally has members to be injected (each annotated\n   *     with @Inject).\n   * @param binding the binding that caused this initializable to be created, if it exists.\n   * @param source the source location that this injection was requested\n   */"
				},
				{
					"signature": "void validateOustandingInjections(Errors errors)",
					"documentation": "/**\n   * Prepares member injectors for all injected instances. This prompts Guice to do static analysis\n   * on the injected instances.\n   */"
				},
				{
					"signature": "void injectAll(final Errors errors)",
					"documentation": "/**\n   * Performs creation-time injections on all objects that require it. Whenever fulfilling an\n   * injection depends on another object that requires injection, we inject it first. If the two\n   * instances are codependent (directly or transitively), ordering of injection is arbitrary.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Initializer.InjectableReference"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InjectableReferenceState",
				"com.google.inject.internal.Initializer.InjectableReference"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectableReferenceState",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Initializer.InjectableReference",
			"extends": "",
			"Methods": [
				{
					"signature": "public InjectableReference(\n        InjectorImpl injector,\n        T instance,\n        Key\u003cT\u003e key,\n        ProvisionListenerStackCallback\u003cT\u003e provisionCallback,\n        Object source,\n        CycleDetectingLock\u003c?\u003e lock)",
					"documentation": ""
				},
				{
					"signature": "public void validate(Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get() throws InternalProvisionException",
					"documentation": "/**\n     * Reentrant. If {@code instance} was registered for injection at injector-creation time, this\n     * method will ensure that all its members have been injected before returning.\n     */"
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.Initializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral"
			],
			"usedBy": [
				"com.google.inject.internal.Initializer"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.requestInjection} and {@code Binder.requestStaticInjection} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author mikeward@google.com (Mike Ward)\n */",
			"name": "com.google.inject.internal.InjectionRequestProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "InjectionRequestProcessor(Errors errors, Initializer initializer)",
					"documentation": "/**\n * Handles {@code Binder.requestInjection} and {@code Binder.requestStaticInjection} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author mikeward@google.com (Mike Ward)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(StaticInjectionRequest request)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(InjectionRequest\u003c?\u003e request)",
					"documentation": ""
				},
				{
					"signature": "void validate()",
					"documentation": ""
				},
				{
					"signature": "void injectMembers()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.StaticInjection",
				"com.google.inject.spi.InjectionRequest"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.StaticInjection"
			]
		},
		{
			"documentation": "/** A requested static injection. */",
			"name": "com.google.inject.internal.StaticInjection",
			"extends": "",
			"Methods": [
				{
					"signature": "public StaticInjection(InjectorImpl injector, StaticInjectionRequest request)",
					"documentation": "/** A requested static injection. */"
				},
				{
					"signature": "void validate()",
					"documentation": ""
				},
				{
					"signature": "void injectMembers()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectionRequestProcessor"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A container that stores an injector's binding data. This excludes JIT binding data, which is\n * stored in {@link InjectorJitBindingData}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.InjectorBindingData",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectorBindingData(Optional\u003cInjectorBindingData\u003e parent)",
					"documentation": "/**\n * A container that stores an injector's binding data. This excludes JIT binding data, which is\n * stored in {@link InjectorJitBindingData}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public Optional\u003cInjectorBindingData\u003e parent()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  public \u003cT\u003e BindingImpl\u003cT\u003e getExplicitBinding(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getExplicitBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void putBinding(Key\u003c?\u003e key, BindingImpl\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "public void putProviderLookup(ProviderLookup\u003c?\u003e lookup)",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cProviderLookup\u003c?\u003e\u003e getProviderLookupsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void putStaticInjectionRequest(StaticInjectionRequest staticInjectionRequest)",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cStaticInjectionRequest\u003e getStaticInjectionRequestsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void putInjectionRequest(InjectionRequest\u003c?\u003e injectionRequest)",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cInjectionRequest\u003c?\u003e\u003e getInjectionRequestsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void putMembersInjectorLookup(MembersInjectorLookup\u003c?\u003e membersInjectorLookup)",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cMembersInjectorLookup\u003c?\u003e\u003e getMembersInjectorLookupsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public ScopeBinding getScopeBinding(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "public void putScopeBinding(Class\u003c? extends Annotation\u003e annotationType, ScopeBinding scope)",
					"documentation": ""
				},
				{
					"signature": "public Collection\u003cScopeBinding\u003e getScopeBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public Iterable\u003cTypeConverterBinding\u003e getConvertersThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void addConverter(TypeConverterBinding typeConverterBinding)",
					"documentation": ""
				},
				{
					"signature": "public TypeConverterBinding getConverter(\n      String stringValue, TypeLiteral\u003c?\u003e type, Errors errors, Object source)",
					"documentation": ""
				},
				{
					"signature": "public void addInterceptorBinding(InterceptorBinding interceptorBinding)",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cInterceptorBinding\u003e getInterceptorBindings()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cInterceptorBinding\u003e getInterceptorBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void addTypeListener(TypeListenerBinding listenerBinding)",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cTypeListenerBinding\u003e getTypeListenerBindings()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cTypeListenerBinding\u003e getTypeListenerBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void addProvisionListener(ProvisionListenerBinding listenerBinding)",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cProvisionListenerBinding\u003e getProvisionListenerBindings()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cProvisionListenerBinding\u003e getProvisionListenerBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public void addScanner(ModuleAnnotatedMethodScannerBinding scanner)",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cModuleAnnotatedMethodScannerBinding\u003e getScannerBindings()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cModuleAnnotatedMethodScannerBinding\u003e getScannerBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "public Map\u003cClass\u003c? extends Annotation\u003e, Scope\u003e getScopes()",
					"documentation": ""
				},
				{
					"signature": "void indexBindingsByType()",
					"documentation": "/**\n   * Once the injector's explicit bindings are finalized, this method is called to index all\n   * explicit bindings by their return type.\n   */"
				},
				{
					"signature": "public ListMultimap\u003cTypeLiteral\u003c?\u003e, Binding\u003c?\u003e\u003e getIndexedExplicitBindings()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.WeakKeySetTest.TestInjectorBindingData"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default {@link Injector} implementation.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.InjectorImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectorImpl(\n      InjectorImpl parent,\n      InjectorBindingData bindingData,\n      InjectorJitBindingData jitBindingData,\n      InjectorOptions injectorOptions)",
					"documentation": "/** The set of types passed to {@link #getMembersInjector} and {@link #injectMembers}. */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e List\u003cBinding\u003cT\u003e\u003e findBindingsByType(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e BindingImpl\u003cT\u003e getBinding(Key\u003cT\u003e key)",
					"documentation": "/** Returns the binding for {@code key} */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e BindingImpl\u003cT\u003e getExistingBinding(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e BindingImpl\u003cT\u003e getBindingOrThrow(Key\u003cT\u003e key, Errors errors, JitLimitation jitType)\n      throws ErrorsException",
					"documentation": "/**\n   * Gets a binding implementation. First, it check to see if the parent has a binding. If the\n   * parent has a binding and the binding is scoped, it will use that binding. Otherwise, this\n   * checks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\n   * binding.\n   */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Binding\u003cT\u003e getBinding(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Injector getParent()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Injector createChildInjector(Iterable\u003c? extends Module\u003e modules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Injector createChildInjector(Module... modules)",
					"documentation": ""
				},
				{
					"signature": "InjectorBindingData getBindingData()",
					"documentation": ""
				},
				{
					"signature": "InjectorJitBindingData getJitBindingData()",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cT\u003e getJustInTimeBinding(Key\u003cT\u003e key, Errors errors, JitLimitation jitType)\n      throws ErrorsException",
					"documentation": "/**\n   * Returns a just-in-time binding for {@code key}, creating it if necessary.\n   *\n   * @throws ErrorsException if the binding could not be created.\n   */"
				},
				{
					"signature": "private static boolean isProvider(Key\u003c?\u003e key)",
					"documentation": "/** Returns true if the key type is Provider (but not a subclass of Provider). */"
				},
				{
					"signature": "private static boolean isTypeLiteral(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Key\u003cT\u003e getProvidedKey(Key\u003cProvider\u003cT\u003e\u003e key, Errors errors)\n      throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "private static boolean isMembersInjector(Key\u003c?\u003e key)",
					"documentation": "/** Returns true if the key type is MembersInjector (but not a subclass of MembersInjector). */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cMembersInjector\u003cT\u003e\u003e createMembersInjectorBinding(\n      Key\u003cMembersInjector\u003cT\u003e\u003e key, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cProvider\u003cT\u003e\u003e createSyntheticProviderBinding(\n      Key\u003cProvider\u003cT\u003e\u003e key, Errors errors) throws ErrorsException",
					"documentation": "/**\n   * Creates a synthetic binding to {@code Provider\u003cT\u003e}, i.e. a framework-created JIT binding to the\n   * provider from {@code Binding\u003cT\u003e}.\n   */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cT\u003e convertConstantStringBinding(Key\u003cT\u003e key, Errors errors)\n      throws ErrorsException",
					"documentation": "/**\n   * Converts a constant string binding to the required type.\n   *\n   * @return the binding if it could be resolved, or null if the binding doesn't exist\n   * @throws com.google.inject.internal.ErrorsException if there was an error resolving the binding\n   */"
				},
				{
					"signature": "\u003cT\u003e void initializeBinding(BindingImpl\u003cT\u003e binding, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e void initializeJitBinding(BindingImpl\u003cT\u003e binding, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "private boolean cleanup(BindingImpl\u003c?\u003e binding, Set\u003cKey\u003c?\u003e\u003e encountered)",
					"documentation": "/**\n   * Iterates through the binding's dependencies to clean up any stray bindings that were leftover\n   * from a failed JIT binding. This is required because the bindings are eagerly and optimistically\n   * added to allow circular dependency support, so dependencies may pass where they should have\n   * failed.\n   */"
				},
				{
					"signature": "private void removeFailedJitBinding(Binding\u003c?\u003e binding, InjectionPoint ip)",
					"documentation": "/** Cleans up any state that may have been cached when constructing the JIT binding. */"
				},
				{
					"signature": "private Set\u003cDependency\u003c?\u003e\u003e getInternalDependencies(BindingImpl\u003c?\u003e binding)",
					"documentation": "/** Safely gets the dependencies of possibly not initialized bindings. */"
				},
				{
					"signature": "\u003cT\u003e BindingImpl\u003cT\u003e createUninitializedBinding(\n      Key\u003cT\u003e key, Scoping scoping, Object source, Errors errors, boolean jitBinding)\n      throws ErrorsException",
					"documentation": "/**\n   * Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\n   * none is specified.\n   */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cTypeLiteral\u003cT\u003e\u003e createTypeLiteralBinding(\n      Key\u003cTypeLiteral\u003cT\u003e\u003e key, Errors errors) throws ErrorsException",
					"documentation": "/**\n   * Converts a binding for a {@code Key\u003cTypeLiteral\u003cT\u003e\u003e} to the value {@code TypeLiteral\u003cT\u003e}. It's\n   * a bit awkward because we have to pull out the inner type in the type literal.\n   */"
				},
				{
					"signature": "\u003cT\u003e BindingImpl\u003cT\u003e createProvidedByBinding(\n      Key\u003cT\u003e key, Scoping scoping, ProvidedBy providedBy, Errors errors) throws ErrorsException",
					"documentation": "/** Creates a binding for a type annotated with @ProvidedBy. */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cT\u003e createImplementedByBinding(\n      Key\u003cT\u003e key, Scoping scoping, ImplementedBy implementedBy, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Creates a binding for a type annotated with @ImplementedBy. */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cT\u003e createJustInTimeBindingRecursive(\n      Key\u003cT\u003e key, Errors errors, boolean jitDisabled, JitLimitation jitType)\n      throws ErrorsException",
					"documentation": "/**\n   * Attempts to create a just-in-time binding for {@code key} in the root injector, falling back to\n   * other ancestor injectors until this injector is tried.\n   */"
				},
				{
					"signature": "private \u003cT\u003e BindingImpl\u003cT\u003e createJustInTimeBinding(\n      Key\u003cT\u003e key, Errors errors, boolean jitDisabled, JitLimitation jitType)\n      throws ErrorsException",
					"documentation": "/**\n   * Returns a new just-in-time binding created by resolving {@code key}. The strategies used to\n   * create just-in-time bindings are:\n   *\n   * \u003col\u003e\n   *   \u003cli\u003eInternalizing Providers. If the requested binding is for {@code Provider\u003cT\u003e}, we delegate\n   *       to the binding for {@code T}.\n   *   \u003cli\u003eConverting constants.\n   *   \u003cli\u003eImplementedBy and ProvidedBy annotations. Only for unannotated keys.\n   *   \u003cli\u003eThe constructor of the raw type. Only for unannotated keys.\n   * \u003c/ol\u003e\n   *\n   * @throws com.google.inject.internal.ErrorsException if the binding cannot be created.\n   */"
				},
				{
					"signature": "\u003cT\u003e InternalFactory\u003c? extends T\u003e getInternalFactory(\n      Key\u003cT\u003e key, Errors errors, JitLimitation jitType) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getAllBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Map\u003cClass\u003c? extends Annotation\u003e, Scope\u003e getScopeBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cTypeConverterBinding\u003e getTypeConverterBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public List\u003cElement\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Map\u003cTypeLiteral\u003c?\u003e, List\u003cInjectionPoint\u003e\u003e getAllMembersInjectorInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "SingleParameterInjector\u003c?\u003e[] getParametersInjectors(List\u003cDependency\u003c?\u003e\u003e parameters, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Returns parameter injectors, or {@code null} if there are no parameters. */"
				},
				{
					"signature": "\u003cT\u003e SingleParameterInjector\u003cT\u003e createParameterInjector(\n      final Dependency\u003cT\u003e dependency, final Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings({\n    \"unchecked\",\n    \"rawtypes\"\n  }) \n  public void injectMembers(Object instance)",
					"documentation": "/** Cached provision listener callbacks for each key. */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e Provider\u003cT\u003e getProviderOrThrow(final Dependency\u003cT\u003e dependency, Errors errors)\n      throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public T get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e getProvider(final Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T getInstance(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T getInstance(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "InternalContext getLocalContext()",
					"documentation": "/** Only to be called by the {@link SingletonScope} provider. */"
				},
				{
					"signature": "InternalContext enterContext()",
					"documentation": "/**\n   * Looks up thread local context and {@link InternalContext#enter() enters} it or creates a new\n   * context if necessary.\n   *\n   * \u003cp\u003eAll callers of this are responsible for calling {@link InternalContext#close()}. Typical\n   * usage should look like:\n   *\n   * \u003cpre\u003e{@code\n   * InternalContext ctx = injector.enterContext();\n   * try {\n   *   ... use ctx ...\n   * } finally {\n   *   ctx.close();\n   * }\n   * }\u003c/pre\u003e\n   */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Injector",
				"com.google.inject.internal.Lookups"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.Key",
				"com.google.inject.Provider",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.InjectorImpl.InjectorOptions",
				"com.google.inject.internal.InjectorImpl.SyntheticProviderBindingImpl",
				"com.google.inject.internal.InjectorImpl.ConvertedConstantBindingImpl",
				"com.google.inject.util.Providers"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InjectorImpl.InjectorOptions",
				"com.google.inject.internal.JitLimitation",
				"com.google.inject.internal.InjectorImpl.SyntheticProviderBindingImpl",
				"com.google.inject.internal.InjectorImpl.ConvertedConstantBindingImpl",
				"com.google.inject.internal.MethodInvoker"
			]
		},
		{
			"documentation": "/** Options that control how the injector behaves. */",
			"name": "com.google.inject.internal.InjectorImpl.InjectorOptions",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectorOptions(\n        Stage stage,\n        boolean jitDisabled,\n        boolean disableCircularProxies,\n        boolean atInjectRequired,\n        boolean exactBindingAnnotationsRequired)",
					"documentation": "/** Options that control how the injector behaves. */"
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.InjectorOptionsProcessor"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** some limitations on what just in time bindings are allowed. */",
			"name": "com.google.inject.internal.JitLimitation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A framework-created JIT {@code Provider\u003cT\u003e} binding. */",
			"name": "com.google.inject.internal.InjectorImpl.SyntheticProviderBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "SyntheticProviderBindingImpl(\n        InjectorImpl injector, Key\u003cProvider\u003cT\u003e\u003e key, Binding\u003cT\u003e providedBinding)",
					"documentation": "/** A framework-created JIT {@code Provider\u003cT\u003e} binding. */"
				},
				{
					"signature": "static \u003cT\u003e InternalFactory\u003cProvider\u003cT\u003e\u003e createInternalFactory(Binding\u003cT\u003e providedBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Provider\u003cT\u003e get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003c? extends T\u003e getProvidedKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super Provider\u003cT\u003e, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderBinding",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorImpl"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorImpl.ConvertedConstantBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "ConvertedConstantBindingImpl(\n        InjectorImpl injector,\n        Key\u003cT\u003e key,\n        T value,\n        Binding\u003cString\u003e originalBinding,\n        TypeConverterBinding typeConverterBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Provider\u003cT\u003e getProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T getValue()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeConverterBinding getTypeConverterBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003cString\u003e getSourceKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ConvertedConstantBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.Providers"
			],
			"usedBy": [
				"com.google.inject.internal.InjectorImpl"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Invokes a method. */",
			"name": "com.google.inject.internal.MethodInvoker",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A container for most just-in-time (JIT) binding data corresponding to an Injector. It\n * includes @Inject constructor bindings. It does not include {@link MembersInjectorStore} or {@link\n * ProvisionListenerCallbackStore}, which are still stored in {@link InjectorImpl}.\n */",
			"name": "com.google.inject.internal.InjectorJitBindingData",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectorJitBindingData(Optional\u003cInjectorJitBindingData\u003e parent)",
					"documentation": "/**\n   * This lock is needed for threadsafe InjectorJitBindingData accesses. It corresponds to this\n   * InjectorJitBindingData's highest ancestor.\n   */"
				},
				{
					"signature": "Map\u003cKey\u003c?\u003e, BindingImpl\u003c?\u003e\u003e getJitBindings()",
					"documentation": ""
				},
				{
					"signature": "BindingImpl\u003c?\u003e getJitBinding(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "void putJitBinding(Key\u003c?\u003e key, BindingImpl\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "void removeJitBinding(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "boolean isFailedJitBinding(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "void addFailedJitBinding(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "void banKey(Key\u003c?\u003e key, InjectorBindingData injectorBindingData, Object source)",
					"documentation": "/**\n   * Forbids the corresponding injector and its ancestors from creating a binding to {@code key}.\n   * Child injectors ban their bound keys on their parent injectors to prevent just-in-time bindings\n   * on the parent injector that would conflict, and pass along their InjectorBindingData to control\n   * the banned key's lifetime.\n   */"
				},
				{
					"signature": "void banKeyInParent(Key\u003c?\u003e key, InjectorBindingData injectorBindingData, Object source)",
					"documentation": "/**\n   * Similar to {@link #banKey(Key, InjectorBindingData, Object)} but we only begin banning the\n   * binding at the parent level. This is used to prevent JIT bindings in the parent injector from\n   * overriding explicit bindings declared in a child injector.\n   */"
				},
				{
					"signature": "boolean isBannedKey(Key\u003c?\u003e key)",
					"documentation": "/**\n   * Returns true if {@code key} is forbidden from being bound in the injector corresponding to this\n   * data object. This indicates that one of the injector's children has bound the key.\n   */"
				},
				{
					"signature": "Set\u003cObject\u003e getSourcesForBannedKey(Key\u003c?\u003e key)",
					"documentation": "/** Returns the source of a banned key. */"
				},
				{
					"signature": "Object lock()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A processor to gather injector options.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.InjectorOptionsProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "InjectorOptionsProcessor(Errors errors)",
					"documentation": "/**\n * A processor to gather injector options.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(DisableCircularProxiesOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(RequireExplicitBindingsOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(RequireAtInjectOnConstructorsOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(RequireExactBindingAnnotationsOption option)",
					"documentation": ""
				},
				{
					"signature": "InjectorOptions getOptions(Stage stage, InjectorOptions parentOptions)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InjectorImpl.InjectorOptions"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * InjectorShell is used by {@link InternalInjectorCreator} to recursively create a tree of\n * uninitialized {@link Injector}s. Each InjectorShell corresponds to either the top-level root\n * injector, or a private child injector.\n *\n * \u003cp\u003eThe root InjectorShell extracts elements from its list of modules and processes these elements\n * to aggregate data that is used to populate its injector's fields. Child injectors are constructed\n * similarly, but using {@link PrivateElements} instead of modules.\n *\n * \u003cp\u003eIt is necessary to create the root and child injectors in a single batch because there can be\n * bidirectional parent \u0026lt;-\u0026gt; child injector dependencies that require the entire tree of\n * injectors to be initialized together in the {@link InternalInjectorCreator}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.InjectorShell",
			"extends": "",
			"Methods": [
				{
					"signature": "private InjectorShell(List\u003cElement\u003e elements, InjectorImpl injector)",
					"documentation": "/**\n * InjectorShell is used by {@link InternalInjectorCreator} to recursively create a tree of\n * uninitialized {@link Injector}s. Each InjectorShell corresponds to either the top-level root\n * injector, or a private child injector.\n *\n * \u003cp\u003eThe root InjectorShell extracts elements from its list of modules and processes these elements\n * to aggregate data that is used to populate its injector's fields. Child injectors are constructed\n * similarly, but using {@link PrivateElements} instead of modules.\n *\n * \u003cp\u003eIt is necessary to create the root and child injectors in a single batch because there can be\n * bidirectional parent \u0026lt;-\u0026gt; child injector dependencies that require the entire tree of\n * injectors to be initialized together in the {@link InternalInjectorCreator}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "InjectorImpl getInjector()",
					"documentation": ""
				},
				{
					"signature": "List\u003cElement\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "private static void bindInjector(InjectorImpl injector)",
					"documentation": "/**\n   * The Injector is a special case because we allow both parent and child injectors to both have a\n   * binding for that key.\n   */"
				},
				{
					"signature": "private static void bindLogger(InjectorImpl injector)",
					"documentation": "/**\n   * The Logger is a special case because it knows the injection point of the injected member. It's\n   * the only binding that does this.\n   */"
				},
				{
					"signature": "private static void bindStage(InjectorImpl injector, Stage stage)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.InjectorShell.InjectorFactory",
				"com.google.inject.internal.InjectorShell.LoggerFactory",
				"com.google.inject.internal.InjectorShell.RootModule",
				"com.google.inject.internal.InjectorShell.InheritedScannersModule"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InjectorShell.Builder",
				"com.google.inject.internal.InjectorShell.InjectorFactory",
				"com.google.inject.internal.InjectorShell.LoggerFactory",
				"com.google.inject.internal.InjectorShell.RootModule",
				"com.google.inject.internal.InjectorShell.InheritedScannersModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorShell.Builder",
			"extends": "",
			"Methods": [
				{
					"signature": "Builder stage(Stage stage)",
					"documentation": "/** null unless this exists in a {@link Binder#newPrivateBinder private environment} */"
				},
				{
					"signature": "Builder parent(InjectorImpl parent)",
					"documentation": ""
				},
				{
					"signature": "Builder privateElements(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "void addModules(Iterable\u003c? extends Module\u003e modules)",
					"documentation": ""
				},
				{
					"signature": "Stage getStage()",
					"documentation": ""
				},
				{
					"signature": "Object lock()",
					"documentation": "/** Synchronize on this before calling {@link #build}. */"
				},
				{
					"signature": "List\u003cInjectorShell\u003e build(\n        Initializer initializer,\n        ProcessedBindingData processedBindingData,\n        ContinuousStopwatch stopwatch,\n        Errors errors)",
					"documentation": "/**\n     * Creates and returns the injector shells for the current modules. Multiple shells will be\n     * returned if any modules contain {@link Binder#newPrivateBinder private environments}. The\n     * primary injector will be first in the returned list.\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorShell.InjectorFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "private InjectorFactory(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Injector get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Injector get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory",
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorShell"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorShell.LoggerFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Logger get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Logger get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory",
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorShell"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorShell.RootModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorShell"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InjectorShell.InheritedScannersModule",
			"extends": "",
			"Methods": [
				{
					"signature": "InheritedScannersModule(InjectorBindingData bindingData)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InjectorShell"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InstanceBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "public InstanceBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Set\u003cInjectionPoint\u003e injectionPoints,\n      T instance)",
					"documentation": ""
				},
				{
					"signature": "public InstanceBindingImpl(\n      Object source, Key\u003cT\u003e key, Scoping scoping, Set\u003cInjectionPoint\u003e injectionPoints, T instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T getInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cInjectionPoint\u003e getInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.InstanceBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Elements"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.bindInterceptor} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.InterceptorBindingProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "InterceptorBindingProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.bindInterceptor} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(InterceptorBinding command)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Intercepts a method with a stack of interceptors.\n *\n * \u003cp\u003eActs as a JDK {@link InvocationHandler} so the proxy using it can avoid Guice-specific types.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.InterceptorStackCallback",
			"extends": "",
			"Methods": [
				{
					"signature": "public InterceptorStackCallback(\n      Method method,\n      List\u003cMethodInterceptor\u003e interceptors,\n      BiFunction\u003cObject, Object[], Object\u003e superInvoker)",
					"documentation": "/**\n * Intercepts a method with a stack of interceptors.\n *\n * \u003cp\u003eActs as a JDK {@link InvocationHandler} so the proxy using it can avoid Guice-specific types.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "@Override\n  public Object invoke(Object proxy, Method unused, Object[] arguments) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "private void pruneStacktrace(Throwable throwable)",
					"documentation": "/**\n   * Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\n   * and any causes it may have.\n   */"
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InterceptedMethodInvocation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InterceptedMethodInvocation"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InterceptedMethodInvocation",
			"extends": "",
			"Methods": [
				{
					"signature": "public InterceptedMethodInvocation(Object proxy, Object[] arguments, int interceptorIndex)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object proceed() throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Method getMethod()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object[] getArguments()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object getThis()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AccessibleObject getStaticPart()",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInvocation"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InterceptorStackCallback"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Internal context. Used to coordinate injections and support circular dependencies.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.InternalContext",
			"extends": "",
			"Methods": [
				{
					"signature": "InternalContext(InjectorOptions options, Object[] toClear)",
					"documentation": "/**\n   * A single element array to clear when the {@link #enterCount} hits {@code 0}.\n   *\n   * \u003cp\u003eThis is the value stored in the {@code InjectorImpl.localContext} thread local.\n   */"
				},
				{
					"signature": "void enter()",
					"documentation": "/** Should only be called by InjectorImpl.enterContext(). */"
				},
				{
					"signature": "@Override\n  public void close()",
					"documentation": "/** Should be called any any method that received an instance via InjectorImpl.enterContext(). */"
				},
				{
					"signature": "InjectorOptions getInjectorOptions()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  \u003cT\u003e ConstructionContext\u003cT\u003e getConstructionContext(Object key)",
					"documentation": ""
				},
				{
					"signature": "Dependency\u003c?\u003e getDependency()",
					"documentation": ""
				},
				{
					"signature": "void setDependency(Dependency\u003c?\u003e dependency)",
					"documentation": "/**\n   * Used to set the current dependency.\n   *\n   * \u003cp\u003eThe currentDependency field is only used by InternalFactoryToProviderAdapter to propagate\n   * information to singleton scope. See comments in that class about alternatives.\n   */"
				}
			],
			"interfaces": [
				"AutoCloseable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Represents an error created by Guice as opposed to custom error added to the binder from\n * application code.\n */",
			"name": "com.google.inject.internal.InternalErrorDetail",
			"extends": "com.google.inject.spi.ErrorDetail",
			"Methods": [
				{
					"signature": "protected InternalErrorDetail(\n      ErrorId errorId, String message, List\u003cObject\u003e sources, Throwable cause)",
					"documentation": "/**\n * Represents an error created by Guice as opposed to custom error added to the binder from\n * application code.\n */"
				},
				{
					"signature": "@Override\n  protected final Optional\u003cString\u003e getLearnMoreLink()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected final Optional\u003cString\u003e getErrorIdentifier()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.BindingAlreadySetError",
				"com.google.inject.internal.ChildBindingAlreadySetError",
				"com.google.inject.internal.DuplicateElementError",
				"com.google.inject.internal.DuplicateMapKeyError",
				"com.google.inject.internal.GenericErrorDetail",
				"com.google.inject.internal.MissingConstructorError",
				"com.google.inject.internal.MissingImplementationError",
				"com.google.inject.internal.ScopeNotFoundError"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates objects which will be injected.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.InternalFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.ConstantFactory",
				"com.google.inject.internal.ConstructorBindingImpl.Factory",
				"com.google.inject.internal.ExposedKeyFactory",
				"com.google.inject.internal.FactoryProxy",
				"com.google.inject.internal.InjectorShell.InjectorFactory",
				"com.google.inject.internal.InjectorShell.LoggerFactory",
				"com.google.inject.internal.InternalFactoryToProviderAdapter",
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.Factory",
				"com.google.inject.internal.ProviderInternalFactory"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Adapts {@link ProviderInstanceBinding} providers, ensuring circular proxies fail (or proxy)\n * properly.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.InternalFactoryToInitializableAdapter",
			"extends": "com.google.inject.internal.ProviderInternalFactory",
			"Methods": [
				{
					"signature": "public InternalFactoryToInitializableAdapter(\n      Initializable\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e initializable,\n      Object source,\n      ProvisionListenerStackCallback\u003cT\u003e provisionCallback)",
					"documentation": "/**\n * Adapts {@link ProviderInstanceBinding} providers, ensuring circular proxies fail (or proxy)\n * properly.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected T provision(\n      javax.inject.Provider\u003c? extends T\u003e provider,\n      Dependency\u003c?\u003e dependency,\n      ConstructionContext\u003cT\u003e constructionContext)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.internal.InternalFactoryToProviderAdapter",
			"extends": "",
			"Methods": [
				{
					"signature": "public InternalFactoryToProviderAdapter(Provider\u003c? extends T\u003e provider, Object source)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Contains flags for Guice. */",
			"name": "com.google.inject.internal.InternalFlags",
			"extends": "",
			"Methods": [
				{
					"signature": "public static IncludeStackTraceOption getIncludeStackTraceOption()",
					"documentation": ""
				},
				{
					"signature": "public static CustomClassLoadingOption getCustomClassLoadingOption()",
					"documentation": ""
				},
				{
					"signature": "public static NullableProvidesOption getNullableProvidesOption()",
					"documentation": ""
				},
				{
					"signature": "public static boolean isBytecodeGenEnabled()",
					"documentation": ""
				},
				{
					"signature": "public static boolean enableColorizeErrorMessages()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT extends Enum\u003cT\u003e\u003e T getSystemOption(final String name, T defaultValue)",
					"documentation": "/**\n   * Gets the system option indicated by the specified key; runs as a privileged action.\n   *\n   * @param name of the system option\n   * @param defaultValue if the option is not set\n   * @return value of the option, defaultValue if not set\n   */"
				},
				{
					"signature": "private static \u003cT extends Enum\u003cT\u003e\u003e T getSystemOption(\n      final String name, T defaultValue, T secureValue)",
					"documentation": "/**\n   * Gets the system option indicated by the specified key; runs as a privileged action.\n   *\n   * @param name of the system option\n   * @param defaultValue if the option is not set\n   * @param secureValue if the security manager disallows access to the option\n   * @return value of the option, defaultValue if not set, secureValue if no access\n   */"
				},
				{
					"signature": "private InternalFlags()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.aop.ClassDefining",
				"com.google.inject.internal.aop.UnsafeClassDefiner",
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder",
				"com.google.inject.Asserts"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.IncludeStackTraceOption",
				"com.google.inject.internal.CustomClassLoadingOption",
				"com.google.inject.internal.NullableProvidesOption",
				"com.google.inject.internal.BytecodeGenOption",
				"com.google.inject.internal.ColorizeOption"
			]
		},
		{
			"documentation": "/** The options for Guice stack trace collection. */",
			"name": "com.google.inject.internal.IncludeStackTraceOption",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** The options for Guice custom class loading. */",
			"name": "com.google.inject.internal.CustomClassLoadingOption",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Options for handling nullable parameters used in provides methods. */",
			"name": "com.google.inject.internal.NullableProvidesOption",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Options for controlling whether Guice uses bytecode generation at runtime. When bytecode\n   * generation is enabled, the following features will be enabled in Guice:\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003eRuntime bytecode generation (instead of reflection) will be used when Guice need to\n   *       invoke application code.\n   *   \u003cli\u003eMethod interception.\n   * \u003c/ul\u003e\n   *\n   * \u003cp\u003eBytecode generation is generally faster than using reflection when invoking application\n   * code, however, it can use more memory and slower in certain cases due to the time spent in\n   * generating the classes. If you prefer to use reflection over bytecode generation then set\n   * {@link BytecodeGenOption} to {@code DISABLED}.\n   */",
			"name": "com.google.inject.internal.BytecodeGenOption",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Options for enable or disable using ansi color in error messages. */",
			"name": "com.google.inject.internal.ColorizeOption",
			"extends": "",
			"Methods": [
				{
					"signature": "AUTO",
					"documentation": "/** Options for enable or disable using ansi color in error messages. */"
				},
				{
					"signature": "@Override\n      boolean enabled()",
					"documentation": "/** Options for enable or disable using ansi color in error messages. */"
				},
				{
					"signature": "ON",
					"documentation": ""
				},
				{
					"signature": "@Override\n      boolean enabled()",
					"documentation": ""
				},
				{
					"signature": "OFF",
					"documentation": ""
				},
				{
					"signature": "@Override\n      boolean enabled()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds a tree of injectors. This is a primary injector, plus child injectors needed for each\n * {@code Binder.newPrivateBinder() private environment}. The primary injector is not necessarily a\n * top-level injector.\n *\n * \u003cp\u003eInjector construction happens in two phases.\n *\n * \u003col\u003e\n *   \u003cli\u003eStatic building. In this phase, we interpret commands, create bindings, and inspect\n *       dependencies. During this phase, we hold a lock to ensure consistency with parent\n *       injectors. No user code is executed in this phase.\n *   \u003cli\u003eDynamic injection. In this phase, we call user code. We inject members that requested\n *       injection. This may require user's objects be created and their providers be called. And we\n *       create eager singletons. In this phase, user code may have started other threads. This\n *       phase is not executed for injectors created using {@link Stage#TOOL the tool stage}\n * \u003c/ol\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.InternalInjectorCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "public InternalInjectorCreator()",
					"documentation": "/**\n * Builds a tree of injectors. This is a primary injector, plus child injectors needed for each\n * {@code Binder.newPrivateBinder() private environment}. The primary injector is not necessarily a\n * top-level injector.\n *\n * \u003cp\u003eInjector construction happens in two phases.\n *\n * \u003col\u003e\n *   \u003cli\u003eStatic building. In this phase, we interpret commands, create bindings, and inspect\n *       dependencies. During this phase, we hold a lock to ensure consistency with parent\n *       injectors. No user code is executed in this phase.\n *   \u003cli\u003eDynamic injection. In this phase, we call user code. We inject members that requested\n *       injection. This may require user's objects be created and their providers be called. And we\n *       create eager singletons. In this phase, user code may have started other threads. This\n *       phase is not executed for injectors created using {@link Stage#TOOL the tool stage}\n * \u003c/ol\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public InternalInjectorCreator stage(Stage stage)",
					"documentation": ""
				},
				{
					"signature": "public InternalInjectorCreator parentInjector(InjectorImpl parent)",
					"documentation": "/**\n   * Sets the parent of the injector to-be-constructed. As a side effect, this sets this injector's\n   * stage to the stage of {@code parent} and sets {@link #requireExplicitBindings()} if the parent\n   * injector also required them.\n   */"
				},
				{
					"signature": "public InternalInjectorCreator addModules(Iterable\u003c? extends Module\u003e modules)",
					"documentation": ""
				},
				{
					"signature": "public Injector build()",
					"documentation": ""
				},
				{
					"signature": "private void initializeStatically()",
					"documentation": "/** Initialize and validate everything. */"
				},
				{
					"signature": "private Injector primaryInjector()",
					"documentation": "/** Returns the injector being constructed. This is not necessarily the root injector. */"
				},
				{
					"signature": "private void injectDynamically()",
					"documentation": "/**\n   * Inject everything that can be injected. This method is intentionally not synchronized. If we\n   * locked while injecting members (ie. running user code), things would deadlock should the user\n   * code build a just-in-time binding from another thread.\n   */"
				},
				{
					"signature": "void loadEagerSingletons(InjectorImpl injector, Stage stage, final Errors errors)",
					"documentation": "/**\n   * Loads eager singletons, or all singletons if we're in Stage.PRODUCTION. Bindings discovered\n   * while we're binding these singletons are not be eager.\n   */"
				},
				{
					"signature": "private boolean isEagerSingleton(InjectorImpl injector, BindingImpl\u003c?\u003e binding, Stage stage)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalInjectorCreator.ToolStageInjector",
				"com.google.inject.internal.util.ContinuousStopwatch",
				"com.google.inject.spi.Dependency"
			],
			"usedBy": [
				"com.google.inject.Guice"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.InternalInjectorCreator.ToolStageInjector"
			]
		},
		{
			"documentation": "/** {@link Injector} exposed to users in {@link Stage#TOOL}. */",
			"name": "com.google.inject.internal.InternalInjectorCreator.ToolStageInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "ToolStageInjector(Injector delegateInjector)",
					"documentation": "/** {@link Injector} exposed to users in {@link Stage#TOOL}. */"
				},
				{
					"signature": "@Override\n    public void injectMembers(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getAllBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Binding\u003cT\u003e getBinding(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Binding\u003cT\u003e getBinding(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Binding\u003cT\u003e getExistingBinding(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e List\u003cBinding\u003cT\u003e\u003e findBindingsByType(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Injector getParent()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Injector createChildInjector(Iterable\u003c? extends Module\u003e modules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Injector createChildInjector(Module... modules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cClass\u003c? extends Annotation\u003e, Scope\u003e getScopeBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cTypeConverterBinding\u003e getTypeConverterBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public List\u003cElement\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cTypeLiteral\u003c?\u003e, List\u003cInjectionPoint\u003e\u003e getAllMembersInjectorInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e getProvider(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e T getInstance(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e T getInstance(Class\u003cT\u003e type)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Injector"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InternalInjectorCreator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A {@link ProviderInstanceBindingImpl} for implementing 'native' guice extensions.\n *\n * \u003cp\u003eBeyond the normal binding contract that is mostly handled by our baseclass, this also\n * implements {@link DelayedInitialize} in order to initialize factory state.\n */",
			"name": "com.google.inject.internal.InternalProviderInstanceBindingImpl",
			"extends": "com.google.inject.internal.ProviderInstanceBindingImpl",
			"Methods": [
				{
					"signature": "InternalProviderInstanceBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      Factory\u003cT\u003e originalFactory,\n      InternalFactory\u003c? extends T\u003e scopedFactory,\n      Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "InitializationTiming getInitializationTiming()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void initialize(final InjectorImpl injector, final Errors errors) throws ErrorsException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.DelayedInitialize"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.Factory",
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.CyclicFactory"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InitializationTiming",
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.Factory",
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.CyclicFactory"
			]
		},
		{
			"documentation": "/**\n * A {@link ProviderInstanceBindingImpl} for implementing 'native' guice extensions.\n *\n * \u003cp\u003eBeyond the normal binding contract that is mostly handled by our baseclass, this also\n * implements {@link DelayedInitialize} in order to initialize factory state.\n */",
			"name": "com.google.inject.internal.InitializationTiming",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A base factory implementation. Any Factories that delegate to other bindings should use the\n   * {@code CyclicFactory} subclass, but trivial factories can use this one.\n   */",
			"name": "com.google.inject.internal.InternalProviderInstanceBindingImpl.Factory",
			"extends": "",
			"Methods": [
				{
					"signature": "Factory(InitializationTiming initializationTiming)",
					"documentation": "/**\n   * A base factory implementation. Any Factories that delegate to other bindings should use the\n   * {@code CyclicFactory} subclass, but trivial factories can use this one.\n   */"
				},
				{
					"signature": "final Object getSource()",
					"documentation": "/**\n     * The binding source.\n     *\n     * \u003cp\u003eMay be useful for augmenting runtime error messages.\n     *\n     * \u003cp\u003eNote: this will return {#code null} until {@link #initialize(InjectorImpl, Errors)} has\n     * already been called.\n     */"
				},
				{
					"signature": "@Override\n    public final T get()",
					"documentation": "/**\n     * A callback that allows for implementations to fetch dependencies on other bindings.\n     *\n     * \u003cp\u003eWill be called exactly once, prior to any call to {@link #doProvision}.\n     */"
				},
				{
					"signature": "@Override\n    public T get(final InternalContext context, final Dependency\u003c?\u003e dependency, boolean linked)\n        throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory",
				"com.google.inject.Provider",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl.CyclicFactory"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * An base factory implementation that can be extended to provide a specialized implementation of\n   * a {@link ProviderWithExtensionVisitor} and also implements {@link InternalFactory}\n   */",
			"name": "com.google.inject.internal.InternalProviderInstanceBindingImpl.CyclicFactory",
			"extends": "com.google.inject.internal.InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "CyclicFactory(InitializationTiming initializationTiming)",
					"documentation": "/**\n   * An base factory implementation that can be extended to provide a specialized implementation of\n   * a {@link ProviderWithExtensionVisitor} and also implements {@link InternalFactory}\n   */"
				},
				{
					"signature": "@Override\n    public final T get(\n        final InternalContext context, final Dependency\u003c?\u003e dependency, boolean linked)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "private T provision(\n        Dependency\u003c?\u003e dependency,\n        InternalContext context,\n        ConstructionContext\u003cT\u003e constructionContext)\n        throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A checked exception for provisioning errors.\n *\n * \u003cp\u003eThis is the internal dual of {@link ProvisionException}, similar to the relationship between\n * {@link com.google.inject.ConfigurationException} and {@link ErrorsException}. This is useful for\n * several reasons:\n *\n * \u003cul\u003e\n *   \u003cli\u003eSince it is a checked exception, we get some assistance from the java compiler in ensuring\n *       that we correctly handle it everywhere. ProvisionException is unchecked.\n *   \u003cli\u003eSince this is an internal package, we can add useful construction and mutation APIs that\n *       would be undesirable in a public supported API.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eThis exception will be thrown when errors are encountered during provisioning, ErrorsException\n * will continue to be used for errors that are encountered during provisioning and both make use of\n * the {@link Message} as the core model.\n *\n * \u003cp\u003eNOTE: this object stores a list of messages but in the most common case the cardinality will\n * be 1. The only time that multiple errors might be reported via this mechanism is when {@link\n * #errorInUserCode} is called with an exception that holds multiple errors (like\n * ProvisionException).\n */",
			"name": "com.google.inject.internal.InternalProvisionException",
			"extends": "Exception",
			"Methods": [
				{
					"signature": "public static InternalProvisionException circularDependenciesDisabled(Class\u003c?\u003e expectedType)",
					"documentation": "/**\n * A checked exception for provisioning errors.\n *\n * \u003cp\u003eThis is the internal dual of {@link ProvisionException}, similar to the relationship between\n * {@link com.google.inject.ConfigurationException} and {@link ErrorsException}. This is useful for\n * several reasons:\n *\n * \u003cul\u003e\n *   \u003cli\u003eSince it is a checked exception, we get some assistance from the java compiler in ensuring\n *       that we correctly handle it everywhere. ProvisionException is unchecked.\n *   \u003cli\u003eSince this is an internal package, we can add useful construction and mutation APIs that\n *       would be undesirable in a public supported API.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eThis exception will be thrown when errors are encountered during provisioning, ErrorsException\n * will continue to be used for errors that are encountered during provisioning and both make use of\n * the {@link Message} as the core model.\n *\n * \u003cp\u003eNOTE: this object stores a list of messages but in the most common case the cardinality will\n * be 1. The only time that multiple errors might be reported via this mechanism is when {@link\n * #errorInUserCode} is called with an exception that holds multiple errors (like\n * ProvisionException).\n */"
				},
				{
					"signature": "public static InternalProvisionException cannotProxyClass(Class\u003c?\u003e expectedType)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException create(\n      ErrorId errorId, String format, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorInUserCode(\n      ErrorId errorId, Throwable cause, String messageFormat, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException subtypeNotProvided(\n      Class\u003c? extends javax.inject.Provider\u003c?\u003e\u003e providerType, Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorInProvider(Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorInjectingMethod(Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorInjectingConstructor(Throwable cause)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorInUserInjector(\n      MembersInjector\u003c?\u003e listener, TypeLiteral\u003c?\u003e type, RuntimeException cause)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException jitDisabled(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public static InternalProvisionException errorNotifyingInjectionListener(\n      InjectionListener\u003c?\u003e listener, TypeLiteral\u003c?\u003e type, RuntimeException cause)",
					"documentation": ""
				},
				{
					"signature": "static void onNullInjectedIntoNonNullableDependency(Object source, Dependency\u003c?\u003e dependency)\n      throws InternalProvisionException",
					"documentation": "/**\n   * Returns {@code value} if it is non-null or allowed to be null. Otherwise a message is added and\n   * an {@code InternalProvisionException} is thrown.\n   */"
				},
				{
					"signature": "InternalProvisionException(Message error)",
					"documentation": ""
				},
				{
					"signature": "private InternalProvisionException(Iterable\u003cMessage\u003e errors)",
					"documentation": ""
				},
				{
					"signature": "InternalProvisionException addSource(Object source)",
					"documentation": "/**\n   * Prepends the given {@code source} to the stack of binding sources for the errors reported in\n   * this exception.\n   *\n   * \u003cp\u003eSee {@link Errors#withSource(Object)}\n   *\n   * \u003cp\u003eIt is expected that this method is called as the exception propagates up the stack.\n   *\n   * @param source\n   * @return {@code this}\n   */"
				},
				{
					"signature": "ImmutableList\u003cMessage\u003e getErrors()",
					"documentation": ""
				},
				{
					"signature": "public ProvisionException toProvisionException()",
					"documentation": "/** Returns this exception convered to a ProvisionException. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.StackTraceElements"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Class to conditionally load support for Kotlin features. These features are enabled based on\n * whether {@code com.google.inject.KotlinSupportImpl} is in the class path.\n */",
			"name": "com.google.inject.internal.KotlinSupport",
			"extends": "",
			"Methods": [
				{
					"signature": "private KotlinSupport()",
					"documentation": "/**\n * Class to conditionally load support for Kotlin features. These features are enabled based on\n * whether {@code com.google.inject.KotlinSupportImpl} is in the class path.\n */"
				},
				{
					"signature": "public static KotlinSupportInterface getInstance()",
					"documentation": ""
				},
				{
					"signature": "private static KotlinSupportInterface loadKotlinSupport()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.KotlinSupport.KotlinUnsupported"
			],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.KotlinSupport.KotlinSupportHolder",
				"com.google.inject.internal.KotlinSupport.KotlinUnsupported"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.KotlinSupport.KotlinSupportHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.KotlinSupport.KotlinUnsupported",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Annotation[] getAnnotations(Field field)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isNullable(Field field)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Predicate\u003cInteger\u003e getIsParameterKotlinNullablePredicate(Constructor\u003c?\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Predicate\u003cInteger\u003e getIsParameterKotlinNullablePredicate(Method method)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void checkConstructorParameterAnnotations(Constructor\u003c?\u003e constructor, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isLocalClass(Class\u003c?\u003e clazz)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.KotlinSupportInterface"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.KotlinSupport"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Interface for accessing information about Kotlin code. */",
			"name": "com.google.inject.internal.KotlinSupportInterface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.KotlinSupport.KotlinUnsupported"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.LinkedBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "LinkedBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping,\n      Key\u003c? extends T\u003e targetKey)",
					"documentation": ""
				},
				{
					"signature": "LinkedBindingImpl(Object source, Key\u003cT\u003e key, Scoping scoping, Key\u003c? extends T\u003e targetKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Key\u003c? extends T\u003e getLinkedKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.LinkedKeyBinding",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Elements"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.LinkedProviderBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "private LinkedProviderBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping,\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey,\n      DelayedInitialize delayedInitializer)",
					"documentation": ""
				},
				{
					"signature": "public LinkedProviderBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping,\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey)",
					"documentation": ""
				},
				{
					"signature": "LinkedProviderBindingImpl(\n      Object source,\n      Key\u003cT\u003e key,\n      Scoping scoping,\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e LinkedProviderBindingImpl\u003cT\u003e createWithInitializer(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping,\n      Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e providerKey,\n      DelayedInitialize delayedInitializer)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Key\u003c? extends javax.inject.Provider\u003c? extends T\u003e\u003e getProviderKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderKeyBinding",
				"com.google.inject.spi.HasDependencies",
				"com.google.inject.internal.DelayedInitialize"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Elements"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder#bindListener} commands.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ListenerBindingProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "ListenerBindingProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder#bindListener} commands.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(TypeListenerBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(ProvisionListenerBinding binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.getProvider} and {@code Binder.getMembersInjector(TypeLiteral)} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.LookupProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "LookupProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.getProvider} and {@code Binder.getMembersInjector(TypeLiteral)} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Boolean visit(MembersInjectorLookup\u003cT\u003e lookup)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Boolean visit(ProviderLookup\u003cT\u003e lookup)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Accessors for providers and members injectors. The returned values will not be functional until\n * the injector has been created.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Lookups",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.DeferredLookups",
				"com.google.inject.internal.InjectorImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Injects members of instances of a given type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.MembersInjectorImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "MembersInjectorImpl(\n      InjectorImpl injector,\n      TypeLiteral\u003cT\u003e typeLiteral,\n      EncounterImpl\u003cT\u003e encounter,\n      ImmutableList\u003cSingleMemberInjector\u003e memberInjectors)",
					"documentation": "/**\n * Injects members of instances of a given type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public ImmutableList\u003cSingleMemberInjector\u003e getMemberInjectors()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void injectMembers(T instance)",
					"documentation": ""
				},
				{
					"signature": "void injectAndNotify(\n      final T instance,\n      final Key\u003cT\u003e key, \n      final ProvisionListenerStackCallback\u003cT\u003e provisionCallback, \n      final Object source,\n      final boolean toolableOnly)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "void notifyListeners(T instance) throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "void injectMembers(T t, InternalContext context, boolean toolableOnly)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableSet\u003cInjectionPoint\u003e getInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "public ImmutableList\u003cMethodAspect\u003e getAddedAspects()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.MembersInjector"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Members injectors by type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.MembersInjectorStore",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        protected MembersInjectorImpl\u003c?\u003e create(TypeLiteral\u003c?\u003e type, Errors errors)\n            throws ErrorsException",
					"documentation": "/**\n * Members injectors by type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "MembersInjectorStore(InjectorImpl injector, List\u003cTypeListenerBinding\u003e typeListenerBindings)",
					"documentation": ""
				},
				{
					"signature": "public boolean hasTypeListeners()",
					"documentation": "/**\n   * Returns true if any type listeners are installed. Other code may take shortcuts when there\n   * aren't any type listeners.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  public \u003cT\u003e MembersInjectorImpl\u003cT\u003e get(TypeLiteral\u003cT\u003e key, Errors errors) throws ErrorsException",
					"documentation": "/** Returns a new complete members injector with injection listeners registered. */"
				},
				{
					"signature": "boolean remove(TypeLiteral\u003c?\u003e type)",
					"documentation": "/**\n   * Purges a type literal from the cache. Use this only if the type is not actually valid for\n   * binding and needs to be purged. (See issue 319 and\n   * ImplicitBindingTest#testCircularJitBindingsLeaveNoResidue and\n   * #testInstancesRequestingProvidersForThemselvesWithChildInjectors for examples of when this is\n   * necessary.)\n   *\n   * \u003cp\u003eReturns true if the type was stored in the cache, false otherwise.\n   */"
				},
				{
					"signature": "private \u003cT\u003e MembersInjectorImpl\u003cT\u003e createWithListeners(TypeLiteral\u003cT\u003e type, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Creates a new members injector and attaches both injection listeners and method aspects. */"
				},
				{
					"signature": "ImmutableList\u003cSingleMemberInjector\u003e getInjectors(\n      Set\u003cInjectionPoint\u003e injectionPoints, Errors errors)",
					"documentation": "/** Returns the injectors for the specified injection points. */"
				},
				{
					"signature": "ImmutableListMultimap\u003cTypeLiteral\u003c?\u003e, InjectionPoint\u003e getAllInjectionPoints()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.InjectionPoint"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.addError} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.MessageProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "MessageProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.addError} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(Message message)",
					"documentation": ""
				},
				{
					"signature": "public static String getRootMessage(Throwable t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Utility methods for {@link Message} objects */",
			"name": "com.google.inject.internal.Messages",
			"extends": "",
			"Methods": [
				{
					"signature": "private Messages()",
					"documentation": "/** Utility methods for {@link Message} objects */"
				},
				{
					"signature": "static Message mergeSources(List\u003cObject\u003e sources, Message message)",
					"documentation": "/** Prepends the list of sources to the given {@link Message} */"
				},
				{
					"signature": "public static String format(String messageFormat, Object... arguments)",
					"documentation": "/**\n   * Calls {@link String#format} after converting the arguments using some standard guice formatting\n   * for {@link Key}, {@link Class} and {@link Member} objects.\n   */"
				},
				{
					"signature": "public static String formatMessages(String heading, Collection\u003cMessage\u003e errorMessages)",
					"documentation": "/** Returns the formatted message for an exception with the specified messages. */"
				},
				{
					"signature": "public static Message create(ErrorId errorId, String messageFormat, Object... arguments)",
					"documentation": "/**\n   * Creates a new Message without a cause.\n   *\n   * @param errorId The enum id for the error\n   * @param messageFormat Format string\n   * @param arguments format string arguments\n   */"
				},
				{
					"signature": "public static Message create(\n      ErrorId errorId, Throwable cause, String messageFormat, Object... arguments)",
					"documentation": "/**\n   * Creates a new Message with the given cause.\n   *\n   * @param errorId The enum id for the error\n   * @param cause The exception that caused the error\n   * @param messageFormat Format string\n   * @param arguments format string arguments\n   */"
				},
				{
					"signature": "public static Message create(\n      ErrorId errorId,\n      Throwable cause,\n      List\u003cObject\u003e sources,\n      String messageFormat,\n      Object... arguments)",
					"documentation": "/**\n   * Creates a new Message with the given cause and a binding source stack.\n   *\n   * @param errorId The enum id for the error\n   * @param cause The exception that caused the error\n   * @param sources The binding sources for the source stack\n   * @param messageFormat Format string\n   * @param arguments format string arguments\n   */"
				},
				{
					"signature": "static Object convert(Object o)",
					"documentation": "/** Formats an object in a user friendly way. */"
				},
				{
					"signature": "static Object convert(Object o, ElementSource source)",
					"documentation": ""
				},
				{
					"signature": "private static Object appendModules(Object source, ElementSource elementSource)",
					"documentation": ""
				},
				{
					"signature": "public static Throwable getOnlyCause(Collection\u003cMessage\u003e messages)",
					"documentation": "/**\n   * Returns the cause throwable if there is exactly one cause in {@code messages}. If there are\n   * zero or multiple messages with causes, null is returned.\n   */"
				},
				{
					"signature": "private static final String formatText(String text, FormatOptions... options)",
					"documentation": ""
				},
				{
					"signature": "public static final String bold(String text)",
					"documentation": ""
				},
				{
					"signature": "public static final String redBold(String text)",
					"documentation": ""
				},
				{
					"signature": "public static final String underline(String text)",
					"documentation": ""
				},
				{
					"signature": "public static final String faint(String text)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ProvisionExceptionsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Messages.Converter",
				"com.google.inject.internal.util.Classes",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.CreationException",
				"com.google.inject.ProvisionException",
				"com.google.inject.spi.ErrorDetail"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.Messages.Converter",
				"com.google.inject.internal.Messages.ThrowableEquivalence",
				"com.google.inject.internal.FormatOptions"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Messages.Converter",
			"extends": "",
			"Methods": [
				{
					"signature": "Converter(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "boolean appliesTo(Object o)",
					"documentation": ""
				},
				{
					"signature": "String convert(Object o)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Messages"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Messages.ThrowableEquivalence",
			"extends": "com.google.common.base.Equivalence",
			"Methods": [
				{
					"signature": "@Override\n    protected boolean doEquivalent(Throwable a, Throwable b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected int doHash(Throwable t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.FormatOptions",
			"extends": "",
			"Methods": [
				{
					"signature": "FormatOptions(String ansiCode)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Ties a matcher to a method interceptor.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.MethodAspect",
			"extends": "",
			"Methods": [
				{
					"signature": "static MethodAspect fromBinding(InterceptorBinding binding)",
					"documentation": "/**\n * Ties a matcher to a method interceptor.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "MethodAspect(\n      Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n      Matcher\u003c? super Method\u003e methodMatcher,\n      List\u003cMethodInterceptor\u003e interceptors)",
					"documentation": "/**\n   * @param classMatcher matches classes the interceptor should apply to. For example: {@code\n   *     only(Runnable.class)}.\n   * @param methodMatcher matches methods the interceptor should apply to. For example: {@code\n   *     annotatedWith(Transactional.class)}.\n   * @param interceptors to apply\n   */"
				},
				{
					"signature": "MethodAspect(\n      Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n      Matcher\u003c? super Method\u003e methodMatcher,\n      MethodInterceptor... interceptors)",
					"documentation": ""
				},
				{
					"signature": "boolean matches(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "boolean matches(Method method)",
					"documentation": ""
				},
				{
					"signature": "List\u003cMethodInterceptor\u003e interceptors()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Error reported when Guice can't find an useable constructor to create objects. */",
			"name": "com.google.inject.internal.MissingConstructorError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "MissingConstructorError(TypeLiteral\u003c?\u003e type, boolean atInjectRequired, List\u003cObject\u003e sources)",
					"documentation": "/** Error reported when Guice can't find an useable constructor to create objects. */"
				},
				{
					"signature": "@Override\n  public boolean isMergeable(ErrorDetail\u003c?\u003e other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public MissingConstructorError withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Error reported by Guice when a key is not bound in the injector. */",
			"name": "com.google.inject.internal.MissingImplementationError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "public MissingImplementationError(Key\u003cT\u003e key, Injector injector, List\u003cObject\u003e sources)",
					"documentation": "/** Error reported by Guice when a key is not bound in the injector. */"
				},
				{
					"signature": "private MissingImplementationError(\n      Key\u003cT\u003e key, ImmutableList\u003cString\u003e suggestions, List\u003cObject\u003e sources)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean isMergeable(ErrorDetail\u003c?\u003e otherError)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public MissingImplementationError\u003cT\u003e withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				},
				{
					"signature": "private List\u003cObject\u003e trimSource(List\u003cObject\u003e sources)",
					"documentation": "/** Omit the key itself in the source list since the information is redundant. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Helper class to find hints for {@link MissingImplementationError}. */",
			"name": "com.google.inject.internal.MissingImplementationErrorHints",
			"extends": "",
			"Methods": [
				{
					"signature": "private MissingImplementationErrorHints()",
					"documentation": "/** Helper class to find hints for {@link MissingImplementationError}. */"
				},
				{
					"signature": "static \u003cT\u003e ImmutableList\u003cString\u003e getSuggestions(Key\u003cT\u003e key, Injector injector)",
					"documentation": "/**\n   * If the key is unknown and it is one of these types, it generally means there is a missing\n   * annotation.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.BindingSourceRestriction"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.scanModulesForAnnotatedMethods} commands.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ModuleAnnotatedMethodScannerProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "ModuleAnnotatedMethodScannerProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.scanModulesForAnnotatedMethods} commands.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(ModuleAnnotatedMethodScannerBinding command)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Static methods for working with types that we aren't publishing in the public {@code Types} API.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.MoreTypes",
			"extends": "",
			"Methods": [
				{
					"signature": "private MoreTypes()",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT\u003e Key\u003cT\u003e canonicalizeKey(Key\u003cT\u003e key)",
					"documentation": "/**\n   * Returns a key that doesn't hold any references to parent classes. This is necessary for\n   * anonymous keys, so ensure we don't hold a ref to the containing module (or class) forever.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e TypeLiteral\u003cT\u003e canonicalizeForKey(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": "/**\n   * Returns an type that's appropriate for use in a key.\n   *\n   * \u003cp\u003eIf the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n   * {@code com.google.inject.Provider} with the same type parameters.\n   *\n   * \u003cp\u003eIf the type is a primitive, the corresponding wrapper type will be returned.\n   *\n   * @throws ConfigurationException if {@code type} contains a type variable\n   */"
				},
				{
					"signature": "private static boolean isFullySpecified(Type type)",
					"documentation": "/** Returns true if {@code type} is free from type variables. */"
				},
				{
					"signature": "public static Type canonicalize(Type type)",
					"documentation": "/**\n   * Returns a type that is functionally equal but not necessarily equal according to {@link\n   * Object#equals(Object) Object.equals()}. The returned type is {@link Serializable}.\n   */"
				},
				{
					"signature": "public static Class\u003c?\u003e getRawType(Type type)",
					"documentation": ""
				},
				{
					"signature": "public static boolean equals(Type a, Type b)",
					"documentation": "/** Returns true if {@code a} and {@code b} are equal. */"
				},
				{
					"signature": "private static int hashCodeOrZero(Object o)",
					"documentation": ""
				},
				{
					"signature": "public static String typeToString(Type type)",
					"documentation": ""
				},
				{
					"signature": "public static Type getGenericSupertype(Type type, Class\u003c?\u003e rawType, Class\u003c?\u003e toResolve)",
					"documentation": "/**\n   * Returns the generic supertype for {@code type}. For example, given a class {@code IntegerSet},\n   * the result for when supertype is {@code Set.class} is {@code Set\u003cInteger\u003e} and the result when\n   * the supertype is {@code Collection.class} is {@code Collection\u003cInteger\u003e}.\n   */"
				},
				{
					"signature": "public static Type resolveTypeVariable(Type type, Class\u003c?\u003e rawType, TypeVariable\u003c?\u003e unknown)",
					"documentation": ""
				},
				{
					"signature": "private static int indexOf(Object[] array, Object toFind)",
					"documentation": ""
				},
				{
					"signature": "private static Type[] getSharedTypeArguments(ParameterizedType p)",
					"documentation": "/**\n   * This method is used as a performance optimization to prevent unnecessary clones of\n   * typeArguments from being made by ParameterizedTypeImpl.\n   */"
				},
				{
					"signature": "private static Class\u003c?\u003e declaringClassOf(TypeVariable\u003c?\u003e typeVariable)",
					"documentation": "/**\n   * Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by\n   * a class.\n   */"
				},
				{
					"signature": "private static void checkNotPrimitive(Type type, String use)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.util.TypesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.MoreTypes.GenericArrayTypeImpl",
				"com.google.inject.internal.MoreTypes.WildcardTypeImpl"
			],
			"usedBy": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.MoreTypes.ParameterizedTypeImpl",
				"com.google.inject.internal.MoreTypes.GenericArrayTypeImpl",
				"com.google.inject.internal.MoreTypes.WildcardTypeImpl",
				"com.google.inject.internal.CompositeType"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MoreTypes.ParameterizedTypeImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Type[] getActualTypeArguments()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Type getRawType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Type getOwnerType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isFullySpecified()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "private static void ensureOwnerType(Type ownerType, Type rawType)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.ParameterizedType",
				"java.io.Serializable",
				"com.google.inject.internal.CompositeType"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MoreTypesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Types"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MoreTypes.GenericArrayTypeImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public GenericArrayTypeImpl(Type componentType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Type getGenericComponentType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isFullySpecified()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.GenericArrayType",
				"java.io.Serializable",
				"com.google.inject.internal.CompositeType"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.util.Types"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * The WildcardType interface supports multiple upper bounds and multiple lower bounds. We only\n   * support what the Java 6 language needs - at most one bound. If a lower bound is set, the upper\n   * bound must be Object.class.\n   */",
			"name": "com.google.inject.internal.MoreTypes.WildcardTypeImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds)",
					"documentation": "/**\n   * The WildcardType interface supports multiple upper bounds and multiple lower bounds. We only\n   * support what the Java 6 language needs - at most one bound. If a lower bound is set, the upper\n   * bound must be Object.class.\n   */"
				},
				{
					"signature": "@Override\n    public Type[] getUpperBounds()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Type[] getLowerBounds()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isFullySpecified()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.WildcardType",
				"java.io.Serializable",
				"com.google.inject.internal.CompositeType"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.util.Types"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** A type formed from other types, such as arrays, parameterized types or wildcard types */",
			"name": "com.google.inject.internal.CompositeType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.MoreTypes.ParameterizedTypeImpl",
				"com.google.inject.internal.MoreTypes.GenericArrayTypeImpl",
				"com.google.inject.internal.MoreTypes.WildcardTypeImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Whether a member supports null values injected.\n *\n * \u003cp\u003eSupport for {@code Nullable} annotations in Guice is loose. Any annotation type whose\n * simplename is \"Nullable\" is sufficient to indicate support for null values injected.\n *\n * \u003cp\u003eThis allows support for JSR-305's \u003ca\n * href=\"http://groups.google.com/group/jsr-305/web/proposed-annotations\"\u003e\n * javax.annotation.meta.Nullable\u003c/a\u003e annotation and IntelliJ IDEA's \u003ca\n * href=\"http://www.jetbrains.com/idea/documentation/howto.html\"\u003e\n * org.jetbrains.annotations.Nullable\u003c/a\u003e.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Nullability",
			"extends": "",
			"Methods": [
				{
					"signature": "private Nullability()",
					"documentation": "/**\n * Whether a member supports null values injected.\n *\n * \u003cp\u003eSupport for {@code Nullable} annotations in Guice is loose. Any annotation type whose\n * simplename is \"Nullable\" is sufficient to indicate support for null values injected.\n *\n * \u003cp\u003eThis allows support for JSR-305's \u003ca\n * href=\"http://groups.google.com/group/jsr-305/web/proposed-annotations\"\u003e\n * javax.annotation.meta.Nullable\u003c/a\u003e annotation and IntelliJ IDEA's \u003ca\n * href=\"http://www.jetbrains.com/idea/documentation/howto.html\"\u003e\n * org.jetbrains.annotations.Nullable\u003c/a\u003e.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public static boolean hasNullableAnnotation(Annotation[] annotations)",
					"documentation": "/** Returns true if the given annotation array contains an annotation named {@code Nullable}. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Munges an error message to remove/shorten package names and adds a legend at the end.\n */",
			"name": "com.google.inject.internal.PackageNameCompressor",
			"extends": "",
			"Methods": [
				{
					"signature": "static String compressPackagesInMessage(String input)",
					"documentation": "/**\n   * Compresses an error message by stripping the packages out of class names and adding them\n   * to a legend at the bottom of the error.\n   */"
				},
				{
					"signature": "private static ImmutableSet\u003cString\u003e replaceFullNames(\n      String input, Map\u003cString, String\u003e replacementMap, StringBuilder output)",
					"documentation": "/**\n   * Replaces full class names in {@code input} and append the replaced content to {@code output}\n   * and then returns a set of short names that were used as replacement.\n   *\n   * \u003cp\u003eString literals that are quoted in the {@code input} will be added to the {@code output}\n   * unchanged. So any full class name that only appear in the string literal will not be included\n   * in the returned short names set.\n   */"
				},
				{
					"signature": "private static String buildClassNameLegend(Map\u003cString, String\u003e replacementMap)",
					"documentation": ""
				},
				{
					"signature": "private static Map\u003cString, String\u003e shortenNames(Collection\u003cString\u003e names)",
					"documentation": "/**\n   * Returns a map from short name to full name after resolving conflicts. This resolves conflicts\n   * by adding on segments of the package name until they are unique. For example, com.foo.Baz and\n   * com.bar.Baz will conflict on Baz and then resolve with foo.Baz and bar.Baz as replacements.\n   */"
				},
				{
					"signature": "private PackageNameCompressor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.newPrivateBinder()} elements.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.PrivateElementProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "PrivateElementProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.newPrivateBinder()} elements.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cInjectorShell.Builder\u003e getInjectorShellBuilders()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.PrivateElementsImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public PrivateElementsImpl(Object source)",
					"documentation": "/** lazily instantiated */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public List\u003cElement\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Injector getInjector()",
					"documentation": ""
				},
				{
					"signature": "public void initInjector(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cKey\u003c?\u003e\u003e getExposedKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cElement\u003e getElementsMutable()",
					"documentation": ""
				},
				{
					"signature": "public void addExposureBuilder(ExposureBuilder\u003c?\u003e exposureBuilder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object getExposedSource(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.PrivateElements"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Keeps track of creation listeners and uninitialized bindings, so they can be processed after\n * bindings are recorded.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ProcessedBindingData",
			"extends": "",
			"Methods": [
				{
					"signature": "void addCreationListener(CreationListener listener)",
					"documentation": "/**\n * Keeps track of creation listeners and uninitialized bindings, so they can be processed after\n * bindings are recorded.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "void addUninitializedBinding(Runnable runnable)",
					"documentation": ""
				},
				{
					"signature": "void addDelayedUninitializedBinding(Runnable runnable)",
					"documentation": ""
				},
				{
					"signature": "void initializeBindings()",
					"documentation": "/** Initialize bindings. This may be done eagerly */"
				},
				{
					"signature": "void runCreationListeners(Errors errors)",
					"documentation": "/**\n   * Runs creation listeners.\n   *\n   * \u003cp\u003eTODO(lukes): figure out exactly why this case exists.\n   */"
				},
				{
					"signature": "void initializeDelayedBindings()",
					"documentation": "/**\n   * Initialized bindings that need to be delayed until after all injection points and other\n   * bindings are processed. The main current usecase for this is resolving Optional dependencies\n   * for OptionalBinder bindings.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An {@link InternalFactory} for {@literal @}{@link ProvidedBy} bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ProvidedByInternalFactory",
			"extends": "com.google.inject.internal.ProviderInternalFactory",
			"Methods": [
				{
					"signature": "ProvidedByInternalFactory(\n      Class\u003c?\u003e rawType,\n      Class\u003c? extends Provider\u003c?\u003e\u003e providerType,\n      Key\u003c? extends Provider\u003cT\u003e\u003e providerKey)",
					"documentation": "/**\n * An {@link InternalFactory} for {@literal @}{@link ProvidedBy} bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "void setProvisionListenerCallback(ProvisionListenerStackCallback\u003cT\u003e listener)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get(InternalContext context, Dependency\u003c?\u003e dependency, boolean linked)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected T provision(\n      javax.inject.Provider\u003c? extends T\u003e provider,\n      Dependency\u003c?\u003e dependency,\n      ConstructionContext\u003cT\u003e constructionContext)\n      throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.DelayedInitialize"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProviderInstanceBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "public ProviderInstanceBindingImpl(\n      InjectorImpl injector,\n      Key\u003cT\u003e key,\n      Object source,\n      InternalFactory\u003c? extends T\u003e internalFactory,\n      Scoping scoping,\n      javax.inject.Provider\u003c? extends T\u003e providerInstance,\n      Set\u003cInjectionPoint\u003e injectionPoints)",
					"documentation": ""
				},
				{
					"signature": "public ProviderInstanceBindingImpl(\n      Object source,\n      Key\u003cT\u003e key,\n      Scoping scoping,\n      Set\u003cInjectionPoint\u003e injectionPoints,\n      javax.inject.Provider\u003c? extends T\u003e providerInstance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "public Provider\u003c? extends T\u003e getProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public javax.inject.Provider\u003c? extends T\u003e getUserSuppliedProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cInjectionPoint\u003e getInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderInstanceBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.InternalProviderInstanceBindingImpl"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Providers"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Base class for InternalFactories that are used by Providers, to handle circular dependencies.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ProviderInternalFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "ProviderInternalFactory(Object source)",
					"documentation": "/**\n * Base class for InternalFactories that are used by Providers, to handle circular dependencies.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "protected T circularGet(\n      final Provider\u003c? extends T\u003e provider,\n      InternalContext context,\n      final Dependency\u003c?\u003e dependency,\n      @Nullable ProvisionListenerStackCallback\u003cT\u003e provisionCallback)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "protected T provision(\n      Provider\u003c? extends T\u003e provider,\n      Dependency\u003c?\u003e dependency,\n      ConstructionContext\u003cT\u003e constructionContext)\n      throws InternalProvisionException",
					"documentation": "/**\n   * Provisions a new instance. Subclasses should override this to catch exceptions and rethrow as\n   * ErrorsExceptions.\n   */"
				}
			],
			"interfaces": [
				"com.google.inject.internal.InternalFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.BoundProviderFactory",
				"com.google.inject.internal.InternalFactoryToInitializableAdapter",
				"com.google.inject.internal.ProvidedByInternalFactory"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A provider that invokes a method and returns its result.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ProviderMethod",
			"extends": "InternalProviderInstanceBindingImpl.CyclicFactory",
			"Methods": [
				{
					"signature": "static \u003cT\u003e ProviderMethod\u003cT\u003e create(\n      Key\u003cT\u003e key,\n      Method method,\n      Object instance,\n      ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies,\n      Class\u003c? extends Annotation\u003e scopeAnnotation,\n      boolean skipFastClassGeneration,\n      Annotation annotation)",
					"documentation": "/**\n   * Creates a {@link ProviderMethod}.\n   *\n   * \u003cp\u003eUnless {@code skipFastClassGeneration} is set, this will use bytecode generation to invoke\n   * the actual method, since it is significantly faster. However, this may fail if the method is\n   * {@code private} or {@code protected}, since this approach is subject to java access policies.\n   */"
				},
				{
					"signature": "ProviderMethod(\n      Key\u003cT\u003e key,\n      Method method,\n      Object instance,\n      ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies,\n      Class\u003c? extends Annotation\u003e scopeAnnotation,\n      Annotation annotation)",
					"documentation": "/** @param method the method to invoke. Its return type must be the same type as {@code key}. */"
				},
				{
					"signature": "@Override\n  public Key\u003cT\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Method getMethod()",
					"documentation": ""
				},
				{
					"signature": "public Object getInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object getEnclosingInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Annotation getAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected T doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n      throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": "/** Extension point for our subclasses to implement the provisioning strategy. */"
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public \u003cB, V\u003e V acceptExtensionVisitor(\n      BindingTargetVisitor\u003cB, V\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.HasDependencies",
				"com.google.inject.spi.ProvidesMethodBinding",
				"com.google.inject.spi.ProviderWithExtensionVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.ProviderMethod.FastClassProviderMethod",
				"com.google.inject.internal.ProviderMethod.ReflectionProviderMethod"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.ProviderMethod.FastClassProviderMethod",
				"com.google.inject.internal.ProviderMethod.ReflectionProviderMethod",
				"com.google.inject.internal.util.StackTraceElements"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.ProviderMethod.FastClassProviderMethod",
				"com.google.inject.internal.ProviderMethod.ReflectionProviderMethod"
			]
		},
		{
			"documentation": "/**\n   * A {@link ProviderMethod} implementation that uses bytecode generation to invoke the provider\n   * method.\n   */",
			"name": "com.google.inject.internal.ProviderMethod.FastClassProviderMethod",
			"extends": "com.google.inject.internal.ProviderMethod",
			"Methods": [
				{
					"signature": "FastClassProviderMethod(\n        Key\u003cT\u003e key,\n        Method method,\n        Object instance,\n        ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies,\n        Class\u003c? extends Annotation\u003e scopeAnnotation,\n        Annotation annotation,\n        BiFunction\u003cObject, Object[], Object\u003e fastMethod)",
					"documentation": "/**\n   * A {@link ProviderMethod} implementation that uses bytecode generation to invoke the provider\n   * method.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T doProvision(Object[] parameters) throws InvocationTargetException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProviderMethod"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A {@link ProviderMethod} implementation that invokes the method using normal java reflection.\n   */",
			"name": "com.google.inject.internal.ProviderMethod.ReflectionProviderMethod",
			"extends": "com.google.inject.internal.ProviderMethod",
			"Methods": [
				{
					"signature": "ReflectionProviderMethod(\n        Key\u003cT\u003e key,\n        Method method,\n        Object instance,\n        ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies,\n        Class\u003c? extends Annotation\u003e scopeAnnotation,\n        Annotation annotation)",
					"documentation": "/**\n   * A {@link ProviderMethod} implementation that invokes the method using normal java reflection.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    T doProvision(Object[] parameters) throws IllegalAccessException, InvocationTargetException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProviderMethod"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates bindings to methods annotated with {@literal @}{@link Provides}. Use the scope and\n * binding annotations on the provider method to configure the binding.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ProviderMethodsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "private ProviderMethodsModule(\n      Object delegate, boolean skipFastClassGeneration, ModuleAnnotatedMethodScanner scanner)",
					"documentation": "/**\n * Creates bindings to methods annotated with {@literal @}{@link Provides}. Use the scope and\n * binding annotations on the provider method to configure the binding.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public static Module forModule(Module module)",
					"documentation": "/** Returns a module which creates bindings for provider methods from the given module. */"
				},
				{
					"signature": "public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner)",
					"documentation": "/** Returns a module which creates bindings methods in the module that match the scanner. */"
				},
				{
					"signature": "public static Module forObject(Object object)",
					"documentation": "/**\n   * Returns a module which creates bindings for provider methods from the given object. This is\n   * useful notably for \u003ca href=\"http://code.google.com/p/google-gin/\"\u003eGIN\u003c/a\u003e\n   *\n   * \u003cp\u003eThis will skip bytecode generation for provider methods, since it is assumed that callers\n   * are only interested in Module metadata.\n   */"
				},
				{
					"signature": "private static Module forObject(\n      Object object, boolean skipFastClassGeneration, ModuleAnnotatedMethodScanner scanner)",
					"documentation": ""
				},
				{
					"signature": "public Class\u003c?\u003e getDelegateModuleClass()",
					"documentation": ""
				},
				{
					"signature": "private boolean isStaticModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cProviderMethod\u003c?\u003e\u003e getProviderMethods(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "private Annotation getAnnotation(Binder binder, Method method)",
					"documentation": "/** Returns the annotation that is claimed by the scanner, or null if there is none. */"
				},
				{
					"signature": "private static boolean overrides(Method a, Method b)",
					"documentation": "/** Returns true if a overrides b, assumes that the signatures match */"
				},
				{
					"signature": "private \u003cT\u003e ProviderMethod\u003cT\u003e createProviderMethod(\n      Binder binder, Method method, Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e Key\u003cT\u003e getKey(Errors errors, TypeLiteral\u003cT\u003e type, Member member, Annotation[] annotations)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "public boolean isScanningBuiltInProvidesMethods()",
					"documentation": "/** Is it scanning the built-in @Provides* methods. */"
				},
				{
					"signature": "public ModuleAnnotatedMethodScanner getScanner()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.ProviderMethodsModule.MethodAndAnnotation",
				"com.google.inject.internal.ProviderMethodsModule.Signature",
				"com.google.inject.spi.InjectionPoint"
			],
			"usedBy": [
				"com.google.inject.spi.Elements",
				"com.google.inject.spi.Elements.RecordingBinder"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.ProviderMethodsModule.MethodAndAnnotation",
				"com.google.inject.internal.ProviderMethodsModule.Signature"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProviderMethodsModule.MethodAndAnnotation",
			"extends": "",
			"Methods": [
				{
					"signature": "MethodAndAnnotation(Method method, Annotation annotation)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProviderMethodsModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProviderMethodsModule.Signature",
			"extends": "",
			"Methods": [
				{
					"signature": "Signature(TypeLiteral\u003c?\u003e typeLiteral, Method method)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProviderMethodsModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.internal.ProviderToInternalFactoryAdapter",
			"extends": "",
			"Methods": [
				{
					"signature": "public ProviderToInternalFactoryAdapter(\n      InjectorImpl injector, InternalFactory\u003c? extends T\u003e internalFactory)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n  public T get()",
					"documentation": ""
				},
				{
					"signature": "InjectorImpl getInjector()",
					"documentation": "/** Exposed for SingletonScope. */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A {@link ModuleAnnotatedMethodScanner} that handles the {@Provides}, {@link ProvidesIntoSet},\n * {@link ProvidesIntoMap} and {@link ProvidesIntoOptional} annotations.\n *\n * \u003cp\u003eThis is the default scanner used by ProviderMethodsModule and handles all the built in\n * annotations.\n */",
			"name": "com.google.inject.internal.ProvidesMethodScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "private ProvidesMethodScanner()",
					"documentation": "/**\n * A {@link ModuleAnnotatedMethodScanner} that handles the {@Provides}, {@link ProvidesIntoSet},\n * {@link ProvidesIntoMap} and {@link ProvidesIntoOptional} annotations.\n *\n * \u003cp\u003eThis is the default scanner used by ProviderMethodsModule and handles all the built in\n * annotations.\n */"
				},
				{
					"signature": "@Override\n  public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n  @Override\n  public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n      Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "private static AnnotationOrError findMapKeyAnnotation(Binder binder, Method method)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static TypeAndValue\u003c?\u003e typeAndValueOfMapKey(Annotation mapKeyAnnotation)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.ProvidesMethodScanner.AnnotationOrError",
				"com.google.inject.internal.ProvidesMethodScanner.TypeAndValue"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.ProvidesMethodScanner.AnnotationOrError",
				"com.google.inject.internal.ProvidesMethodScanner.TypeAndValue"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProvidesMethodScanner.AnnotationOrError",
			"extends": "",
			"Methods": [
				{
					"signature": "AnnotationOrError(Annotation annotation, boolean error)",
					"documentation": ""
				},
				{
					"signature": "static AnnotationOrError forPossiblyNullAnnotation(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "static AnnotationOrError forError()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProvidesMethodScanner"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProvidesMethodScanner.TypeAndValue",
			"extends": "",
			"Methods": [
				{
					"signature": "TypeAndValue(TypeLiteral\u003cT\u003e type, T value)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProvidesMethodScanner"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ProvisionListenerStackCallback} for each key.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ProvisionListenerCallbackStore",
			"extends": "",
			"Methods": [
				{
					"signature": "ProvisionListenerCallbackStore(List\u003cProvisionListenerBinding\u003e listenerBindings)",
					"documentation": "/**\n * {@link ProvisionListenerStackCallback} for each key.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@SuppressWarnings(\n      \"unchecked\") \n  public \u003cT\u003e ProvisionListenerStackCallback\u003cT\u003e get(Binding\u003cT\u003e binding)",
					"documentation": "/**\n   * Returns a new {@link ProvisionListenerStackCallback} for the key or {@code null} if there are\n   * no listeners\n   */"
				},
				{
					"signature": "boolean remove(Binding\u003c?\u003e type)",
					"documentation": "/**\n   * Purges a key from the cache. Use this only if the type is not actually valid for binding and\n   * needs to be purged. (See issue 319 and\n   * ImplicitBindingTest#testCircularJitBindingsLeaveNoResidue and\n   * #testInstancesRequestingProvidersForThemselvesWithChildInjectors for examples of when this is\n   * necessary.)\n   *\n   * \u003cp\u003eReturns true if the type was stored in the cache, false otherwise.\n   */"
				},
				{
					"signature": "private \u003cT\u003e ProvisionListenerStackCallback\u003cT\u003e create(Binding\u003cT\u003e binding)",
					"documentation": "/**\n   * Creates a new {@link ProvisionListenerStackCallback} with the correct listeners for the key.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.ProvisionListenerCallbackStore.KeyBinding"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.ProvisionListenerCallbackStore.KeyBinding"
			]
		},
		{
			"documentation": "/** A struct that holds key and binding but uses just key for equality/hashcode. */",
			"name": "com.google.inject.internal.ProvisionListenerCallbackStore.KeyBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "KeyBinding(Key\u003c?\u003e key, Binding\u003c?\u003e binding)",
					"documentation": "/** A struct that holds key and binding but uses just key for equality/hashcode. */"
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProvisionListenerCallbackStore"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Intercepts provisions with a stack of listeners.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.ProvisionListenerStackCallback",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  public static \u003cT\u003e ProvisionListenerStackCallback\u003cT\u003e emptyListener()",
					"documentation": "/**\n * Intercepts provisions with a stack of listeners.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public ProvisionListenerStackCallback(Binding\u003cT\u003e binding, List\u003cProvisionListener\u003e listeners)",
					"documentation": ""
				},
				{
					"signature": "public boolean hasListeners()",
					"documentation": ""
				},
				{
					"signature": "public T provision(InternalContext context, ProvisionCallback\u003cT\u003e callable)\n      throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Provision"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.ProvisionCallback",
				"com.google.inject.internal.Provision"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProvisionCallback",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Provision",
			"extends": "com.google.inject.spi.ProvisionListener.ProvisionInvocation",
			"Methods": [
				{
					"signature": "public Provision(ProvisionCallback\u003cT\u003e callable)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T provision()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Binding\u003cT\u003e getBinding()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProvisionListenerStackCallback"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds a construction proxy that can participate in AOP. This class manages applying type and\n * method matchers to come up with the set of intercepted methods.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ProxyFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "ProxyFactory(InjectionPoint injectionPoint, Iterable\u003cMethodAspect\u003e methodAspects)\n      throws ErrorsException",
					"documentation": "/**\n * Builds a construction proxy that can participate in AOP. This class manages applying type and\n * method matchers to come up with the set of intercepted methods.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public ImmutableMap\u003cMethod, List\u003cMethodInterceptor\u003e\u003e getInterceptors()",
					"documentation": "/** Returns the interceptors that apply to the constructed type. */"
				},
				{
					"signature": "@Override\n  public ConstructionProxy\u003cT\u003e create() throws ErrorsException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.ConstructionProxyFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.ProxyFactory.ProxyConstructor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.ProxyFactory.ProxyConstructor"
			]
		},
		{
			"documentation": "/** Constructs instances that participate in AOP. */",
			"name": "com.google.inject.internal.ProxyFactory.ProxyConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n    ProxyConstructor(\n        InjectionPoint injectionPoint,\n        Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e enhancer,\n        ImmutableMap\u003cMethod, List\u003cMethodInterceptor\u003e\u003e interceptors,\n        InvocationHandler[] callbacks)",
					"documentation": "/** Constructs instances that participate in AOP. */"
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\") \n    public T newInstance(Object... arguments) throws InvocationTargetException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Constructor\u003cT\u003e getConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableMap\u003cMethod, List\u003cMethodInterceptor\u003e\u003e getMethodInterceptors()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.ConstructionProxy"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProxyFactory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** An implementation of Element. */",
			"name": "com.google.inject.internal.RealElement",
			"extends": "",
			"Methods": [
				{
					"signature": "RealElement(String setName, Element.Type type, String keyType)",
					"documentation": "/** An implementation of Element. */"
				},
				{
					"signature": "RealElement(String setName, Element.Type type, String keyType, int uniqueId)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String setName()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int uniqueId()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Element.Type type()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String keyType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The actual mapbinder plays several roles:\n *\n * \u003cp\u003eAs a MapBinder, it acts as a factory for LinkedBindingBuilders for each of the map's values.\n * It delegates to a {@link Multibinder} of entries (keys to value providers).\n *\n * \u003cp\u003eAs a Module, it installs the binding to the map itself, as well as to a corresponding map\n * whose values are providers.\n *\n * \u003cp\u003eAs a module, this implements equals() and hashcode() in order to trick Guice into executing\n * its configure() method only once. That makes it so that multiple mapbinders can be created for\n * the same target map, but only one is bound. Since the list of bindings is retrieved from the\n * injector itself (and not the mapbinder), each mapbinder has access to all contributions from all\n * equivalent mapbinders.\n *\n * \u003cp\u003eRather than binding a single Map.Entry\u0026lt;K, V\u0026gt;, the map binder binds keys and values\n * independently. This allows the values to be properly scoped.\n */",
			"name": "com.google.inject.internal.RealMapBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cK, V\u003e RealMapBinder\u003cK, V\u003e newMapRealBinder(\n      Binder binder, TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with no binding annotation.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e RealMapBinder\u003cK, V\u003e newRealMapBinder(\n      Binder binder, TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType, Annotation annotation)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotation}.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e RealMapBinder\u003cK, V\u003e newRealMapBinder(\n      Binder binder,\n      TypeLiteral\u003cK\u003e keyType,\n      TypeLiteral\u003cV\u003e valueType,\n      Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotationType}.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, V\u003e\u003e mapOf(TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, Provider\u003cV\u003e\u003e\u003e mapOfProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, javax.inject.Provider\u003cV\u003e\u003e\u003e mapOfJavaxProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e\u003e mapOfSetOfProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, Set\u003cjavax.inject.Provider\u003cV\u003e\u003e\u003e\u003e mapOfSetOfJavaxProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap\u003cK, Collection\u003cProvider\u003cV\u003e\u003e\u003e\u003e mapOfCollectionOfProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e\n      TypeLiteral\u003cMap\u003cK, Collection\u003cjavax.inject.Provider\u003cV\u003e\u003e\u003e\u003e mapOfCollectionOfJavaxProviderOf(\n          TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e entryOfProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e TypeLiteral\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e entryOfJavaxProviderOf(\n      TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cK, V\u003e\n      TypeLiteral\u003cSet\u003cMap.Entry\u003cK, javax.inject.Provider\u003cV\u003e\u003e\u003e\u003e setOfEntryOfJavaxProviderOf(\n          TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cT\u003e Key\u003cProvider\u003cT\u003e\u003e getKeyOfProvider(Key\u003cT\u003e valueKey)",
					"documentation": "/** Given a {@code Key\u003cT\u003e} will return a {@code Key\u003cProvider\u003cT\u003e\u003e}. */"
				},
				{
					"signature": "static \u003cK, V\u003e RealMapBinder\u003cK, V\u003e newRealMapBinder(\n      Binder binder, TypeLiteral\u003cK\u003e keyType, Key\u003cV\u003e valueTypeAndAnnotation)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK, V\u003e RealMapBinder\u003cK, V\u003e newRealMapBinder(\n      Binder binder,\n      TypeLiteral\u003cK\u003e keyType,\n      TypeLiteral\u003cV\u003e valueType,\n      Key\u003cMap\u003cK, V\u003e\u003e mapKey,\n      RealMultibinder\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e entrySetBinder)",
					"documentation": ""
				},
				{
					"signature": "private RealMapBinder(\n      Binder binder,\n      TypeLiteral\u003cK\u003e keyType,\n      TypeLiteral\u003cV\u003e valueType,\n      Key\u003cMap\u003cK, V\u003e\u003e mapKey,\n      RealMultibinder\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e entrySetBinder)",
					"documentation": ""
				},
				{
					"signature": "public void permitDuplicates()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cV\u003e getKeyForNewValue(K key)",
					"documentation": "/** Adds a binding to the map for the given key. */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cV\u003e addBinding(K key)",
					"documentation": "/**\n   * This creates two bindings. One for the {@code Map.Entry\u003cK, Provider\u003cV\u003e\u003e} and another for {@code\n   * V}.\n   */"
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK, V\u003e InternalProvisionException createNullValueException(\n      K key, Binding\u003cV\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.RealMapBinder.RealProviderMapProvider",
				"com.google.inject.internal.RealMapBinder.RealMapProvider",
				"com.google.inject.internal.RealMapBinder.ExtensionRealMapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealProviderMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider.PerKeyData",
				"com.google.inject.internal.RealMapBinder.ProviderMapEntry",
				"com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
				"com.google.inject.internal.RealMapBinder.RealMultimapBinderProviderWithDependencies",
				"com.google.inject.spi.Dependency",
				"com.google.inject.util.Types"
			],
			"usedBy": [
				"com.google.inject.multibindings.MapBinder"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.RealMapBinder.BindingSelection",
				"com.google.inject.internal.RealMapBinder.RealProviderMapProvider",
				"com.google.inject.internal.RealMapBinder.RealMapProvider",
				"com.google.inject.internal.RealMapBinder.ExtensionRealMapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder",
				"com.google.inject.internal.RealMapBinder.ProviderMapEntry",
				"com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
				"com.google.inject.internal.RealMapBinder.RealMultimapBinderProviderWithDependencies"
			]
		},
		{
			"documentation": "/**\n   * The BindingSelection contains some of the core state and logic for the MapBinder.\n   *\n   * \u003cp\u003eIt lazily computes the value for keys for various permutations of Maps that are provided by\n   * this module. It also builds up maps from {@code K} to {@code Binding\u003cV\u003e}, which is used by all\n   * of the internal factories to actually provide the desired maps.\n   *\n   * \u003cp\u003eDuring initialization time there is only one BindingSelection. It is possible that multiple\n   * different BindingSelections are constructed. Specifically, in the case of two different modules\n   * each adding bindings to the same MapBinder. If that happens, we define the BindingSelection\n   * held by the {@link RealMapProvider} to be the authoritative one. The logic for this exists in\n   * {@link RealMultimapBinderProviderWithDependencies}. This is done to avoid confusion because the\n   * BindingSelection contains mutable state.\n   */",
			"name": "com.google.inject.internal.RealMapBinder.BindingSelection",
			"extends": "",
			"Methods": [
				{
					"signature": "private BindingSelection(\n        TypeLiteral\u003cK\u003e keyType,\n        TypeLiteral\u003cV\u003e valueType,\n        Key\u003cMap\u003cK, V\u003e\u003e mapKey,\n        RealMultibinder\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e entrySetBinder)",
					"documentation": "/**\n     * Indicates if this Map permits duplicates. It is initialized during initialization by querying\n     * the injector. This is done because multiple different modules can contribute to a MapBinder,\n     * and any one could set permitDuplicates.\n     */"
				},
				{
					"signature": "private boolean tryInitialize(InjectorImpl injector, Errors errors)",
					"documentation": "/**\n     * Will initialize internal data structures.\n     *\n     * @return {@code true} if initialization was successful, {@code false} if there were errors\n     */"
				},
				{
					"signature": "private static \u003cK, V\u003e void reportDuplicateKeysError(\n        Key\u003cMap\u003cK, V\u003e\u003e mapKey, Multimap\u003cK, Binding\u003cV\u003e\u003e duplicates, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "private boolean containsElement(Element element)",
					"documentation": ""
				},
				{
					"signature": "private boolean matchesValueKey(Key\u003c?\u003e key)",
					"documentation": "/** Returns true if the key indicates this is a value in the map. */"
				},
				{
					"signature": "private Key\u003cMap\u003cK, Provider\u003cV\u003e\u003e\u003e getProviderMapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, javax.inject.Provider\u003cV\u003e\u003e\u003e getJavaxProviderMapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, Set\u003cV\u003e\u003e\u003e getMultimapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e\u003e getProviderSetMultimapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, Set\u003cjavax.inject.Provider\u003cV\u003e\u003e\u003e\u003e getJavaxProviderSetMultimapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, Collection\u003cProvider\u003cV\u003e\u003e\u003e\u003e getProviderCollectionMultimapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, Collection\u003cjavax.inject.Provider\u003cV\u003e\u003e\u003e\u003e\n        getJavaxProviderCollectionMultimapKey()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cSet\u003cMap.Entry\u003cK, javax.inject.Provider\u003cV\u003e\u003e\u003e\u003e getEntrySetJavaxProviderKey()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    private Key\u003cMap\u003cK, ? extends V\u003e\u003e getMapOfKeyExtendsValueKey()",
					"documentation": ""
				},
				{
					"signature": "private ImmutableMap\u003cK, Binding\u003cV\u003e\u003e getMapBindings()",
					"documentation": ""
				},
				{
					"signature": "private ImmutableMap\u003cK, Set\u003cBinding\u003cV\u003e\u003e\u003e getMultimapBindings()",
					"documentation": ""
				},
				{
					"signature": "private ImmutableList\u003cMap.Entry\u003cK, Binding\u003cV\u003e\u003e\u003e getEntries()",
					"documentation": ""
				},
				{
					"signature": "private boolean isInitialized()",
					"documentation": ""
				},
				{
					"signature": "private TypeLiteral\u003cK\u003e getKeyType()",
					"documentation": ""
				},
				{
					"signature": "private TypeLiteral\u003cV\u003e getValueType()",
					"documentation": ""
				},
				{
					"signature": "private Key\u003cMap\u003cK, V\u003e\u003e getMapKey()",
					"documentation": ""
				},
				{
					"signature": "private RealMultibinder\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e\u003e getEntrySetBinder()",
					"documentation": ""
				},
				{
					"signature": "private boolean permitsDuplicates()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.util.Types"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.InitializationState"
			]
		},
		{
			"documentation": "/**\n   * The BindingSelection contains some of the core state and logic for the MapBinder.\n   *\n   * \u003cp\u003eIt lazily computes the value for keys for various permutations of Maps that are provided by\n   * this module. It also builds up maps from {@code K} to {@code Binding\u003cV\u003e}, which is used by all\n   * of the internal factories to actually provide the desired maps.\n   *\n   * \u003cp\u003eDuring initialization time there is only one BindingSelection. It is possible that multiple\n   * different BindingSelections are constructed. Specifically, in the case of two different modules\n   * each adding bindings to the same MapBinder. If that happens, we define the BindingSelection\n   * held by the {@link RealMapProvider} to be the authoritative one. The logic for this exists in\n   * {@link RealMultimapBinderProviderWithDependencies}. This is done to avoid confusion because the\n   * BindingSelection contains mutable state.\n   */",
			"name": "com.google.inject.internal.InitializationState",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealMapBinder.RealProviderMapProvider",
			"extends": "com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "private RealProviderMapProvider(BindingSelection\u003cK, V\u003e bindingSelection)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void doInitialize(InjectorImpl injector, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Map\u003cK, Provider\u003cV\u003e\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealMapBinder.RealMapProvider",
			"extends": "com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "RealMapProvider(BindingSelection\u003cK, V\u003e bindingSelection)",
					"documentation": "/**\n     * An array of all the injectors.\n     *\n     * \u003cp\u003eThis is parallel to array of keys below\n     */"
				},
				{
					"signature": "BindingSelection\u003cK, V\u003e getBindingSelection()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void doInitialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Map\u003cK, V\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Implementation of a provider instance for the map that also exposes details about the MapBinder\n   * using the extension SPI, delegating to another provider instance for non-extension (e.g, the\n   * actual provider instance info) data.\n   */",
			"name": "com.google.inject.internal.RealMapBinder.ExtensionRealMapProvider",
			"extends": "com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "ExtensionRealMapProvider(RealMapProvider\u003cK, V\u003e delegate)",
					"documentation": "/**\n   * Implementation of a provider instance for the map that also exposes details about the MapBinder\n   * using the extension SPI, delegating to another provider instance for non-extension (e.g, the\n   * actual provider instance info) data.\n   */"
				},
				{
					"signature": "BindingSelection\u003cK, V\u003e getBindingSelection()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void doInitialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Map\u003cK, V\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cB, W\u003e W acceptExtensionVisitor(\n        BindingTargetVisitor\u003cB, W\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003cMap\u003cK, V\u003e\u003e getMapKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cKey\u003c?\u003e\u003e getAlternateMapKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeLiteral\u003cK\u003e getKeyTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeLiteral\u003cV\u003e getValueTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public List\u003cMap.Entry\u003c?, Binding\u003c?\u003e\u003e\u003e getEntries()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public List\u003cMap.Entry\u003c?, Binding\u003c?\u003e\u003e\u003e getEntries(Iterable\u003c? extends Element\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean permitsDuplicates()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean containsElement(Element element)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor",
				"com.google.inject.multibindings.MapBinderBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Binds {@code Map\u003cK, Set\u003cV\u003e\u003e} and {{@code Map\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e}.\n   *\n   * \u003cp\u003eThis will only exist if permitDuplicates() is called.\n   */",
			"name": "com.google.inject.internal.RealMapBinder.MultimapBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "private MultimapBinder(BindingSelection\u003cK, V\u003e bindingSelection)",
					"documentation": "/**\n   * Binds {@code Map\u003cK, Set\u003cV\u003e\u003e} and {{@code Map\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e}.\n   *\n   * \u003cp\u003eThis will only exist if permitDuplicates() is called.\n   */"
				},
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealProviderMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider.PerKeyData",
				"com.google.inject.spi.Dependency"
			],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealProviderMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealMapBinder.MultimapBinder.RealProviderMultimapProvider",
			"extends": "com.google.inject.internal.RealMapBinder.RealMultimapBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "private RealProviderMultimapProvider(Key\u003cMap\u003cK, V\u003e\u003e mapKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void doInitialize(InjectorImpl injector, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected Map\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e doProvision(\n          InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider",
			"extends": "com.google.inject.internal.RealMapBinder.RealMultimapBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "private RealMultimapProvider(Key\u003cMap\u003cK, V\u003e\u003e mapKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void doInitialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected Map\u003cK, Set\u003cV\u003e\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n          throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider.PerKeyData",
				"com.google.inject.spi.Dependency"
			],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider.PerKeyData"
			]
		},
		{
			"documentation": "/**\n       * A simple class to hold a key and the associated bindings as an array.\n       *\n       * \u003cp\u003eArrays are used for performance.\n       */",
			"name": "com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider.PerKeyData",
			"extends": "",
			"Methods": [
				{
					"signature": "private PerKeyData(K key, Binding\u003cV\u003e[] bindings, SingleParameterInjector\u003cV\u003e[] injectors)",
					"documentation": "/**\n       * A simple class to hold a key and the associated bindings as an array.\n       *\n       * \u003cp\u003eArrays are used for performance.\n       */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A factory for a {@code Map.Entry\u003cK, Provider\u003cV\u003e\u003e}. */",
			"name": "com.google.inject.internal.RealMapBinder.ProviderMapEntry",
			"extends": "InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "ProviderMapEntry(K key, Key\u003cV\u003e valueKey)",
					"documentation": "/** A factory for a {@code Map.Entry\u003cK, Provider\u003cV\u003e\u003e}. */"
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    void initialize(InjectorImpl injector, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Map.Entry\u003cK, Provider\u003cV\u003e\u003e doProvision(\n        InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "K getKey()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cV\u003e getValueKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A base class for ProviderWithDependencies that need equality based on a specific object. */",
			"name": "com.google.inject.internal.RealMapBinder.RealMapBinderProviderWithDependencies",
			"extends": "InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "private RealMapBinderProviderWithDependencies(BindingSelection\u003cK, V\u003e bindingSelection)",
					"documentation": "/** A base class for ProviderWithDependencies that need equality based on a specific object. */"
				},
				{
					"signature": "@Override\n    final void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": "/**\n     * Initialize the factory. BindingSelection is guaranteed to be initialized at this point and\n     * this will be called prior to any provisioning.\n     */"
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.RealMapBinder.RealProviderMapProvider",
				"com.google.inject.internal.RealMapBinder.RealMapProvider",
				"com.google.inject.internal.RealMapBinder.ExtensionRealMapProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A base class for ProviderWithDependencies that need equality based on a specific object.\n   *\n   * \u003cp\u003eThis differs from {@link RealMapBinderProviderWithDependencies} in that it gets the {@code\n   * bindingSelection} from the injector at initialization time, rather than in the constructor.\n   * This is done to allow all the providers to operate on the same instance of the {@link\n   * BindingSelection}.\n   */",
			"name": "com.google.inject.internal.RealMapBinder.RealMultimapBinderProviderWithDependencies",
			"extends": "InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "private RealMultimapBinderProviderWithDependencies(Key\u003cMap\u003cK, V\u003e\u003e mapKey)",
					"documentation": "/**\n   * A base class for ProviderWithDependencies that need equality based on a specific object.\n   *\n   * \u003cp\u003eThis differs from {@link RealMapBinderProviderWithDependencies} in that it gets the {@code\n   * bindingSelection} from the injector at initialization time, rather than in the constructor.\n   * This is done to allow all the providers to operate on the same instance of the {@link\n   * BindingSelection}.\n   */"
				},
				{
					"signature": "@Override\n    final void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": "/**\n     * This will get the authoritative {@link BindingSelection} from the map provider. This\n     * guarantees that everyone has the same instance of the bindingSelection and sees consistent\n     * state.\n     */"
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": "/**\n     * Initialize the factory. BindingSelection is guaranteed to be initialized at this point and\n     * this will be called prior to any provisioning.\n     */"
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealProviderMultimapProvider",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMapBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The actual multibinder plays several roles:\n *\n * \u003cp\u003eAs a Multibinder, it acts as a factory for LinkedBindingBuilders for each of the set's\n * elements. Each binding is given an annotation that identifies it as a part of this set.\n *\n * \u003cp\u003eAs a Module, it installs the binding to the set itself. As a module, this implements equals()\n * and hashcode() in order to trick Guice into executing its configure() method only once. That\n * makes it so that multiple multibinders can be created for the same target collection, but only\n * one is bound. Since the list of bindings is retrieved from the injector itself (and not the\n * multibinder), each multibinder has access to all contributions from all multibinders.\n *\n * \u003cp\u003eAs a Provider, this constructs the set instances.\n *\n * \u003cp\u003eWe use a subclass to hide 'implements Module, Provider' from the public API.\n */",
			"name": "com.google.inject.internal.RealMultibinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cT\u003e RealMultibinder\u003cT\u003e newRealSetBinder(Binder binder, Key\u003cT\u003e key)",
					"documentation": "/** Implementation of newSetBinder. */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cT\u003e TypeLiteral\u003cSet\u003cT\u003e\u003e setOf(TypeLiteral\u003cT\u003e elementType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cCollection\u003cProvider\u003cT\u003e\u003e\u003e collectionOfProvidersOf(\n      TypeLiteral\u003cT\u003e elementType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cCollection\u003cjavax.inject.Provider\u003cT\u003e\u003e\u003e collectionOfJavaxProvidersOf(\n      TypeLiteral\u003cT\u003e elementType)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cSet\u003c? extends T\u003e\u003e setOfExtendsOf(TypeLiteral\u003cT\u003e elementType)",
					"documentation": ""
				},
				{
					"signature": "RealMultibinder(Binder binder, Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public void permitDuplicates()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cT\u003e getKeyForNewItem()",
					"documentation": "/** Adds a new entry to the set and returns the key for it. */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e addBinding()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cSet\u003cT\u003e\u003e getSetKey()",
					"documentation": ""
				},
				{
					"signature": "TypeLiteral\u003cT\u003e getElementTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "String getSetName()",
					"documentation": ""
				},
				{
					"signature": "boolean permitsDuplicates(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "boolean containsElement(com.google.inject.spi.Element element)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.RealMultibinder.BaseFactory",
				"com.google.inject.internal.RealMultibinder.RealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.ExtensionRealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.RealMultibinderCollectionOfProvidersProvider",
				"com.google.inject.internal.RealMultibinder.BindingSelection",
				"com.google.inject.internal.RealMultibinder.PermitDuplicatesModule",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Message",
				"com.google.inject.util.Types"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.RealMultibinder.BaseFactory",
				"com.google.inject.internal.RealMultibinder.RealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.ExtensionRealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.RealMultibinderCollectionOfProvidersProvider",
				"com.google.inject.internal.RealMultibinder.BindingSelection",
				"com.google.inject.internal.RealMultibinder.PermitDuplicatesModule"
			]
		},
		{
			"documentation": "/**\n   * Base implement of {@link InternalProviderInstanceBindingImpl.Factory} that works based on a\n   * {@link BindingSelection}, allowing provider instances for various bindings to be implemented\n   * with less duplication.\n   */",
			"name": "com.google.inject.internal.RealMultibinder.BaseFactory",
			"extends": "InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "BaseFactory(\n        BindingSelection\u003cValueT\u003e bindingSelection,\n        Function\u003cBindingSelection\u003cValueT\u003e, ImmutableSet\u003cDependency\u003c?\u003e\u003e\u003e dependenciesFn)",
					"documentation": "/**\n   * Base implement of {@link InternalProviderInstanceBindingImpl.Factory} that works based on a\n   * {@link BindingSelection}, allowing provider instances for various bindings to be implemented\n   * with less duplication.\n   */"
				},
				{
					"signature": "@Override\n    void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.RealMultibinder.RealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.ExtensionRealMultibinderProvider",
				"com.google.inject.internal.RealMultibinder.RealMultibinderCollectionOfProvidersProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Provider instance implementation that provides the actual set of values. This is parameterized\n   * so it can be used to supply a {@code Set\u003cT\u003e} and {@code Set\u003c? extends T\u003e}, the latter being\n   * useful for Kotlin support.\n   */",
			"name": "com.google.inject.internal.RealMultibinder.RealMultibinderProvider",
			"extends": "com.google.inject.internal.RealMultibinder.BaseFactory",
			"Methods": [
				{
					"signature": "RealMultibinderProvider(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/**\n   * Provider instance implementation that provides the actual set of values. This is parameterized\n   * so it can be used to supply a {@code Set\u003cT\u003e} and {@code Set\u003c? extends T\u003e}, the latter being\n   * useful for Kotlin support.\n   */"
				},
				{
					"signature": "@Override\n    protected void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected ImmutableSet\u003cT\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "private InternalProvisionException newNullEntryException(int i)",
					"documentation": ""
				},
				{
					"signature": "private InternalProvisionException newDuplicateValuesException(T[] values)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Implementation of BaseFactory that exposes details about the multibinder through the extension\n   * SPI.\n   */",
			"name": "com.google.inject.internal.RealMultibinder.ExtensionRealMultibinderProvider",
			"extends": "com.google.inject.internal.RealMultibinder.BaseFactory",
			"Methods": [
				{
					"signature": "ExtensionRealMultibinderProvider(RealMultibinderProvider\u003cT\u003e delegate)",
					"documentation": "/**\n   * Implementation of BaseFactory that exposes details about the multibinder through the extension\n   * SPI.\n   */"
				},
				{
					"signature": "@Override\n    protected void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected ImmutableSet\u003cT\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cB, V\u003e V acceptExtensionVisitor(\n        BindingTargetVisitor\u003cB, V\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003cSet\u003cT\u003e\u003e getSetKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableSet\u003cKey\u003c?\u003e\u003e getAlternateSetKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeLiteral\u003c?\u003e getElementTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public List\u003cBinding\u003c?\u003e\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean permitsDuplicates()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean containsElement(com.google.inject.spi.Element element)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor",
				"com.google.inject.multibindings.MultibinderBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Implementation of BaseFactory that exposes a collection of providers of the values in the set.\n   */",
			"name": "com.google.inject.internal.RealMultibinder.RealMultibinderCollectionOfProvidersProvider",
			"extends": "com.google.inject.internal.RealMultibinder.BaseFactory",
			"Methods": [
				{
					"signature": "RealMultibinderCollectionOfProvidersProvider(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/**\n   * Implementation of BaseFactory that exposes a collection of providers of the values in the set.\n   */"
				},
				{
					"signature": "@Override\n    protected void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected ImmutableList\u003cProvider\u003cT\u003e\u003e doProvision(\n        InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealMultibinder.BindingSelection",
			"extends": "",
			"Methods": [
				{
					"signature": "BindingSelection(Key\u003cT\u003e key)",
					"documentation": "/** whether duplicates are allowed. Possibly configured by a different instance */"
				},
				{
					"signature": "void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "boolean permitsDuplicates(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "ImmutableList\u003cBinding\u003cT\u003e\u003e getBindings()",
					"documentation": ""
				},
				{
					"signature": "SingleParameterInjector\u003cT\u003e[] getParameterInjectors()",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cDependency\u003c?\u003e\u003e getProviderDependencies()",
					"documentation": ""
				},
				{
					"signature": "String getSetName()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cBoolean\u003e getPermitDuplicatesKey()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cCollection\u003cProvider\u003cT\u003e\u003e\u003e getCollectionOfProvidersKey()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cCollection\u003cjavax.inject.Provider\u003cT\u003e\u003e\u003e getCollectionOfJavaxProvidersKey()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cSet\u003c? extends T\u003e\u003e getSetOfExtendsKey()",
					"documentation": ""
				},
				{
					"signature": "boolean isInitialized()",
					"documentation": ""
				},
				{
					"signature": "TypeLiteral\u003cT\u003e getElementTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cSet\u003cT\u003e\u003e getSetKey()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    List\u003cBinding\u003c?\u003e\u003e getElements()",
					"documentation": ""
				},
				{
					"signature": "boolean permitsDuplicates()",
					"documentation": ""
				},
				{
					"signature": "boolean containsElement(com.google.inject.spi.Element element)",
					"documentation": ""
				},
				{
					"signature": "private boolean keyMatches(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.Errors",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Dependency"
			],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * We install the permit duplicates configuration as its own binding, all by itself. This way, if\n   * only one of a multibinder's users remember to call permitDuplicates(), they're still permitted.\n   *\n   * \u003cp\u003eThis is like setting a global variable in the injector so that each instance of the\n   * multibinder will have the same value for permitDuplicates, even if it is only set on one of\n   * them.\n   */",
			"name": "com.google.inject.internal.RealMultibinder.PermitDuplicatesModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "PermitDuplicatesModule(Key\u003cBoolean\u003e key)",
					"documentation": "/**\n   * We install the permit duplicates configuration as its own binding, all by itself. This way, if\n   * only one of a multibinder's users remember to call permitDuplicates(), they're still permitted.\n   *\n   * \u003cp\u003eThis is like setting a global variable in the injector so that each instance of the\n   * multibinder will have the same value for permitDuplicates, even if it is only set on one of\n   * them.\n   */"
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealMultibinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The actual OptionalBinder plays several roles. It implements Module to hide that fact from the\n * public API, and installs the various bindings that are exposed to the user.\n */",
			"name": "com.google.inject.internal.RealOptionalBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cT\u003e RealOptionalBinder\u003cT\u003e newRealOptionalBinder(Binder binder, Key\u003cT\u003e type)",
					"documentation": "/**\n * The actual OptionalBinder plays several roles. It implements Module to hide that fact from the\n * public API, and installs the various bindings that are exposed to the user.\n */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cOptional\u003cT\u003e\u003e optionalOf(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cjava.util.Optional\u003cT\u003e\u003e javaOptionalOf(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cOptional\u003cjavax.inject.Provider\u003cT\u003e\u003e\u003e optionalOfJavaxProvider(\n      TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cjava.util.Optional\u003cjavax.inject.Provider\u003cT\u003e\u003e\u003e javaOptionalOfJavaxProvider(\n      TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cOptional\u003cProvider\u003cT\u003e\u003e\u003e optionalOfProvider(TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e TypeLiteral\u003cjava.util.Optional\u003cProvider\u003cT\u003e\u003e\u003e javaOptionalOfProvider(\n      TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e Key\u003cProvider\u003cT\u003e\u003e providerOf(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private RealOptionalBinder(Binder binder, Key\u003cT\u003e typeKey)",
					"documentation": ""
				},
				{
					"signature": "private void addDirectTypeBinding(Binder binder)",
					"documentation": "/**\n   * Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\n   * bindings.\n   */"
				},
				{
					"signature": "Key\u003cT\u003e getKeyForDefaultBinding()",
					"documentation": "/**\n   * Returns the key to use for the default binding.\n   *\n   * \u003cp\u003eAs a side effect this installs support for the 'direct type', so a binding for {@code T}\n   * will be made available.\n   */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e setDefault()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cT\u003e getKeyForActualBinding()",
					"documentation": "/**\n   * Returns the key to use for the actual binding, overrides the default if set.\n   *\n   * \u003cp\u003eAs a side effect this installs support for the 'direct type', so a binding for {@code T}\n   * will be made available.\n   */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e setBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProvider",
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealDirectTypeProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalKeyProvider",
				"com.google.inject.internal.RealOptionalBinder.BindingSelection",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
				"com.google.inject.internal.RealOptionalBinder.DefaultImpl",
				"com.google.inject.internal.RealOptionalBinder.ActualImpl",
				"com.google.inject.internal.RealOptionalBinder.BaseAnnotation",
				"com.google.inject.util.Types"
			],
			"usedBy": [
				"com.google.inject.multibindings.OptionalBinder"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.Source",
				"com.google.inject.internal.Default",
				"com.google.inject.internal.Actual",
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProvider",
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealDirectTypeProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalKeyProvider",
				"com.google.inject.internal.RealOptionalBinder.BindingSelection",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
				"com.google.inject.internal.RealOptionalBinder.DefaultImpl",
				"com.google.inject.internal.RealOptionalBinder.ActualImpl",
				"com.google.inject.internal.RealOptionalBinder.BaseAnnotation"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Source",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Default",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Actual",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Provides the binding for {@code java.util.Optional\u003cT\u003e}. */",
			"name": "com.google.inject.internal.RealOptionalBinder.JavaOptionalProvider",
			"extends": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "JavaOptionalProvider(\n        BindingSelection\u003cT\u003e bindingSelection, Key\u003cjava.util.Optional\u003cT\u003e\u003e optionalKey)",
					"documentation": "/** Provides the binding for {@code java.util.Optional\u003cT\u003e}. */"
				},
				{
					"signature": "@Override\n    void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected java.util.Optional\u003cT\u003e doProvision(\n        InternalContext context, Dependency\u003c?\u003e currentDependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cB, R\u003e R acceptExtensionVisitor(\n        BindingTargetVisitor\u003cB, R\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean containsElement(Element element)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Binding\u003c?\u003e getActualBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Binding\u003c?\u003e getDefaultBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003cjava.util.Optional\u003cT\u003e\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cKey\u003c?\u003e\u003e getAlternateKeys()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor",
				"com.google.inject.multibindings.OptionalBinderBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Provides the binding for {@code java.util.Optional\u003cProvider\u003cT\u003e\u003e}. */",
			"name": "com.google.inject.internal.RealOptionalBinder.JavaOptionalProviderProvider",
			"extends": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "JavaOptionalProviderProvider(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/** Provides the binding for {@code java.util.Optional\u003cProvider\u003cT\u003e\u003e}. */"
				},
				{
					"signature": "@Override\n    void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected java.util.Optional\u003cProvider\u003cT\u003e\u003e doProvision(\n        InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Provides the binding for T, conditionally installed by calling setBinding/setDefault. */",
			"name": "com.google.inject.internal.RealOptionalBinder.RealDirectTypeProvider",
			"extends": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "RealDirectTypeProvider(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/** Provides the binding for T, conditionally installed by calling setBinding/setDefault. */"
				},
				{
					"signature": "@Override\n    void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected T doProvision(InternalContext context, Dependency\u003c?\u003e dependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Provides the binding for {@code Optional\u003cProvider\u003cT\u003e\u003e}. */",
			"name": "com.google.inject.internal.RealOptionalBinder.RealOptionalProviderProvider",
			"extends": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "RealOptionalProviderProvider(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/** Provides the binding for {@code Optional\u003cProvider\u003cT\u003e\u003e}. */"
				},
				{
					"signature": "@Override\n    void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Optional\u003cProvider\u003cT\u003e\u003e doProvision(InternalContext context, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Provides the binding for {@code Optional\u003cT\u003e}. */",
			"name": "com.google.inject.internal.RealOptionalBinder.RealOptionalKeyProvider",
			"extends": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"Methods": [
				{
					"signature": "RealOptionalKeyProvider(BindingSelection\u003cT\u003e bindingSelection, Key\u003cOptional\u003cT\u003e\u003e optionalKey)",
					"documentation": "/** Provides the binding for {@code Optional\u003cT\u003e}. */"
				},
				{
					"signature": "@Override\n    void doInitialize()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Optional\u003cT\u003e doProvision(InternalContext context, Dependency\u003c?\u003e currentDependency)\n        throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public \u003cB, R\u003e R acceptExtensionVisitor(\n        BindingTargetVisitor\u003cB, R\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Key\u003cOptional\u003cT\u003e\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cKey\u003c?\u003e\u003e getAlternateKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Binding\u003c?\u003e getActualBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Binding\u003c?\u003e getDefaultBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean containsElement(Element element)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor",
				"com.google.inject.multibindings.OptionalBinderBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A helper object that implements the core logic for deciding what the implementation of the\n   * binding will be.\n   *\n   * \u003cp\u003eThis also implements the main OptionalBinderBinding logic.\n   */",
			"name": "com.google.inject.internal.RealOptionalBinder.BindingSelection",
			"extends": "",
			"Methods": [
				{
					"signature": "BindingSelection(Key\u003cT\u003e key)",
					"documentation": "/** lazily allocated, by {@link #getKeyForActualBinding}. */"
				},
				{
					"signature": "void checkNotInitialized()",
					"documentation": ""
				},
				{
					"signature": "void initialize(InjectorImpl injector, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "private void checkBindingIsNotRecursive(Errors errors)",
					"documentation": ""
				},
				{
					"signature": "Key\u003cT\u003e getKeyForDefaultBinding()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cT\u003e getKeyForActualBinding()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cT\u003e getDirectKey()",
					"documentation": ""
				},
				{
					"signature": "private String getBindingName()",
					"documentation": ""
				},
				{
					"signature": "BindingImpl\u003cT\u003e getBinding()",
					"documentation": ""
				},
				{
					"signature": "BindingImpl\u003cT\u003e getDefaultBinding()",
					"documentation": ""
				},
				{
					"signature": "BindingImpl\u003cT\u003e getActualBinding()",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cDependency\u003c?\u003e\u003e providerDependencies()",
					"documentation": ""
				},
				{
					"signature": "ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies()",
					"documentation": ""
				},
				{
					"signature": "Dependency\u003c?\u003e getDependency()",
					"documentation": "/**\n     * Returns the Dependency for the target binding, throws NoSuchElementException if no target\n     * exists.\n     *\n     * \u003cp\u003eCalls to this method should typically be guarded by checking if {@link #getBinding()}\n     * returns {@code null}.\n     */"
				},
				{
					"signature": "boolean containsElement(Element element)",
					"documentation": "/** Implementation of {@link OptionalBinderBinding#containsElement}. */"
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors"
			],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A base class for ProviderWithDependencies that need equality based on a specific object. */",
			"name": "com.google.inject.internal.RealOptionalBinder.RealOptionalBinderProviderWithDependencies",
			"extends": "InternalProviderInstanceBindingImpl.Factory",
			"Methods": [
				{
					"signature": "RealOptionalBinderProviderWithDependencies(BindingSelection\u003cT\u003e bindingSelection)",
					"documentation": "/** A base class for ProviderWithDependencies that need equality based on a specific object. */"
				},
				{
					"signature": "@Override\n    final void initialize(InjectorImpl injector, Errors errors) throws ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": "/**\n     * Initialize the factory. BindingSelection is guaranteed to be initialized at this point and\n     * this will be called prior to any provisioning.\n     */"
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProvider",
				"com.google.inject.internal.RealOptionalBinder.JavaOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealDirectTypeProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalProviderProvider",
				"com.google.inject.internal.RealOptionalBinder.RealOptionalKeyProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealOptionalBinder.DefaultImpl",
			"extends": "com.google.inject.internal.RealOptionalBinder.BaseAnnotation",
			"Methods": [
				{
					"signature": "public DefaultImpl(String value)",
					"documentation": ""
				}
			],
			"interfaces": [
				"Default"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealOptionalBinder.ActualImpl",
			"extends": "com.google.inject.internal.RealOptionalBinder.BaseAnnotation",
			"Methods": [
				{
					"signature": "public ActualImpl(String value)",
					"documentation": ""
				}
			],
			"interfaces": [
				"Actual"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealOptionalBinder.BaseAnnotation",
			"extends": "",
			"Methods": [
				{
					"signature": "BaseAnnotation(Class\u003c? extends Annotation\u003e clazz, String value)",
					"documentation": ""
				},
				{
					"signature": "public String value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable",
				"java.lang.annotation.Annotation"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.RealOptionalBinder.DefaultImpl",
				"com.google.inject.internal.RealOptionalBinder.ActualImpl"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.RealOptionalBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.bindScope} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.ScopeBindingProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "ScopeBindingProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.bindScope} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "@Override\n  public Boolean visit(ScopeBinding command)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Error reported by Guice when a scope annotation is not bound to any scope implementation. */",
			"name": "com.google.inject.internal.ScopeNotFoundError",
			"extends": "com.google.inject.internal.InternalErrorDetail",
			"Methods": [
				{
					"signature": "ScopeNotFoundError(Class\u003c? extends Annotation\u003e scopeAnnotation, List\u003cObject\u003e sources)",
					"documentation": "/** Error reported by Guice when a scope annotation is not bound to any scope implementation. */"
				},
				{
					"signature": "@Override\n  public boolean isMergeable(ErrorDetail\u003c?\u003e other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public ScopeNotFoundError withSources(List\u003cObject\u003e newSources)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * References a scope, either directly (as a scope instance), or indirectly (as a scope annotation).\n * The scope's eager or laziness is also exposed.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.Scoping",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": "/**\n   * No scoping annotation has been applied. Note that this is different from {@code\n   * in(Scopes.NO_SCOPE)}, where the 'NO_SCOPE' has been explicitly applied.\n   */"
				},
				{
					"signature": "@Override\n        public Scope getScopeInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": "/**\n   * No scoping annotation has been applied explicitly. Note that this is is the same as {@code\n   * in(Scopes.NO_SCOPE)}.\n   */"
				},
				{
					"signature": "@Override\n        public Scope getScopeInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Class\u003c? extends Annotation\u003e getScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Scope getScopeInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Scope getScopeInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "public static Scoping forAnnotation(final Class\u003c? extends Annotation\u003e scopingAnnotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Class\u003c? extends Annotation\u003e getScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "public static Scoping forInstance(final Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public \u003cV\u003e V acceptVisitor(BindingScopingVisitor\u003cV\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Scope getScopeInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void applyTo(ScopedBindingBuilder scopedBindingBuilder)",
					"documentation": ""
				},
				{
					"signature": "public boolean isExplicitlyScoped()",
					"documentation": "/**\n   * Returns true if this scope was explicitly applied. If no scope was explicitly applied then the\n   * scoping annotation will be used.\n   */"
				},
				{
					"signature": "public boolean isNoScope()",
					"documentation": "/**\n   * Returns true if this is the default scope. In this case a new instance will be provided for\n   * each injection.\n   */"
				},
				{
					"signature": "public boolean isEagerSingleton(Stage stage)",
					"documentation": "/** Returns true if this scope is a singleton that should be loaded eagerly in {@code stage}. */"
				},
				{
					"signature": "public Scope getScopeInstance()",
					"documentation": "/** Returns the scope instance, or {@code null} if that isn't known for this instance. */"
				},
				{
					"signature": "public Class\u003c? extends Annotation\u003e getScopeAnnotation()",
					"documentation": "/** Returns the scope annotation, or {@code null} if that isn't known for this instance. */"
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "private Scoping()",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e InternalFactory\u003c? extends T\u003e scope(\n      Key\u003cT\u003e key,\n      InjectorImpl injector,\n      InternalFactory\u003c? extends T\u003e creator,\n      Object source,\n      Scoping scoping)",
					"documentation": "/** Scopes an internal factory. */"
				},
				{
					"signature": "static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors)",
					"documentation": "/**\n   * Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\n   * map. If the scope annotation has no corresponding instance, an error will be added and unscoped\n   * will be retuned.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Sets an injectable field. */",
			"name": "com.google.inject.internal.SingleFieldInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "public SingleFieldInjector(InjectorImpl injector, InjectionPoint injectionPoint, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Sets an injectable field. */"
				},
				{
					"signature": "@Override\n  public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void inject(InternalContext context, Object o) throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.SingleMemberInjector"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Injects a field or method of a given object. */",
			"name": "com.google.inject.internal.SingleMemberInjector",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.SingleFieldInjector",
				"com.google.inject.internal.SingleMethodInjector"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Invokes an injectable method. */",
			"name": "com.google.inject.internal.SingleMethodInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "SingleMethodInjector(InjectorImpl injector, InjectionPoint injectionPoint, Errors errors)\n      throws ErrorsException",
					"documentation": "/** Invokes an injectable method. */"
				},
				{
					"signature": "private MethodInvoker createMethodInvoker(final Method method)",
					"documentation": ""
				},
				{
					"signature": "@Override\n            public Object invoke(Object target, Object... parameters)\n                throws InvocationTargetException",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Object invoke(Object target, Object... parameters)\n          throws IllegalAccessException, InvocationTargetException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void inject(InternalContext context, Object o) throws InternalProvisionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.SingleMemberInjector"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Resolves a single parameter, to be used in a constructor or method invocation. */",
			"name": "com.google.inject.internal.SingleParameterInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "private static final Object[] NO_ARGUMENTS =",
					"documentation": "/** Resolves a single parameter, to be used in a constructor or method invocation. */"
				},
				{
					"signature": "SingleParameterInjector(Dependency\u003cT\u003e dependency, BindingImpl\u003c? extends T\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "T inject(InternalContext context) throws InternalProvisionException",
					"documentation": ""
				},
				{
					"signature": "static Object[] getAll(InternalContext context, SingleParameterInjector\u003c?\u003e[] parameterInjectors)\n      throws InternalProvisionException",
					"documentation": "/** Returns an array of parameter values. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * One instance per {@link Injector}. Also see {@code @}{@link Singleton}.\n *\n * \u003cp\u003eIntroduction from the author: Implementation of this class seems unreasonably complicated at\n * the first sight. I fully agree with you, that the beast below is very complex and it's hard to\n * reason on how does it work or not. Still I want to assure you that hundreds(?) of hours were\n * thrown into making this code simple, while still maintaining Singleton contract.\n *\n * \u003cp\u003eAnyway, why is it so complex? Singleton scope does not seem to be that unique.\n *\n * \u003col\u003e\n *   \u003cli\u003eGuice has never truly expected to be used in multi threading environment with many\n *       Injectors working alongside each other. There is almost no code with Guice that propagates\n *       state between threads. And Singleton scope is The exception.\n *   \u003cli\u003eGuice supports circular dependencies and thus manages proxy objects. There is no interface\n *       that allows user defined Scopes to create proxies, it is expected to be done by Guice.\n *       Singleton scope needs to be able to detect circular dependencies spanning several threads,\n *       therefore Singleton scope needs to be able to create these proxies.\n *   \u003cli\u003eTo make things worse, Guice has a very tricky definition for a binding resolution when\n *       Injectors are in in a parent/child relationship. And Scope does not have access to this\n *       information by design, the only real action that Scope can do is to call or not to call a\n *       creator.\n *   \u003cli\u003eThere is no readily available code in Guice that can detect a potential deadlock, and no\n *       code for handling dependency cycles spanning several threads. This is significantly harder\n *       as all the dependencies in a thread at runtime can be represented with a list, where in a\n *       multi threaded environment we have more complex dependency trees.\n *   \u003cli\u003eGuice has a pretty strong contract regarding Garbage Collection, which often prevents us\n *       from linking objects directly. So simple domain specific code can not be written and\n *       intermediary id objects need to be managed.\n *   \u003cli\u003eGuice is relatively fast and we should not make things worse. We're trying our best to\n *       optimize synchronization for speed and memory. Happy path should be almost as fast as in a\n *       single threaded solution and should not take much more memory.\n *   \u003cli\u003eError message generation in Guice was not meant to be used like this and to work around its\n *       APIs we need a lot of code. Additional complexity comes from inherent data races as message\n *       is only generated when failure occurs on proxy object generation. Things get ugly pretty\n *       fast.\n * \u003c/ol\u003e\n *\n * @see #scope(Key, Provider)\n * @see CycleDetectingLock\n * @author timofeyb (Timothy Basanov)\n */",
			"name": "com.google.inject.internal.SingletonScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e scope(final Key\u003cT\u003e key, final Provider\u003cT\u003e creator)",
					"documentation": "/**\n   * Provides singleton scope with the following properties:\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003ecreates no more than one instance per Key as a creator is used no more than once\n   *   \u003cli\u003eresult is cached and returned quickly on subsequent calls\n   *   \u003cli\u003eexception in a creator is not treated as instance creation and is not cached\n   *   \u003cli\u003ecreates singletons in parallel whenever possible\n   *   \u003cli\u003ewaits for dependent singletons to be created even across threads and when dependencies\n   *       are shared as long as no circular dependencies are detected\n   *   \u003cli\u003ereturns circular proxy only when circular dependencies are detected\n   *   \u003cli\u003easide from that, blocking synchronization is only used for proxy creation and\n   *       initialization\n   * \u003c/ul\u003e\n   *\n   * @see CycleDetectingLockFactory\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"DoubleCheckedLocking\")\n      @Override\n      public T get()",
					"documentation": ""
				},
				{
					"signature": "private Message createCycleDependenciesMessage(\n          ListMultimap\u003cThread, Key\u003c?\u003e\u003e locksCycle, @Nullable Message proxyCreationError)",
					"documentation": "/**\n       * Helper method to create beautiful and rich error descriptions. Best effort and slow. Tries\n       * its best to provide dependency information from injectors currently available in a global\n       * internal context.\n       *\n       * \u003cp\u003eThe main thing being done is creating a list of Dependencies involved into lock cycle\n       * across all the threads involved. This is a structure we're creating:\n       *\n       * \u003cpre\u003e\n       * { Current Thread, C.class, B.class, Other Thread, B.class, C.class, Current Thread }\n       * To be inserted in the beginning by Guice: { A.class, B.class, C.class }\n       * \u003c/pre\u003e\n       *\n       * When we're calling Guice to create A and it fails in the deadlock while trying to create C,\n       * which is being created by another thread, which waits for B. List would be reversed before\n       * printing it to the end user.\n       */"
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provider",
				"com.google.inject.ProvisionException",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.Scopes"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Formatting a single source in Guice error message. */",
			"name": "com.google.inject.internal.SourceFormatter",
			"extends": "",
			"Methods": [
				{
					"signature": "SourceFormatter(Object source, Formatter formatter, boolean omitPreposition)",
					"documentation": "/** Formatting a single source in Guice error message. */"
				},
				{
					"signature": "void format()",
					"documentation": ""
				},
				{
					"signature": "private String preposition(String prepostition)",
					"documentation": ""
				},
				{
					"signature": "private void formatDependency(Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "private void formatKey(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private void formatMember(Member member)",
					"documentation": ""
				},
				{
					"signature": "private void formatInjectionPoint(Dependency\u003c?\u003e dependency, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "static String getModuleStack(ElementSource elementSource)",
					"documentation": ""
				},
				{
					"signature": "static String getParameterName(Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "private static String getOrdinalSuffix(int ordinal)",
					"documentation": "/**\n   * Maps {@code 1} to the string {@code \"1st\"} ditto for all non-negative numbers\n   *\n   * @see \u003ca href=\"https://en.wikipedia.org/wiki/English_numerals#Ordinal_numbers\"\u003e\n   *     https://en.wikipedia.org/wiki/English_numerals#Ordinal_numbers\u003c/a\u003e\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.Classes",
				"com.google.inject.internal.util.StackTraceElements"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Handles {@code Binder.convertToTypes} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.internal.TypeConverterBindingProcessor",
			"extends": "com.google.inject.internal.AbstractProcessor",
			"Methods": [
				{
					"signature": "TypeConverterBindingProcessor(Errors errors)",
					"documentation": "/**\n * Handles {@code Binder.convertToTypes} commands.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "static void prepareBuiltInConverters(InjectorImpl injector)",
					"documentation": "/** Installs default converters for primitives, enums, and class literals. */"
				},
				{
					"signature": "private static \u003cT\u003e void convertToPrimitiveType(\n      InjectorImpl injector, Class\u003cT\u003e primitiveType, final Class\u003cT\u003e wrapperType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n            public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n            public String toString()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e void convertToClass(\n      InjectorImpl injector, Class\u003cT\u003e type, TypeConverter converter)",
					"documentation": ""
				},
				{
					"signature": "private static void convertToClasses(\n      InjectorImpl injector, final Matcher\u003c? super Class\u003c?\u003e\u003e typeMatcher, TypeConverter converter)",
					"documentation": ""
				},
				{
					"signature": "private static void internalConvertToTypes(\n      InjectorImpl injector, Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeConverter converter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Boolean visit(TypeConverterBinding command)",
					"documentation": ""
				},
				{
					"signature": "private static String capitalize(String s)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.AbstractMatcher",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.spi.TypeConverter",
				"com.google.inject.spi.TypeConverterBinding"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.UniqueAnnotations",
			"extends": "",
			"Methods": [
				{
					"signature": "private UniqueAnnotations()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public static Annotation create()",
					"documentation": "/**\n   * Returns an annotation instance that is not equal to any other annotation instances, for use in\n   * creating distinct {@link com.google.inject.Key}s.\n   */"
				},
				{
					"signature": "static Annotation create(final int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.servlet.FiltersModuleBuilder",
				"com.google.inject.servlet.FilterKeyBindingBuilderImpl",
				"com.google.inject.servlet.ServletsModuleBuilder",
				"com.google.inject.servlet.ServletKeyBindingBuilderImpl",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule",
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.SecondaryBinder"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.Internal"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Internal",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.UntargettedBindingImpl",
			"extends": "com.google.inject.internal.BindingImpl",
			"Methods": [
				{
					"signature": "UntargettedBindingImpl(InjectorImpl injector, Key\u003cT\u003e key, Object source)",
					"documentation": ""
				},
				{
					"signature": "public UntargettedBindingImpl(Object source, Key\u003cT\u003e key, Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cV\u003e V acceptTargetVisitor(BindingTargetVisitor\u003c? super T, V\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withScoping(Scoping scoping)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public BindingImpl\u003cT\u003e withKey(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.UntargettedBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Processes just UntargettedBindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.UntargettedBindingProcessor",
			"extends": "com.google.inject.internal.AbstractBindingProcessor",
			"Methods": [
				{
					"signature": "UntargettedBindingProcessor(Errors errors, ProcessedBindingData processedBindingData)",
					"documentation": "/**\n * Processes just UntargettedBindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Boolean visit(Binding\u003cT\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Minimal set that doesn't hold strong references to the contained keys.\n *\n * @author dweis@google.com (Daniel Weis)\n */",
			"name": "com.google.inject.internal.WeakKeySet",
			"extends": "",
			"Methods": [
				{
					"signature": "private void cleanupOnRemoval(\n      RemovalNotification\u003cInjectorBindingData, Set\u003cKeyAndSource\u003e\u003e notification)",
					"documentation": "/**\n   * Tracks child injector lifetimes and evicts banned keys/sources after the child injector is\n   * garbage collected.\n   */"
				},
				{
					"signature": "WeakKeySet(Object lock)",
					"documentation": ""
				},
				{
					"signature": "public void add(Key\u003c?\u003e key, InjectorBindingData state, Object source)",
					"documentation": ""
				},
				{
					"signature": "public boolean contains(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cObject\u003e getSources(Key\u003c?\u003e key)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.WeakKeySet.KeyAndSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.WeakKeySet.KeyAndSource"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.WeakKeySet.KeyAndSource",
			"extends": "",
			"Methods": [
				{
					"signature": "KeyAndSource(Key\u003c?\u003e key, Object source)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.WeakKeySet"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Support code for generating enhancer/fast-class glue.\n *\n * \u003cp\u003eEach glue class has a trampoline that accepts an index, context object, and argument array:\n *\n * \u003cpre\u003e\n * public static Object GUICE$TRAMPOLINE(int index, Object context, Object[] args) {\n *   switch (index) {\n *     case 0: {\n *       return ...;\n *     }\n *     case 1: {\n *       return ...;\n *     }\n *   }\n *   return null;\n * }\n * \u003c/pre\u003e\n *\n * Each indexed statement in the trampoline invokes a constructor or method, returning the result.\n * The expected context object depends on the statement; it could be the invocation target, some\n * additional constructor context, or it may be unused. Arguments are unpacked from the array onto\n * the call stack, unboxing or casting them as necessary. Primitive results are autoboxed before\n * being returned.\n *\n * \u003cp\u003eWhere possible the trampoline is converted into a lookup {@link Function} mapping an integer\n * to an invoker function, each invoker represented as a {@link BiFunction} that accepts a context\n * object plus argument array and returns the result. These functional interfaces are used to avoid\n * introducing a dependency from the glue class to Guice specific types. This means the glue class\n * can be loaded anywhere that can see the host class, it doesn't need access to Guice's own {@link\n * ClassLoader}. (In other words it removes any need for bridge {@link ClassLoader}s.)\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.AbstractGlueGenerator",
			"extends": "",
			"Methods": [
				{
					"signature": "protected AbstractGlueGenerator(Class\u003c?\u003e hostClass, String marker)",
					"documentation": "/**\n   * The trampoline method takes an index, along with a context object and an array of argument\n   * objects, and invokes the appropriate constructor/method returning the result as an object.\n   */"
				},
				{
					"signature": "private static String proxyName(String hostName, String marker, int hash)",
					"documentation": "/** Generates a unique name based on the original class name and marker. */"
				},
				{
					"signature": "public final Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e glue(\n      NavigableMap\u003cString, Executable\u003e glueMap)",
					"documentation": "/** Generates the enhancer/fast-class and returns a mapping from signature to invoker. */"
				},
				{
					"signature": "private static Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e bindSignaturesToInvokers(\n      ToIntFunction\u003cString\u003e signatureTable, MethodHandle invokerTable)",
					"documentation": "/** Combines the signature and invoker tables into a mapping from signature to invoker. */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cE extends Throwable\u003e RuntimeException asIfUnchecked(Throwable e) throws E",
					"documentation": "/** Generics trick to get compiler to treat given exception as if unchecked (as JVM does). */"
				},
				{
					"signature": "protected final void generateTrampoline(ClassWriter cw, Collection\u003cExecutable\u003e members)",
					"documentation": "/**\n   * Generate trampoline that takes an index, along with a context object and array of argument\n   * objects, and invokes the appropriate constructor/method returning the result as an object.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.aop.Enhancer",
				"com.google.inject.internal.aop.FastClass"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code sun.misc.Unsafe#defineAnonymousClass}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.AnonymousClassDefiner",
			"extends": "",
			"Methods": [
				{
					"signature": "static",
					"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code sun.misc.Unsafe#defineAnonymousClass}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n  public Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.aop.ClassDefiner"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility methods to generate common bytecode tasks.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.BytecodeTasks",
			"extends": "",
			"Methods": [
				{
					"signature": "private BytecodeTasks()",
					"documentation": "/**\n * Utility methods to generate common bytecode tasks.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "public static void pushInteger(MethodVisitor mv, int value)",
					"documentation": "/** Pushes an integer onto the stack, choosing the most efficient opcode. */"
				},
				{
					"signature": "public static void packArguments(MethodVisitor mv, Class\u003c?\u003e[] parameterTypes)",
					"documentation": "/** Packs local arguments into an argument array on the Java stack. */"
				},
				{
					"signature": "public static void unpackArguments(MethodVisitor mv, Class\u003c?\u003e[] parameterTypes)",
					"documentation": "/** Unpacks an array of arguments and pushes them onto the Java stack. */"
				},
				{
					"signature": "public static int loadArgument(MethodVisitor mv, Class\u003c?\u003e parameterType, int slot)",
					"documentation": "/** Loads a local argument onto the Java stack and returns the size of the argument. */"
				},
				{
					"signature": "public static void box(MethodVisitor mv, Type primitiveType)",
					"documentation": "/** Boxes a primitive value on the Java stack. */"
				},
				{
					"signature": "public static void unbox(MethodVisitor mv, Type primitiveType)",
					"documentation": "/** Unboxes a boxed value on the Java stack. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.aop.Enhancer",
				"com.google.inject.internal.aop.FastClass"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using child {@link ClassLoader}s.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ChildClassDefiner",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode) throws Exception",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e T doPrivileged(PrivilegedAction\u003cT\u003e action)",
					"documentation": "/** Utility method to remove doPrivileged ambiguity */"
				},
				{
					"signature": "static ChildLoader childLoader(ClassLoader hostLoader)",
					"documentation": "/** Creates a child loader for the given host loader */"
				}
			],
			"interfaces": [
				"com.google.inject.internal.aop.ClassDefiner"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.ChildClassDefiner.ChildLoader"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.aop.ChildClassDefiner.SystemChildLoaderHolder",
				"com.google.inject.internal.aop.ChildClassDefiner.ChildLoaderCacheHolder",
				"com.google.inject.internal.aop.ChildClassDefiner.ChildLoader"
			]
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using child {@link ClassLoader}s.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ChildClassDefiner.SystemChildLoaderHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.aop.ChildClassDefiner.ChildLoaderCacheHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Custom class loader that grants access to defineClass */",
			"name": "com.google.inject.internal.aop.ChildClassDefiner.ChildLoader",
			"extends": "ClassLoader",
			"Methods": [
				{
					"signature": "ChildLoader(ClassLoader parent)",
					"documentation": "/** Custom class loader that grants access to defineClass */"
				},
				{
					"signature": "ChildLoader()",
					"documentation": ""
				},
				{
					"signature": "Class\u003c?\u003e defineInChild(byte[] bytecode)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.aop.ChildClassDefiner"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Entry-point for building enhanced classes and 'fast-class' invocation.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ClassBuilding",
			"extends": "",
			"Methods": [
				{
					"signature": "private ClassBuilding()",
					"documentation": "/**\n * Entry-point for building enhanced classes and 'fast-class' invocation.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "public static String signature(Constructor\u003c?\u003e constructor)",
					"documentation": "/** Minimum signature needed to disambiguate constructors from the same host class. */"
				},
				{
					"signature": "public static String signature(Method method)",
					"documentation": "/** Minimum signature needed to disambiguate methods from the same host class. */"
				},
				{
					"signature": "private static String signature(String name, Class\u003c?\u003e[] parameterTypes)",
					"documentation": "/** Appends a semicolon-separated list of parameter types to the given name. */"
				},
				{
					"signature": "public static boolean canEnhance(Executable member)",
					"documentation": "/** Returns true if the given member can be enhanced using bytecode. */"
				},
				{
					"signature": "public static BytecodeGen.EnhancerBuilder buildEnhancerBuilder(Class\u003c?\u003e hostClass)",
					"documentation": "/** Builder of enhancers that provide method interception via bytecode generation. */"
				},
				{
					"signature": "private static void partitionMethod(Method method, Map\u003cString, Object\u003e partitions)",
					"documentation": "/**\n   * Methods are partitioned by name and parameter count. This helps focus the search for bridge\n   * delegates that involve type-erasure of generic parameter types, since the parameter count will\n   * be the same for the bridge method and its delegate.\n   */"
				},
				{
					"signature": "private static Object mergeMethods(Object existing, Object added)",
					"documentation": "/** Add the new method to an existing partition or create a new one. */"
				},
				{
					"signature": "private static void visitMethodHierarchy(Class\u003c?\u003e hostClass, Consumer\u003cMethod\u003e visitor)",
					"documentation": "/** Visit the method hierarchy for the host class. */"
				},
				{
					"signature": "private static void pushInterfaces(Deque\u003cClass\u003c?\u003e[]\u003e interfaceStack, Class\u003c?\u003e[] interfaces)",
					"documentation": "/** Pushes the interface declaration onto the stack if it's not empty. */"
				},
				{
					"signature": "private static boolean mergeInterface(List\u003cClass\u003c?\u003e\u003e interfaces, Class\u003c?\u003e candidate)",
					"documentation": "/** Attempts to merge the interface with the current flattened hierarchy. */"
				},
				{
					"signature": "private static String packageName(String className)",
					"documentation": "/** Extract the package name from a class name. */"
				},
				{
					"signature": "private static Method[] getOverridableObjectMethods()",
					"documentation": "/** Cache common overridable Object methods. */"
				},
				{
					"signature": "public static boolean canFastInvoke(Executable member)",
					"documentation": "/** Returns true if the given member can be fast-invoked. */"
				},
				{
					"signature": "private static boolean isPublic(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public static Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e buildFastClass(\n      Class\u003c?\u003e hostClass)",
					"documentation": "/** Builds a 'fast-class' invoker that uses bytecode generation in place of reflection. */"
				},
				{
					"signature": "private static void visitFastConstructors(Class\u003c?\u003e hostClass, Consumer\u003cConstructor\u003c?\u003e\u003e visitor)",
					"documentation": "/** Visit all constructors for the host class that can be fast-invoked. */"
				},
				{
					"signature": "private static void visitFastMethods(Class\u003c?\u003e hostClass, Consumer\u003cMethod\u003e visitor)",
					"documentation": "/** Visit all methods declared by the host class that can be fast-invoked. */"
				},
				{
					"signature": "static \u003cT extends Executable\u003e void visitMembers(\n      T[] members, boolean samePackage, Consumer\u003cT\u003e visitor)",
					"documentation": "/** Visit all subclass accessible members in the given array. */"
				},
				{
					"signature": "private static boolean canAccess(Executable member, boolean samePackage)",
					"documentation": "/** Can we access this member from a subclass which may be in the same package? */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.aop.ClassDefining"
			],
			"usedBy": [
				"com.google.inject.internal.BytecodeGen",
				"com.google.inject.internal.aop.EnhancerBuilderImpl"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Defines dynamically generated classes. */",
			"name": "com.google.inject.internal.aop.ClassDefiner",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.aop.AnonymousClassDefiner",
				"com.google.inject.internal.aop.ChildClassDefiner",
				"com.google.inject.internal.aop.GeneratedClassDefiner",
				"com.google.inject.internal.aop.HiddenClassDefiner",
				"com.google.inject.internal.aop.UnsafeClassDefiner"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Entry-point for defining dynamically generated classes.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ClassDefining",
			"extends": "",
			"Methods": [
				{
					"signature": "private ClassDefining()",
					"documentation": "/**\n * Entry-point for defining dynamically generated classes.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "public static Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode) throws Exception",
					"documentation": "/** Defines a new class relative to the host. */"
				},
				{
					"signature": "public static boolean hasPackageAccess()",
					"documentation": "/** Returns true if the current class definer allows access to package-private members. */"
				},
				{
					"signature": "public static boolean canLoadProxyByName(Class\u003c?\u003e hostClass)",
					"documentation": "/** Returns true if it's possible to load by name proxies defined from the given host. */"
				},
				{
					"signature": "public static boolean canDowncastToProxy(Class\u003c?\u003e hostClass)",
					"documentation": "/** Returns true if it's possible to downcast to proxies defined from the given host. */"
				},
				{
					"signature": "static ClassDefiner bindClassDefiner()",
					"documentation": "/** Binds the preferred {@link ClassDefiner} instance. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalFlags"
			],
			"usedBy": [
				"com.google.inject.internal.aop.ClassBuilding",
				"com.google.inject.internal.aop.EnhancerBuilderImpl"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.aop.ClassDefining.ClassDefinerHolder"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.aop.ClassDefining.ClassDefinerHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Generates enhanced classes.\n *\n * \u003cp\u003eEach enhancer has the same number of constructors as the class it enhances, but each\n * constructor takes an additional handler array before the rest of the expected arguments.\n *\n * \u003cp\u003eEnhanced methods are overridden to call the handler with the same index as the method. The\n * handler delegates to the interceptor stack. Once the last interceptor returns the handler will\n * call back into the trampoline with the method index, which invokes the superclass method.\n *\n * \u003cp\u003eThe trampoline also provides access to constructor invokers that take a context object (the\n * handler array) with an argument array and invokes the appropriate enhanced constructor. These\n * invokers are used in the proxy factory to create enhanced instances.\n *\n * \u003cp\u003eEnhanced classes have the following pseudo-Java structure:\n *\n * \u003cpre\u003e\n * public class HostClass$$EnhancerByGuice\n *   extends HostClass\n * {\n *   // InterceptorStackCallbacks, one per enhanced method\n *   private final InvocationHandler[] GUICE$HANDLERS;\n *\n *   public HostClass$$EnhancerByGuice(InvocationHandler[] handlers, ...) {\n *      // JVM lets us store this before calling the superclass constructor\n *     GUICE$HANDLERS = handlers;\n *     super(...);\n *   }\n *\n *   public static Object GUICE$TRAMPOLINE(int index, Object context, Object[] args) {\n *     switch (index) {\n *       case 0: {\n *         return new HostClass$$EnhancerByGuice((InvocationHandler[]) context, ...);\n *       }\n *       case 1: {\n *         return context.super.instanceMethod(...); // call original unenhanced method\n *       }\n *     }\n *     return null;\n *   }\n *\n *   // enhanced method\n *   public final Object instanceMethod(...) {\n *     // pack arguments and trigger the associated InterceptorStackCallback\n *     return GUICE$HANDLERS[0].invoke(this, null, args);\n *   }\n *\n *   // ...\n * }\n * \u003c/pre\u003e\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.Enhancer",
			"extends": "com.google.inject.internal.aop.AbstractGlueGenerator",
			"Methods": [
				{
					"signature": "Enhancer(Class\u003c?\u003e hostClass, Map\u003cMethod, Method\u003e bridgeDelegates)",
					"documentation": "/**\n * Generates enhanced classes.\n *\n * \u003cp\u003eEach enhancer has the same number of constructors as the class it enhances, but each\n * constructor takes an additional handler array before the rest of the expected arguments.\n *\n * \u003cp\u003eEnhanced methods are overridden to call the handler with the same index as the method. The\n * handler delegates to the interceptor stack. Once the last interceptor returns the handler will\n * call back into the trampoline with the method index, which invokes the superclass method.\n *\n * \u003cp\u003eThe trampoline also provides access to constructor invokers that take a context object (the\n * handler array) with an argument array and invokes the appropriate enhanced constructor. These\n * invokers are used in the proxy factory to create enhanced instances.\n *\n * \u003cp\u003eEnhanced classes have the following pseudo-Java structure:\n *\n * \u003cpre\u003e\n * public class HostClass$$EnhancerByGuice\n *   extends HostClass\n * {\n *   // InterceptorStackCallbacks, one per enhanced method\n *   private final InvocationHandler[] GUICE$HANDLERS;\n *\n *   public HostClass$$EnhancerByGuice(InvocationHandler[] handlers, ...) {\n *      // JVM lets us store this before calling the superclass constructor\n *     GUICE$HANDLERS = handlers;\n *     super(...);\n *   }\n *\n *   public static Object GUICE$TRAMPOLINE(int index, Object context, Object[] args) {\n *     switch (index) {\n *       case 0: {\n *         return new HostClass$$EnhancerByGuice((InvocationHandler[]) context, ...);\n *       }\n *       case 1: {\n *         return context.super.instanceMethod(...); // call original unenhanced method\n *       }\n *     }\n *     return null;\n *   }\n *\n *   // enhanced method\n *   public final Object instanceMethod(...) {\n *     // pack arguments and trigger the associated InterceptorStackCallback\n *     return GUICE$HANDLERS[0].invoke(this, null, args);\n *   }\n *\n *   // ...\n * }\n * \u003c/pre\u003e\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n  protected byte[] generateGlue(Collection\u003cExecutable\u003e members)",
					"documentation": ""
				},
				{
					"signature": "private void setupInvokerTable(ClassWriter cw)",
					"documentation": "/** Generate static initializer to setup invoker table based on the trampoline. */"
				},
				{
					"signature": "private void enhanceConstructor(ClassWriter cw, Constructor\u003c?\u003e constructor)",
					"documentation": "/** Generate enhanced constructor that takes a handler array along with the expected arguments. */"
				},
				{
					"signature": "private void enhanceMethod(ClassWriter cw, Method method, int methodIndex)",
					"documentation": "/** Generate enhanced method that calls the handler with the same index. */"
				},
				{
					"signature": "@Override\n  protected void generateConstructorInvoker(MethodVisitor mv, Constructor\u003c?\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void generateMethodInvoker(MethodVisitor mv, Method method)",
					"documentation": ""
				},
				{
					"signature": "private void generateVirtualBridge(ClassWriter cw, Method bridge, Method target)",
					"documentation": "/** Override the original bridge method and replace it with virtual dispatch to the target. */"
				},
				{
					"signature": "@Override\n  protected MethodHandle lookupInvokerTable(Class\u003c?\u003e glueClass) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "private static String[] exceptionNames(Executable member)",
					"documentation": "/** Returns internal names of exceptions declared by the given constructor/method. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.BytecodeTasks"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builder of enhancers that provide method interception via bytecode generation.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.EnhancerBuilderImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n            protected Map\u003cBitSet, Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e\u003e\n                computeValue(Class\u003c?\u003e hostClass)",
					"documentation": "/** Lazy association between classes and their generated enhancers. */"
				},
				{
					"signature": "EnhancerBuilderImpl(\n      Class\u003c?\u003e hostClass,\n      Collection\u003cMethod\u003e enhanceableMethods,\n      Map\u003cMethod, Method\u003e bridgeDelegates)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Method[] getEnhanceableMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e buildEnhancer(\n      BitSet methodIndices)",
					"documentation": ""
				},
				{
					"signature": "private Function\u003cString, BiFunction\u003cObject, Object[], Object\u003e\u003e doBuildEnhancer(\n      BitSet methodIndices)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.BytecodeGen.EnhancerBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.ClassBuilding",
				"com.google.inject.internal.aop.ClassDefining"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Generates fast-classes.\n *\n * \u003cp\u003eEach fast-class has a single constructor that takes an index. It also has an instance method\n * that takes a context object and an array of argument objects which it combines with the index to\n * call the shared static trampoline. Each fast-class instance therefore acts like a bound invoker\n * to the appropriate constructor or method of the host class.\n *\n * \u003cp\u003eA handle to the fast-class constructor is used as the invoker table, mapping index to invoker.\n *\n * \u003cp\u003eFast-classes have the following pseudo-Java structure:\n *\n * \u003cpre\u003e\n * public final class HostClass$$FastClassByGuice\n *   implements BiFunction // each fast-class instance represents a bound invoker\n * {\n *   private final int index; // the bound trampoline index\n *\n *   public HostClass$$FastClassByGuice(int index) {\n *     this.index = index;\n *   }\n *\n *   public Object apply(Object context, Object args) {\n *     return GUICE$TRAMPOLINE(index, context, (Object[]) args);\n *   }\n *\n *   public static Object GUICE$TRAMPOLINE(int index, Object context, Object[] args) {\n *     switch (index) {\n *       case 0: {\n *         return new HostClass(...);\n *       }\n *       case 1: {\n *         return ((HostClass) context).instanceMethod(...);\n *       }\n *       case 2: {\n *         return HostClass.staticMethod(...);\n *       }\n *     }\n *     return null;\n *   }\n * }\n * \u003c/pre\u003e\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.FastClass",
			"extends": "com.google.inject.internal.aop.AbstractGlueGenerator",
			"Methods": [
				{
					"signature": "private static final String[] FAST_CLASS_API =",
					"documentation": "/**\n * Generates fast-classes.\n *\n * \u003cp\u003eEach fast-class has a single constructor that takes an index. It also has an instance method\n * that takes a context object and an array of argument objects which it combines with the index to\n * call the shared static trampoline. Each fast-class instance therefore acts like a bound invoker\n * to the appropriate constructor or method of the host class.\n *\n * \u003cp\u003eA handle to the fast-class constructor is used as the invoker table, mapping index to invoker.\n *\n * \u003cp\u003eFast-classes have the following pseudo-Java structure:\n *\n * \u003cpre\u003e\n * public final class HostClass$$FastClassByGuice\n *   implements BiFunction // each fast-class instance represents a bound invoker\n * {\n *   private final int index; // the bound trampoline index\n *\n *   public HostClass$$FastClassByGuice(int index) {\n *     this.index = index;\n *   }\n *\n *   public Object apply(Object context, Object args) {\n *     return GUICE$TRAMPOLINE(index, context, (Object[]) args);\n *   }\n *\n *   public static Object GUICE$TRAMPOLINE(int index, Object context, Object[] args) {\n *     switch (index) {\n *       case 0: {\n *         return new HostClass(...);\n *       }\n *       case 1: {\n *         return ((HostClass) context).instanceMethod(...);\n *       }\n *       case 2: {\n *         return HostClass.staticMethod(...);\n *       }\n *     }\n *     return null;\n *   }\n * }\n * \u003c/pre\u003e\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "FastClass(Class\u003c?\u003e hostClass)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected byte[] generateGlue(Collection\u003cExecutable\u003e members)",
					"documentation": ""
				},
				{
					"signature": "private void setupInvokerTable(ClassWriter cw)",
					"documentation": "/** Generate static initializer to setup invoker table based on the fast-class constructor. */"
				},
				{
					"signature": "@Override\n  protected void generateConstructorInvoker(MethodVisitor mv, Constructor\u003c?\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void generateMethodInvoker(MethodVisitor mv, Method method)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected MethodHandle lookupInvokerTable(Class\u003c?\u003e glueClass) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.BytecodeTasks"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using a generated access function.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.GeneratedClassDefiner",
			"extends": "",
			"Methods": [
				{
					"signature": "GeneratedClassDefiner(BiFunction\u003cClassLoader, byte[], Class\u003c?\u003e\u003e defineAccess)",
					"documentation": "/**\n * {@link ClassDefiner} that defines classes using a generated access function.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n  public Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.internal.aop.ClassDefiner"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Thrown when errors occur defining enhancer/fast-class glue. */",
			"name": "com.google.inject.internal.aop.GlueException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "public GlueException(String message, Throwable cause)",
					"documentation": "/** Thrown when errors occur defining enhancer/fast-class glue. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code MethodHandles.Lookup#defineHiddenClass}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.HiddenClassDefiner",
			"extends": "",
			"Methods": [
				{
					"signature": "static",
					"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code MethodHandles.Lookup#defineHiddenClass}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n  public Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode) throws Exception",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static Object classOptions(String... options) throws ClassNotFoundException",
					"documentation": "/** Creates {@link MethodHandles.Lookup.ClassOption} array with the named options. */"
				}
			],
			"interfaces": [
				"com.google.inject.internal.aop.ClassDefiner"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Immutable space-efficient trie that provides a quick lookup index for a sorted set of non empty\n * strings. It assumes only those strings will be queried and therefore may produce false-positive\n * results for strings not in the array.\n *\n * \u003cp\u003eEach node of the tree is represented as a series of {@code char}s using this layout:\n *\n * \u003cpre\u003e\n * +---------------------------------+\n * | number of branches              |\n * +---------------------------------+---------------------------------+----\n * | char for branch 0               | char for branch 1               | ...\n * +---------------------------------+---------------------------------+----\n * | key-delta/leaf/bud for branch 0 | key-delta/leaf/bud for branch 1 | ...\n * +---------------------------------+---------------------------------+----\n * | offset to jump to branch 1      | offset to jump to branch 2      | ...\n * +---------------------------------+---------------------------------+----\n * \u003c/pre\u003e\n *\n * Each node is immediately followed by its child nodes according to branch order.\n *\n * \u003cp\u003eThe key-delta is used to skip over a section of the input key when we know it should always\n * match given the recently matched char (assumes only strings from the original list are queried).\n *\n * \u003cp\u003eLeaves mark a definite end of the match, while buds mark a potential end which could continue\n * down the trie if there are more characters to match. The key-delta for buds is implicitly 1.\n *\n * \u003cp\u003eThe jump for branch 0 is assumed to be 0 and is always ommitted, that is any continuation of\n * the trie for branch 0 immediately follows the current node. The entire jump section is omitted\n * when all the branches from a node are leaves.\n *\n * \u003cp\u003eSimple example trie with 2 strings \"getValue\" and \"setValue\":\n *\n * \u003cpre\u003e\n * +---+---+---+--------+--------+\n * | 2 | g | s | 0x8000 | 0x8001 |\n * +---+---+---+--------+--------+\n * \u003c/pre\u003e\n *\n * In this case the first character is enough to determine the index result.\n *\n * \u003cp\u003eExample of a trie with a 'bud' that contains 2 strings \"getName\" and \"getNameAndValue\":\n *\n * \u003cpre\u003e\n * +---+---+---+---+---+--------+---+---+--------+\n * | 1 | g | 6 | 1 | e | 0x4000 | 1 | A | 0x8001 |\n * +---+---+---+---+---+--------+---+---+--------+\n * \u003c/pre\u003e\n *\n * After matching 'g' we skip to the end of 'getName' before checking if there are any more\n * characters to match.\n *\n * \u003cp\u003eMore complex example with 3 strings \"getName\", \"getValue\", \"getVersion\":\n *\n * \u003cpre\u003e\n * +---+---+---+---+---+---+--------+---+---+---+---+---+--------+--------+\n * | 1 | g | 3 | 2 | N | V | 0x8000 | 1 | 0 | 2 | a | e | 0x8001 | 0x8002 |\n * +---+---+---+---+---+---+--------+---+---+---+---+---+--------+--------+\n * \u003c/pre\u003e\n *\n * After matching 'g' we skip past the 'get'. If the next character is 'N' we know this is 'getName'\n * otherwise we skip over the 'V' and jump to the last check between '...alue' and '...ersion'.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ImmutableStringTrie",
			"extends": "",
			"Methods": [
				{
					"signature": "private static int singletonTrie(String key)",
					"documentation": "/**\n * Immutable space-efficient trie that provides a quick lookup index for a sorted set of non empty\n * strings. It assumes only those strings will be queried and therefore may produce false-positive\n * results for strings not in the array.\n *\n * \u003cp\u003eEach node of the tree is represented as a series of {@code char}s using this layout:\n *\n * \u003cpre\u003e\n * +---------------------------------+\n * | number of branches              |\n * +---------------------------------+---------------------------------+----\n * | char for branch 0               | char for branch 1               | ...\n * +---------------------------------+---------------------------------+----\n * | key-delta/leaf/bud for branch 0 | key-delta/leaf/bud for branch 1 | ...\n * +---------------------------------+---------------------------------+----\n * | offset to jump to branch 1      | offset to jump to branch 2      | ...\n * +---------------------------------+---------------------------------+----\n * \u003c/pre\u003e\n *\n * Each node is immediately followed by its child nodes according to branch order.\n *\n * \u003cp\u003eThe key-delta is used to skip over a section of the input key when we know it should always\n * match given the recently matched char (assumes only strings from the original list are queried).\n *\n * \u003cp\u003eLeaves mark a definite end of the match, while buds mark a potential end which could continue\n * down the trie if there are more characters to match. The key-delta for buds is implicitly 1.\n *\n * \u003cp\u003eThe jump for branch 0 is assumed to be 0 and is always ommitted, that is any continuation of\n * the trie for branch 0 immediately follows the current node. The entire jump section is omitted\n * when all the branches from a node are leaves.\n *\n * \u003cp\u003eSimple example trie with 2 strings \"getValue\" and \"setValue\":\n *\n * \u003cpre\u003e\n * +---+---+---+--------+--------+\n * | 2 | g | s | 0x8000 | 0x8001 |\n * +---+---+---+--------+--------+\n * \u003c/pre\u003e\n *\n * In this case the first character is enough to determine the index result.\n *\n * \u003cp\u003eExample of a trie with a 'bud' that contains 2 strings \"getName\" and \"getNameAndValue\":\n *\n * \u003cpre\u003e\n * +---+---+---+---+---+--------+---+---+--------+\n * | 1 | g | 6 | 1 | e | 0x4000 | 1 | A | 0x8001 |\n * +---+---+---+---+---+--------+---+---+--------+\n * \u003c/pre\u003e\n *\n * After matching 'g' we skip to the end of 'getName' before checking if there are any more\n * characters to match.\n *\n * \u003cp\u003eMore complex example with 3 strings \"getName\", \"getValue\", \"getVersion\":\n *\n * \u003cpre\u003e\n * +---+---+---+---+---+---+--------+---+---+---+---+---+--------+--------+\n * | 1 | g | 3 | 2 | N | V | 0x8000 | 1 | 0 | 2 | a | e | 0x8001 | 0x8002 |\n * +---+---+---+---+---+---+--------+---+---+---+---+---+--------+--------+\n * \u003c/pre\u003e\n *\n * After matching 'g' we skip past the 'get'. If the next character is 'N' we know this is 'getName'\n * otherwise we skip over the 'V' and jump to the last check between '...alue' and '...ersion'.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n  public int applyAsInt(String key)",
					"documentation": "/**\n   * Returns the index assigned in the trie to the given string.\n   *\n   * \u003cp\u003eNote: a return value of {@code -1} means the string is definitely not in the trie, but a\n   * non-negative index may be returned for strings that closely match those in the trie. This is\n   * acceptable because we will only call this method with strings that we know exist in the trie.\n   */"
				},
				{
					"signature": "public static ToIntFunction\u003cString\u003e buildTrie(Collection\u003cString\u003e table)",
					"documentation": "/**\n   * Builds an immutable trie that indexes the given table of strings.\n   *\n   * \u003cp\u003eThe table of strings must be sorted in lexical order.\n   */"
				},
				{
					"signature": "private static ToIntFunction\u003cString\u003e buildTrie(\n      StringBuilder buf, String[] table, int row, int rowLimit)",
					"documentation": "/** Builds a trie, overflowing to additional tries if there are too many rows */"
				},
				{
					"signature": "ImmutableStringTrie(char[] data)",
					"documentation": ""
				},
				{
					"signature": "private static void buildSubTrie(\n      StringBuilder buf, String[] table, int column, int row, int rowLimit)",
					"documentation": "/** Recursively builds a trie for a slice of rows at a particular column. */"
				},
				{
					"signature": "private static int nextPivotRow(String[] table, char pivot, int column, int row, int rowLimit)",
					"documentation": "/**\n   * Finds the next row that has a different character in the selected column to the given one, or\n   * is too short to include the column. This determines the span of rows that fall under the given\n   * character in the trie.\n   *\n   * \u003cp\u003eReturns the row just after the end of the range if all rows have the same character.\n   */"
				},
				{
					"signature": "private static int nextPivotColumn(String[] table, int column, int row, int rowLimit)",
					"documentation": "/**\n   * Finds the next column in the current row whose character differs in at least one other row.\n   * This helps identify the longest common prefix from the current pivot point to the next one.\n   *\n   * \u003cp\u003eReturns the column just after the end of the current row if all rows are identical.\n   */"
				}
			],
			"interfaces": [
				"java.util.function.ToIntFunction"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.aop.ImmutableStringTrie.Overflow"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.aop.ImmutableStringTrie.Overflow"
			]
		},
		{
			"documentation": "/** Immutable trie that delegates searches that lie outside its range to an overflow trie. */",
			"name": "com.google.inject.internal.aop.ImmutableStringTrie.Overflow",
			"extends": "",
			"Methods": [
				{
					"signature": "Overflow(char[] data, String overflowKey, ToIntFunction\u003cString\u003e next)",
					"documentation": "/** Immutable trie that delegates searches that lie outside its range to an overflow trie. */"
				},
				{
					"signature": "@Override\n    public int applyAsInt(String key)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.util.function.ToIntFunction"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.aop.ImmutableStringTrie"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Accumulates methods with the same name and number of parameters. This helps focus the search for\n * bridge delegates that involve type-erasure of generic parameter types, since the parameter count\n * will be the same for the bridge method and its delegate.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.MethodPartition",
			"extends": "",
			"Methods": [
				{
					"signature": "public MethodPartition(Method first, Method second)",
					"documentation": "/** Each partition starts off with at least two methods. */"
				},
				{
					"signature": "public MethodPartition addCandidate(Method method)",
					"documentation": "/** Add a new method to this partition for resolution. */"
				},
				{
					"signature": "public void collectEnhanceableMethods(\n      TypeLiteral\u003c?\u003e hostType,\n      Consumer\u003cMethod\u003e methodVisitor,\n      Map\u003cMethod, Method\u003e bridgeDelegates)",
					"documentation": "/**\n   * Resolve and collect enhanceable methods into the given list; one per method-signature. Methods\n   * declared in sub-classes are preferred over those in super-classes with the same signature.\n   * (Unless it's a bridge method, in which case we prefer to report the non-bridge method from the\n   * super-class as a convenience to AOP method matchers that always ignore synthetic methods.)\n   *\n   * \u003cp\u003eAt the same time we use generic type resolution to match resolved bridge methods to the\n   * methods they delegate to (this avoids the need to crack open the original class resource for\n   * in-depth analysis by ASM, especially since the class bytes might not be accessible.)\n   */"
				},
				{
					"signature": "private static String parametersKey(Class\u003c?\u003e[] parameterTypes)",
					"documentation": "/** Each method is uniquely identified in the partition by its actual parameter types. */"
				},
				{
					"signature": "private static boolean resolvedParametersMatch(\n      Method subMethod, TypeLiteral\u003c?\u003e host, Method superMethod)",
					"documentation": "/** Compares a sub-method with a generic super-method by resolving it against the host class. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code sun.misc.Unsafe}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.UnsafeClassDefiner",
			"extends": "",
			"Methods": [
				{
					"signature": "static",
					"documentation": "/**\n * {@link ClassDefiner} that defines classes using {@code sun.misc.Unsafe}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "private static final String[] DEFINEACCESS_API =",
					"documentation": ""
				},
				{
					"signature": "public static boolean isAccessible()",
					"documentation": "/** Do we have access to {@code sun.misc.Unsafe}? */"
				},
				{
					"signature": "public static boolean canLoadProxyByName(Class\u003c?\u003e hostClass)",
					"documentation": "/** Returns true if it's possible to load by name proxies defined from the given host. */"
				},
				{
					"signature": "public static boolean canDowncastToProxy(Class\u003c?\u003e hostClass)",
					"documentation": "/** Returns true if it's possible to downcast to proxies defined from the given host. */"
				},
				{
					"signature": "@Override\n  public Class\u003c?\u003e define(Class\u003c?\u003e hostClass, byte[] bytecode) throws Exception",
					"documentation": ""
				},
				{
					"signature": "private static ClassDefiner findClassDefiner(ClassLoader hostLoader)",
					"documentation": "/** Finds the appropriate class definer for the given class loader. */"
				},
				{
					"signature": "static \u003cT\u003e T tryPrivileged(PrivilegedExceptionAction\u003cT\u003e action, String errorMessage)",
					"documentation": ""
				},
				{
					"signature": "static ClassDefiner tryAccessDefineClass(Class\u003c?\u003e loaderClass)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static ClassDefiner accessDefineClass(Class\u003c?\u003e loaderClass) throws Exception",
					"documentation": "/** Generates helper in same package as the {@link ClassLoader} so it can access defineClass */"
				},
				{
					"signature": "private static byte[] buildDefineClassAccess(Class\u003c?\u003e loaderClass)",
					"documentation": "/** {@link ClassLoader} helper that sits in the same package and passes on defineClass requests */"
				}
			],
			"interfaces": [
				"com.google.inject.internal.aop.ClassDefiner"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalFlags"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.aop.UnsafeClassDefiner.ClassLoaderDefineClassHolder",
				"com.google.inject.internal.aop.UnsafeClassDefiner.DefineClassCacheHolder"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.aop.UnsafeClassDefiner.ClassLoaderDefineClassHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.aop.UnsafeClassDefiner.DefineClassCacheHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An interface around finding the caller of the stack trace, so we can have different strategies\n * for implementing it.\n */",
			"name": "com.google.inject.internal.util.CallerFinder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.internal.util.NewThrowableFinder"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Class utilities. */",
			"name": "com.google.inject.internal.util.Classes",
			"extends": "",
			"Methods": [
				{
					"signature": "public static boolean isInnerClass(Class\u003c?\u003e clazz)",
					"documentation": "/** Class utilities. */"
				},
				{
					"signature": "public static boolean isConcrete(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public static String toString(Member member)",
					"documentation": "/**\n   * Formats a member as concise string, such as {@code java.util.ArrayList.size}, {@code\n   * java.util.ArrayList\u003cinit\u003e()} or {@code java.util.List.remove()}.\n   */"
				},
				{
					"signature": "public static Class\u003c? extends Member\u003e memberType(Member member)",
					"documentation": "/** Returns {@code Field.class}, {@code Method.class} or {@code Constructor.class}. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Messages",
				"com.google.inject.internal.SourceFormatter",
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A continuously timing stopwatch that is used for simple performance monitoring.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.util.ContinuousStopwatch",
			"extends": "",
			"Methods": [
				{
					"signature": "public ContinuousStopwatch(Stopwatch stopwatch)",
					"documentation": "/**\n   * Constructs a ContinuousStopwatch, which will start timing immediately after construction.\n   *\n   * @param stopwatch the internal stopwatch used by ContinuousStopwatch\n   */"
				},
				{
					"signature": "public long reset()",
					"documentation": "/** Resets and returns elapsed time in milliseconds. */"
				},
				{
					"signature": "public void resetAndLog(String label)",
					"documentation": "/** Resets and logs elapsed time in milliseconds. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.InternalInjectorCreator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Looks up line numbers for classes and their members.\n *\n * @author Chris Nokleberg\n */",
			"name": "com.google.inject.internal.util.LineNumbers",
			"extends": "",
			"Methods": [
				{
					"signature": "public LineNumbers(Class\u003c?\u003e type) throws IOException",
					"documentation": "/**\n   * Reads line number information from the given class, if available.\n   *\n   * @param type the class to read line number information from\n   */"
				},
				{
					"signature": "public String getSource()",
					"documentation": "/**\n   * Get the source file name as read from the bytecode.\n   *\n   * @return the source file name if available, or null\n   */"
				},
				{
					"signature": "public Integer getLineNumber(Member member)",
					"documentation": "/**\n   * Get the line number associated with the given member.\n   *\n   * @param member a field, constructor, or method belonging to the class used during construction\n   * @return the wrapped line number, or null if not available\n   * @throws IllegalArgumentException if the member does not belong to the class used during\n   *     construction\n   */"
				},
				{
					"signature": "public int getFirstLine()",
					"documentation": "/** Gets the first line number. */"
				},
				{
					"signature": "private String memberKey(Member member)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.LineNumberMethodVisitor",
				"com.google.inject.internal.util.LineNumberAnnotationVisitor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.util.LineNumberReader"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.LineNumberReader",
			"extends": "org.objectweb.asm.ClassVisitor",
			"Methods": [
				{
					"signature": "LineNumberReader()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void visit(\n        int version,\n        int access,\n        String name,\n        String signature,\n        String superName,\n        String[] interfaces)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public MethodVisitor visitMethod(\n        int access, String name, String desc, String signature, String[] exceptions)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void visitSource(String source, String debug)",
					"documentation": ""
				},
				{
					"signature": "public void visitLineNumber(int line, Label start)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public FieldVisitor visitField(\n        int access, String name, String desc, String signature, Object value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotationVisitor visitAnnotation(String desc, boolean visible)",
					"documentation": ""
				},
				{
					"signature": "public AnnotationVisitor visitParameterAnnotation(int parameter, String desc, boolean visible)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.LineNumberMethodVisitor",
				"com.google.inject.internal.util.LineNumberAnnotationVisitor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.internal.util.LineNumberMethodVisitor",
				"com.google.inject.internal.util.LineNumberAnnotationVisitor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.LineNumberMethodVisitor",
			"extends": "org.objectweb.asm.MethodVisitor",
			"Methods": [
				{
					"signature": "LineNumberMethodVisitor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public AnnotationVisitor visitAnnotation(String desc, boolean visible)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public AnnotationVisitor visitAnnotationDefault()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void visitFieldInsn(int opcode, String owner, String name, String desc)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void visitLineNumber(int line, Label start)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.util.LineNumbers",
				"com.google.inject.internal.util.LineNumberReader"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.LineNumberAnnotationVisitor",
			"extends": "org.objectweb.asm.AnnotationVisitor",
			"Methods": [
				{
					"signature": "LineNumberAnnotationVisitor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public AnnotationVisitor visitAnnotation(String name, String desc)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public AnnotationVisitor visitArray(String name)",
					"documentation": ""
				},
				{
					"signature": "public void visitLocalVariable(\n          String name, String desc, String signature, Label start, Label end, int index)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.util.LineNumbers",
				"com.google.inject.internal.util.LineNumberReader"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A CallerFinder that construcst a new Throwable and iterates through its stack trace. */",
			"name": "com.google.inject.internal.util.NewThrowableFinder",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public StackTraceElement findCaller(Predicate\u003cString\u003e shouldBeSkipped)",
					"documentation": "/** A CallerFinder that construcst a new Throwable and iterates through its stack trace. */"
				}
			],
			"interfaces": [
				"com.google.inject.internal.util.CallerFinder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Provides access to the calling line of code.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.util.SourceProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "private SourceProvider(Iterable\u003cString\u003e classesToSkip)",
					"documentation": "/** Indicates that the source is unknown. */"
				},
				{
					"signature": "private SourceProvider(SourceProvider parent, Iterable\u003cString\u003e classesToSkip)",
					"documentation": ""
				},
				{
					"signature": "public SourceProvider plusSkippedClasses(Class\u003c?\u003e... moreClassesToSkip)",
					"documentation": "/** Returns a new instance that also skips {@code moreClassesToSkip}. */"
				},
				{
					"signature": "private boolean shouldBeSkipped(String className)",
					"documentation": "/** Returns true if the className should be skipped. */"
				},
				{
					"signature": "private static List\u003cString\u003e asStrings(Class\u003c?\u003e... classes)",
					"documentation": "/** Returns the class names as Strings */"
				},
				{
					"signature": "public StackTraceElement getCaller()",
					"documentation": "/**\n   * Returns the calling line of code. The selected line is the nearest to the top of the stack that\n   * is not skipped.\n   */"
				},
				{
					"signature": "public Object getFromClassNames(List\u003cString\u003e moduleClassNames)",
					"documentation": "/** Returns the non-skipped module class name. */"
				},
				{
					"signature": "private static CallerFinder loadCallerFinder()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates stack trace elements for members.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.internal.util.StackTraceElements",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Object forMember(Member member)",
					"documentation": "/**\n * Creates stack trace elements for members.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public static Object forType(Class\u003c?\u003e implementation)",
					"documentation": ""
				},
				{
					"signature": "public static void clearCache()",
					"documentation": "/** Clears the internal cache for {@link StackTraceElement StackTraceElements}. */"
				},
				{
					"signature": "public static InMemoryStackTraceElement[] convertToInMemoryStackTraceElement(\n      StackTraceElement[] stackTraceElements)",
					"documentation": "/** Returns encoded in-memory version of {@link StackTraceElement StackTraceElements}. */"
				},
				{
					"signature": "public static StackTraceElement[] convertToStackTraceElement(\n      InMemoryStackTraceElement[] inMemoryStackTraceElements)",
					"documentation": "/**\n   * Decodes in-memory stack trace elements to regular {@link StackTraceElement StackTraceElements}.\n   */"
				},
				{
					"signature": "private static InMemoryStackTraceElement weakIntern(\n      InMemoryStackTraceElement inMemoryStackTraceElement)",
					"documentation": ""
				},
				{
					"signature": "private static String weakIntern(String s)",
					"documentation": ""
				},
				{
					"signature": "private StackTraceElements()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.grapher.ShortNameFactoryTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.StackTraceElements.InMemoryStackTraceElement"
			],
			"usedBy": [
				"com.google.inject.internal.InternalProvisionException",
				"com.google.inject.internal.ProviderMethod",
				"com.google.inject.internal.SourceFormatter",
				"com.google.inject.spi.Elements",
				"com.google.inject.grapher.ShortNameFactory",
				"com.google.inject.throwingproviders.CheckedProviderMethod"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.util.StackTraceElements.InMemoryStackTraceElement"
			]
		},
		{
			"documentation": "/** In-Memory version of {@link StackTraceElement} that does not store the file name. */",
			"name": "com.google.inject.internal.util.StackTraceElements.InMemoryStackTraceElement",
			"extends": "",
			"Methods": [
				{
					"signature": "InMemoryStackTraceElement(StackTraceElement ste)",
					"documentation": "/** In-Memory version of {@link StackTraceElement} that does not store the file name. */"
				},
				{
					"signature": "InMemoryStackTraceElement(String declaringClass, String methodName, int lineNumber)",
					"documentation": ""
				},
				{
					"signature": "String getClassName()",
					"documentation": ""
				},
				{
					"signature": "String getMethodName()",
					"documentation": ""
				},
				{
					"signature": "int getLineNumber()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.util.StackTraceElements"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Implements {@code and()} and {@code or()}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.matcher.AbstractMatcher",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Matcher\u003cT\u003e and(final Matcher\u003c? super T\u003e other)",
					"documentation": "/**\n * Implements {@code and()} and {@code or()}.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "@Override\n  public Matcher\u003cT\u003e or(Matcher\u003c? super T\u003e other)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.matcher.Matcher"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.MethodInterceptionTest",
				"com.google.inject.ProvisionListenerTest",
				"com.googlecode.guice.bundle.OSGiTestActivator",
				"com.googlecode.guice.bundle.OSGiTestActivator.InterceptorModule"
			],
			"subClasses": [
				"com.google.inject.matcher.AbstractMatcher.AndMatcher",
				"com.google.inject.matcher.AbstractMatcher.OrMatcher",
				"com.google.inject.matcher.Matchers.Any",
				"com.google.inject.matcher.Matchers.Not",
				"com.google.inject.matcher.Matchers.AnnotatedWithType",
				"com.google.inject.matcher.Matchers.AnnotatedWith",
				"com.google.inject.matcher.Matchers.SubclassesOf",
				"com.google.inject.matcher.Matchers.Only",
				"com.google.inject.matcher.Matchers.IdenticalTo",
				"com.google.inject.matcher.Matchers.InPackage",
				"com.google.inject.matcher.Matchers.InSubpackage",
				"com.google.inject.matcher.Matchers.Returns"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.AbstractMatcher.AndMatcher",
				"com.google.inject.matcher.AbstractMatcher.OrMatcher"
			],
			"usedBy": [
				"com.google.inject.internal.TypeConverterBindingProcessor"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.matcher.AbstractMatcher.AndMatcher",
				"com.google.inject.matcher.AbstractMatcher.OrMatcher"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.AbstractMatcher.AndMatcher",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public AndMatcher(Matcher\u003c? super T\u003e a, Matcher\u003c? super T\u003e b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(T t)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.AbstractMatcher"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.AbstractMatcher.OrMatcher",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public OrMatcher(Matcher\u003c? super T\u003e a, Matcher\u003c? super T\u003e b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(T t)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.AbstractMatcher"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Returns {@code true} or {@code false} for a given input.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.matcher.Matcher",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.matcher.AbstractMatcher"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Matcher implementations. Supports matching classes and methods.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.matcher.Matchers",
			"extends": "",
			"Methods": [
				{
					"signature": "private Matchers()",
					"documentation": "/**\n * Matcher implementations. Supports matching classes and methods.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public static Matcher\u003cObject\u003e any()",
					"documentation": "/** Returns a matcher which matches any input. */"
				},
				{
					"signature": "public static \u003cT\u003e Matcher\u003cT\u003e not(final Matcher\u003c? super T\u003e p)",
					"documentation": "/** Inverts the given matcher. */"
				},
				{
					"signature": "private static void checkForRuntimeRetention(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "public static Matcher\u003cAnnotatedElement\u003e annotatedWith(\n      final Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/** Returns a matcher which matches elements (methods, classes, etc.) with a given annotation. */"
				},
				{
					"signature": "public static Matcher\u003cAnnotatedElement\u003e annotatedWith(final Annotation annotation)",
					"documentation": "/** Returns a matcher which matches elements (methods, classes, etc.) with a given annotation. */"
				},
				{
					"signature": "public static Matcher\u003cClass\u003e subclassesOf(final Class\u003c?\u003e superclass)",
					"documentation": "/** Returns a matcher which matches subclasses of the given type (as well as the given type). */"
				},
				{
					"signature": "public static Matcher\u003cObject\u003e only(Object value)",
					"documentation": "/** Returns a matcher which matches objects equal to the given object. */"
				},
				{
					"signature": "public static Matcher\u003cObject\u003e identicalTo(final Object value)",
					"documentation": "/** Returns a matcher which matches only the given object. */"
				},
				{
					"signature": "public static Matcher\u003cClass\u003e inPackage(final Package targetPackage)",
					"documentation": "/**\n   * Returns a matcher which matches classes in the given package. Packages are specific to their\n   * classloader, so classes with the same package name may not have the same package at runtime.\n   */"
				},
				{
					"signature": "public static Matcher\u003cClass\u003e inSubpackage(final String targetPackageName)",
					"documentation": "/**\n   * Returns a matcher which matches classes in the given package and its subpackages. Unlike {@link\n   * #inPackage(Package) inPackage()}, this matches classes from any classloader.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "public static Matcher\u003cMethod\u003e returns(final Matcher\u003c? super Class\u003c?\u003e\u003e returnType)",
					"documentation": "/** Returns a matcher which matches methods with matching return types. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingTest",
				"com.google.inject.DefaultMethodInterceptionTest",
				"com.google.inject.IntegrationTest",
				"com.google.inject.MethodInterceptionTest",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.RequestInjectionTest",
				"com.google.inject.TypeConversionTest",
				"com.google.inject.TypeListenerTest",
				"com.google.inject.internal.ProxyFactoryTest",
				"com.google.inject.internal.util.LineNumbersTest",
				"com.google.inject.matcher.MatcherTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.assistedinject.FactoryProvider2Test"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Matchers.Any",
				"com.google.inject.matcher.Matchers.Not",
				"com.google.inject.matcher.Matchers.AnnotatedWithType",
				"com.google.inject.matcher.Matchers.AnnotatedWith",
				"com.google.inject.matcher.Matchers.SubclassesOf",
				"com.google.inject.matcher.Matchers.Only",
				"com.google.inject.matcher.Matchers.IdenticalTo",
				"com.google.inject.matcher.Matchers.InPackage",
				"com.google.inject.matcher.Matchers.InSubpackage",
				"com.google.inject.matcher.Matchers.Returns"
			],
			"usedBy": [
				"com.google.inject.internal.TypeConverterBindingProcessor",
				"com.google.inject.persist.PersistModule"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.matcher.Matchers.Any",
				"com.google.inject.matcher.Matchers.Not",
				"com.google.inject.matcher.Matchers.AnnotatedWithType",
				"com.google.inject.matcher.Matchers.AnnotatedWith",
				"com.google.inject.matcher.Matchers.SubclassesOf",
				"com.google.inject.matcher.Matchers.Only",
				"com.google.inject.matcher.Matchers.IdenticalTo",
				"com.google.inject.matcher.Matchers.InPackage",
				"com.google.inject.matcher.Matchers.InSubpackage",
				"com.google.inject.matcher.Matchers.Returns"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.Any",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "@Override\n    public boolean matches(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "public Object readResolve()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.Not",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "private Not(Matcher\u003c? super T\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(T t)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.AnnotatedWithType",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public AnnotatedWithType(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(AnnotatedElement element)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.AnnotatedWith",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public AnnotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(AnnotatedElement element)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.SubclassesOf",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public SubclassesOf(Class\u003c?\u003e superclass)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Class subclass)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.Only",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public Only(Object value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.IdenticalTo",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public IdenticalTo(Object value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.InPackage",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public InPackage(Package targetPackage)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Class c)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "public Object readResolve()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.InSubpackage",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public InSubpackage(String targetPackageName)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Class c)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Matchers.Returns",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "public Returns(Matcher\u003c? super Class\u003c?\u003e\u003e returnType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(Method m)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.matcher.Matchers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Allows {@literal @}{@link ProvidesIntoMap} to specify a class map key.\n *\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.ClassMapKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule",
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An API to bind multiple map entries separately, only to later inject them as a complete map.\n * MapBinder is intended for use in your application's module:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class SnacksModule extends AbstractModule {\n *   protected void configure() {\n *     MapBinder\u0026lt;String, Snack\u0026gt; mapbinder\n *         = MapBinder.newMapBinder(binder(), String.class, Snack.class);\n *     mapbinder.addBinding(\"twix\").toInstance(new Twix());\n *     mapbinder.addBinding(\"snickers\").toProvider(SnickersProvider.class);\n *     mapbinder.addBinding(\"skittles\").to(Skittles.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eWith this binding, a {@link Map}{@code \u003cString, Snack\u003e} can now be injected:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * class SnackMachine {\n *   {@literal @}Inject\n *   public SnackMachine(Map\u0026lt;String, Snack\u0026gt; snacks) { ... }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eIn addition to binding {@code Map\u003cK, V\u003e}, a mapbinder will also bind {@code Map\u003cK,\n * Provider\u003cV\u003e\u003e} for lazy value provision:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * class SnackMachine {\n *   {@literal @}Inject\n *   public SnackMachine(Map\u0026lt;String, Provider\u0026lt;Snack\u0026gt;\u0026gt; snackProviders) { ... }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eContributing mapbindings from different modules is supported. For example, it is okay to have\n * both {@code CandyModule} and {@code ChipsModule} both create their own {@code MapBinder\u003cString,\n * Snack\u003e}, and to each contribute bindings to the snacks map. When that map is injected, it will\n * contain entries from both modules.\n *\n * \u003cp\u003eThe map's iteration order is consistent with the binding order. This is convenient when\n * multiple elements are contributed by the same module because that module can order its bindings\n * appropriately. Avoid relying on the iteration order of elements contributed by different modules,\n * since there is no equivalent mechanism to order modules.\n *\n * \u003cp\u003eThe map is unmodifiable. Elements can only be added to the map by configuring the MapBinder.\n * Elements can never be removed from the map.\n *\n * \u003cp\u003eValues are resolved at map injection time. If a value is bound to a provider, that provider's\n * get method will be called each time the map is injected (unless the binding is also scoped, or a\n * map of providers is injected).\n *\n * \u003cp\u003eAnnotations are used to create different maps of the same key/value type. Each distinct\n * annotation gets its own independent map.\n *\n * \u003cp\u003e\u003cstrong\u003eKeys must be distinct.\u003c/strong\u003e If the same key is bound more than once, map injection\n * will fail. However, use {@link #permitDuplicates()} in order to allow duplicate keys; extra\n * bindings to {@code Map\u003cK, Set\u003cV\u003e\u003e} and {@code Map\u003cK, Set\u003cProvider\u003cV\u003e\u003e} will be added.\n *\n * \u003cp\u003e\u003cstrong\u003eKeys must be non-null.\u003c/strong\u003e {@code addBinding(null)} will throw an unchecked\n * exception.\n *\n * \u003cp\u003e\u003cstrong\u003eValues must be non-null to use map injection.\u003c/strong\u003e If any value is null, map\n * injection will fail (although injecting a map of providers will not).\n *\n * @author dpb@google.com (David P. Baker)\n */",
			"name": "com.google.inject.multibindings.MapBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder, TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with no binding annotation.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder, Class\u003cK\u003e keyType, Class\u003cV\u003e valueType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with no binding annotation.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder, TypeLiteral\u003cK\u003e keyType, TypeLiteral\u003cV\u003e valueType, Annotation annotation)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotation}.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder, Class\u003cK\u003e keyType, Class\u003cV\u003e valueType, Annotation annotation)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotation}.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder,\n      TypeLiteral\u003cK\u003e keyType,\n      TypeLiteral\u003cV\u003e valueType,\n      Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotationType}.\n   */"
				},
				{
					"signature": "public static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder,\n      Class\u003cK\u003e keyType,\n      Class\u003cV\u003e valueType,\n      Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link\n   * Map} that is itself bound with {@code annotationType}.\n   */"
				},
				{
					"signature": "private MapBinder(RealMapBinder\u003cK, V\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "public MapBinder\u003cK, V\u003e permitDuplicates()",
					"documentation": "/**\n   * Configures the {@code MapBinder} to handle duplicate entries.\n   *\n   * \u003cp\u003eWhen multiple equal keys are bound, the value that gets included in the map is arbitrary.\n   *\n   * \u003cp\u003eIn addition to the {@code Map\u003cK, V\u003e} and {@code Map\u003cK, Provider\u003cV\u003e\u003e} maps that are normally\n   * bound, a {@code Map\u003cK, Set\u003cV\u003e\u003e} and {@code Map\u003cK, Set\u003cProvider\u003cV\u003e\u003e\u003e} are \u003cem\u003ealso\u003c/em\u003e bound,\n   * which contain all values bound to each key.\n   *\n   * \u003cp\u003eWhen multiple modules contribute elements to the map, this configuration option impacts all\n   * of them.\n   *\n   * @return this map binder\n   * @since 3.0\n   */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cV\u003e addBinding(K key)",
					"documentation": "/**\n   * Returns a binding builder used to add a new entry in the map. Each key must be distinct (and\n   * non-null). Bound providers will be evaluated each time the map is injected.\n   *\n   * \u003cp\u003eIt is an error to call this method without also calling one of the {@code to} methods on the\n   * returned binding builder.\n   *\n   * \u003cp\u003eScoping elements independently is supported. Use the {@code in} method to specify a binding\n   * scope.\n   */"
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MapBinderTest.MapBinderWithTwoEntriesModule",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.IntoMapTest.MultibindingGuiceModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.RealMapBinder"
			],
			"usedBy": [
				"com.google.inject.internal.Module1",
				"com.google.inject.internal.Module2",
				"com.google.inject.internal.Module3",
				"com.google.inject.internal.Main",
				"com.google.inject.daggeradapter.DaggerMethodScanner"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding for a MapBinder.\n *\n * \u003cp\u003eAlthough MapBinders may be injected through a variety of generic types ({@code Map\u003cK, V\u003e},\n * {@code Map\u003cK, ? extends V\u003e}, {@code Map\u003cK, Provider\u003cV\u003e\u003e}, {@code Map\u003cK, Set\u003cV\u003e\u003e}, {@code Map\u003cK,\n * Set\u003cProvider\u003cV\u003e\u003e}, and even {@code Set\u003cMap.Entry\u003cK, Provider\u003cV\u003e\u003e}), a MapBinderBinding exists\n * only on the Binding associated with the {@code Map\u003cK, V\u003e key}. Injectable map types can be\n * discovered using {@link #getMapKey} (which will return the {@code Map\u003cK, V\u003e} key), or{@link\n * #getAlternateMapKeys} (which will return the other keys that can inject this data). Other\n * bindings can be validated to be derived from this MapBinderBinding using {@link\n * #containsElement(Element)}.\n *\n * @param \u003cT\u003e The fully qualified type of the map, including Map. For example: {@code\n *     MapBinderBinding\u003cMap\u003cString, Snack\u003e\u003e}\n * @since 3.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.multibindings.MapBinderBinding",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Allows users define customized key type annotations for map bindings by annotating an annotation\n * of a {@code Map}'s key type. The custom key annotation can be applied to methods also annotated\n * with {@literal @}{@link ProvidesIntoMap}.\n *\n * \u003cp\u003eA {@link StringMapKey} and {@link ClassMapKey} are provided for convenience with maps whose\n * keys are strings or classes. For maps with enums or primitive types as keys, you must provide\n * your own MapKey annotation, such as this one for an enum:\n *\n * \u003cpre\u003e\n * {@literal @}MapKey(unwrapValue = true)\n * {@literal @}Retention(RUNTIME)\n * public {@literal @}interface MyCustomEnumKey {\n *   MyCustomEnum value();\n * }\n * \u003c/pre\u003e\n *\n * You can also use the whole annotation as the key, if {@code unwrapValue=false}. When unwrapValue\n * is false, the annotation type will be the key type for the injected map and the annotation\n * instances will be the key values. If {@code unwrapValue=true}, the value() type will be the key\n * type for injected map and the value() instances will be the keys values.\n *\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.MapKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.multibindings.TestEnumKey",
				"com.google.inject.multibindings.TestEnumKey2"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.multibindings.ClassMapKey",
				"com.google.inject.multibindings.StringMapKey",
				"com.google.inject.multibindings.WrappedKey",
				"com.google.inject.multibindings.ArrayUnwrappedKey",
				"com.google.inject.multibindings.ArrayWrappedKey",
				"com.google.inject.multibindings.MissingValueMethod"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An API to bind multiple values separately, only to later inject them as a complete collection.\n * Multibinder is intended for use in your application's module:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class SnacksModule extends AbstractModule {\n *   protected void configure() {\n *     Multibinder\u0026lt;Snack\u0026gt; multibinder\n *         = Multibinder.newSetBinder(binder(), Snack.class);\n *     multibinder.addBinding().toInstance(new Twix());\n *     multibinder.addBinding().toProvider(SnickersProvider.class);\n *     multibinder.addBinding().to(Skittles.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eWith this binding, a {@link Set}{@code \u003cSnack\u003e} can now be injected:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * class SnackMachine {\n *   {@literal @}Inject\n *   public SnackMachine(Set\u0026lt;Snack\u0026gt; snacks) { ... }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * If desired, {@link Collection}{@code \u003cProvider\u003cSnack\u003e\u003e} can also be injected.\n *\n * \u003cp\u003eContributing multibindings from different modules is supported. For example, it is okay for\n * both {@code CandyModule} and {@code ChipsModule} to create their own {@code Multibinder\u003cSnack\u003e},\n * and to each contribute bindings to the set of snacks. When that set is injected, it will contain\n * elements from both modules.\n *\n * \u003cp\u003eThe set's iteration order is consistent with the binding order. This is convenient when\n * multiple elements are contributed by the same module because that module can order its bindings\n * appropriately. Avoid relying on the iteration order of elements contributed by different modules,\n * since there is no equivalent mechanism to order modules.\n *\n * \u003cp\u003eThe set is unmodifiable. Elements can only be added to the set by configuring the multibinder.\n * Elements can never be removed from the set.\n *\n * \u003cp\u003eElements are resolved at set injection time. If an element is bound to a provider, that\n * provider's get method will be called each time the set is injected (unless the binding is also\n * scoped).\n *\n * \u003cp\u003eAnnotations are used to create different sets of the same element type. Each distinct\n * annotation gets its own independent collection of elements.\n *\n * \u003cp\u003e\u003cstrong\u003eElements must be distinct.\u003c/strong\u003e If multiple bound elements have the same value,\n * set injection will fail.\n *\n * \u003cp\u003e\u003cstrong\u003eElements must be non-null.\u003c/strong\u003e If any set element is null, set injection will\n * fail.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.multibindings.Multibinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(Binder binder, TypeLiteral\u003cT\u003e type)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with no binding annotation.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(Binder binder, Class\u003cT\u003e type)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with no binding annotation.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(\n      Binder binder, TypeLiteral\u003cT\u003e type, Annotation annotation)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with {@code annotation}.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(\n      Binder binder, Class\u003cT\u003e type, Annotation annotation)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with {@code annotation}.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(\n      Binder binder, TypeLiteral\u003cT\u003e type, Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with {@code annotationType}.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(Binder binder, Key\u003cT\u003e key)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of the key's type in a {@link Set} that is\n   * itself bound with the annotation (if any) of the key.\n   *\n   * @since 4.0\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(\n      Binder binder, Class\u003cT\u003e type, Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": "/**\n   * Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is\n   * itself bound with {@code annotationType}.\n   */"
				},
				{
					"signature": "private Multibinder(RealMultibinder\u003cT\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "public Multibinder\u003cT\u003e permitDuplicates()",
					"documentation": "/**\n   * Configures the bound set to silently discard duplicate elements. When multiple equal values are\n   * bound, the one that gets included is arbitrary. When multiple modules contribute elements to\n   * the set, this configuration option impacts all of them.\n   *\n   * @return this multibinder\n   * @since 3.0\n   */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e addBinding()",
					"documentation": "/**\n   * Returns a binding builder used to add a new element in the set. Each bound element must have a\n   * distinct value. Bound providers will be evaluated each time the set is injected.\n   *\n   * \u003cp\u003eIt is an error to call this method without also calling one of the {@code to} methods on the\n   * returned binding builder.\n   *\n   * \u003cp\u003eScoping elements independently is supported. Use the {@code in} method to specify a binding\n   * scope.\n   */"
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.DuplicateElementModule",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest.MultibindingGuiceModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerMethodScanner",
				"com.google.inject.grapher.demo.MultibinderModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding for a Multibinder.\n *\n * \u003cp\u003eAlthough Multibinders may be injected through a variety of generic types ({@code Set\u003cV\u003e},\n * {@code Collection\u003cProvider\u003cV\u003e\u003e}, and {@code Set\u003c? extends V\u003e} ), a MultibinderBinding exists only\n * on the Binding associated with the {@code Set\u003cV\u003e} key. Injectable types can be discovered using\n * {@link #getSetKey} (which will return the {@code Set\u003cV\u003e} key), or {@link #getAlternateSetKeys}\n * (which will return the other keys that can inject this data). Other bindings can be validated to\n * be derived from this MultibinderBinding using {@link #containsElement(Element)}.\n *\n * @param \u003cT\u003e The fully qualified type of the set, including Set. For example: {@code\n *     MultibinderBinding\u003cSet\u003cBoolean\u003e\u003e}\n * @since 3.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.multibindings.MultibinderBinding",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Scans a module for annotations that signal multibindings, mapbindings, and optional bindings.\n *\n * @since 4.0\n * @deprecated This functionality is installed by default. All references to this can be safely\n *     removed. This class will be removed in Guice 4.4\n */",
			"name": "com.google.inject.multibindings.MultibindingsScanner",
			"extends": "",
			"Methods": [
				{
					"signature": "private MultibindingsScanner()",
					"documentation": "/**\n * Scans a module for annotations that signal multibindings, mapbindings, and optional bindings.\n *\n * @since 4.0\n * @deprecated This functionality is installed by default. All references to this can be safely\n *     removed. This class will be removed in Guice 4.4\n */"
				},
				{
					"signature": "@Deprecated\n  public static Module asModule()",
					"documentation": "/**\n   * Returns a module that, when installed, will scan all modules for methods with the annotations\n   * {@literal @}{@link ProvidesIntoMap}, {@literal @}{@link ProvidesIntoSet}, and\n   * {@literal @}{@link ProvidesIntoOptional}.\n   *\n   * \u003cp\u003eThis is a convenience method, equivalent to doing {@code\n   * binder().scanModulesForAnnotatedMethods(MultibindingsScanner.scanner())}.\n   *\n   * @deprecated This functionality is now installed by default. All references/installations can be\n   *     eliminated.\n   */"
				},
				{
					"signature": "@Deprecated\n  public static ModuleAnnotatedMethodScanner scanner()",
					"documentation": "/**\n   * @deprecated This method returns an empty scanner since the preexisting functionality is\n   *     installed by default.\n   */"
				},
				{
					"signature": "@Override\n      public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": "/**\n   * @deprecated This method returns an empty scanner since the preexisting functionality is\n   *     installed by default.\n   */"
				},
				{
					"signature": "@Override\n      public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n          Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScanner"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A visitor for the multibinder extension.\n *\n * \u003cp\u003eIf your {@link BindingTargetVisitor} implements this interface, bindings created by using\n * {@link Multibinder}, {@link MapBinder} or {@link OptionalBinderBinding} will be visited through\n * this interface.\n *\n * @since 3.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.multibindings.MultibindingsTargetVisitor",
			"extends": "com.google.inject.spi.BindingTargetVisitor",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An API to bind optional values, optionally with a default value. OptionalBinder fulfills two\n * roles:\n *\n * \u003col\u003e\n *   \u003cli\u003eIt allows a framework to define an injection point that may or may not be bound by users.\n *   \u003cli\u003eIt allows a framework to supply a default value that can be changed by users.\n * \u003c/ol\u003e\n *\n * \u003cp\u003eWhen an OptionalBinder is added, it will always supply the bindings: {@code Optional\u003cT\u003e} and\n * {@code Optional\u003cProvider\u003cT\u003e\u003e}. Both {@link java.util.Optional java.util.Optional} and {@link\n * com.google.common.base.Optional com.google.common.base.Optional} are bound for compatibility. If\n * {@link #setBinding} or {@link #setDefault} are called, it will also bind {@code T}.\n *\n * \u003cp\u003e{@code setDefault} is intended for use by frameworks that need a default value. User code can\n * call {@code setBinding} to override the default. \u003cb\u003eWarning: Even if setBinding is called, the\n * default binding will still exist in the object graph. If it is a singleton, it will be\n * instantiated in {@code Stage.PRODUCTION}.\u003c/b\u003e\n *\n * \u003cp\u003eIf setDefault or setBinding are linked to Providers, the Provider may return {@code null}. If\n * it does, {@code Optional\u003cT\u003e} will be bound to an absent Optional. Binding setBinding to a\n * Provider that returns null will not cause OptionalBinder to fall back to the setDefault binding.\n *\n * \u003cp\u003eIf neither setDefault nor setBinding are called, it will try to link to a user-supplied\n * binding of the same type. If no binding exists, the optionals will be absent. Otherwise, if a\n * user-supplied binding of that type exists, or if setBinding or setDefault are called, the\n * optionals will return present if they are bound to a non-null value.\n *\n * \u003cp\u003eValues are resolved at injection time. If a value is bound to a provider, that provider's get\n * method will be called each time the optional is injected (unless the binding is also scoped, or\n * an optional of provider is injected).\n *\n * \u003cp\u003eAnnotations are used to create different optionals of the same key/value type. Each distinct\n * annotation gets its own independent binding.\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Renamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eWith this module, an {@code Optional\u003cRenamer\u003e} can now be injected. With no other bindings,\n * the optional will be absent. Users can specify bindings in one of two ways:\n *\n * \u003cp\u003eOption 1:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserRenamerModule extends AbstractModule {\n *   protected void configure() {\n *     bind(Renamer.class).to(ReplacingRenamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eor Option 2:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserRenamerModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Renamer.class)\n *         .setBinding().to(ReplacingRenamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * With both options, the {@code Optional\u003cRenamer\u003e} will be present and supply the ReplacingRenamer.\n *\n * \u003cp\u003eDefault values can be supplied using:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setDefault().toInstance(DEFAULT_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * With the above module, code can inject an {@code @LookupUrl String} and it will supply the\n * DEFAULT_LOOKUP_URL. A user can change this value by binding\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserLookupModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setBinding().toInstance(CUSTOM_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * ... which will override the default value.\n *\n * \u003cp\u003eIf one module uses setDefault the only way to override the default is to use setBinding. It is\n * an error for a user to specify the binding without using OptionalBinder if setDefault or\n * setBinding are called. For example,\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setDefault().toInstance(DEFAULT_LOOKUP_URL);\n *   }\n * }\n * public class UserLookupModule extends AbstractModule {\n *   protected void configure() {\n *     bind(Key.get(String.class, LookupUrl.class)).toInstance(CUSTOM_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * ... would generate an error, because both the framework and the user are trying to bind\n * {@code @LookupUrl String}.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.OptionalBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cT\u003e OptionalBinder\u003cT\u003e newOptionalBinder(Binder binder, Class\u003cT\u003e type)",
					"documentation": "/**\n * An API to bind optional values, optionally with a default value. OptionalBinder fulfills two\n * roles:\n *\n * \u003col\u003e\n *   \u003cli\u003eIt allows a framework to define an injection point that may or may not be bound by users.\n *   \u003cli\u003eIt allows a framework to supply a default value that can be changed by users.\n * \u003c/ol\u003e\n *\n * \u003cp\u003eWhen an OptionalBinder is added, it will always supply the bindings: {@code Optional\u003cT\u003e} and\n * {@code Optional\u003cProvider\u003cT\u003e\u003e}. Both {@link java.util.Optional java.util.Optional} and {@link\n * com.google.common.base.Optional com.google.common.base.Optional} are bound for compatibility. If\n * {@link #setBinding} or {@link #setDefault} are called, it will also bind {@code T}.\n *\n * \u003cp\u003e{@code setDefault} is intended for use by frameworks that need a default value. User code can\n * call {@code setBinding} to override the default. \u003cb\u003eWarning: Even if setBinding is called, the\n * default binding will still exist in the object graph. If it is a singleton, it will be\n * instantiated in {@code Stage.PRODUCTION}.\u003c/b\u003e\n *\n * \u003cp\u003eIf setDefault or setBinding are linked to Providers, the Provider may return {@code null}. If\n * it does, {@code Optional\u003cT\u003e} will be bound to an absent Optional. Binding setBinding to a\n * Provider that returns null will not cause OptionalBinder to fall back to the setDefault binding.\n *\n * \u003cp\u003eIf neither setDefault nor setBinding are called, it will try to link to a user-supplied\n * binding of the same type. If no binding exists, the optionals will be absent. Otherwise, if a\n * user-supplied binding of that type exists, or if setBinding or setDefault are called, the\n * optionals will return present if they are bound to a non-null value.\n *\n * \u003cp\u003eValues are resolved at injection time. If a value is bound to a provider, that provider's get\n * method will be called each time the optional is injected (unless the binding is also scoped, or\n * an optional of provider is injected).\n *\n * \u003cp\u003eAnnotations are used to create different optionals of the same key/value type. Each distinct\n * annotation gets its own independent binding.\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Renamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eWith this module, an {@code Optional\u003cRenamer\u003e} can now be injected. With no other bindings,\n * the optional will be absent. Users can specify bindings in one of two ways:\n *\n * \u003cp\u003eOption 1:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserRenamerModule extends AbstractModule {\n *   protected void configure() {\n *     bind(Renamer.class).to(ReplacingRenamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * \u003cp\u003eor Option 2:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserRenamerModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Renamer.class)\n *         .setBinding().to(ReplacingRenamer.class);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * With both options, the {@code Optional\u003cRenamer\u003e} will be present and supply the ReplacingRenamer.\n *\n * \u003cp\u003eDefault values can be supplied using:\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setDefault().toInstance(DEFAULT_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * With the above module, code can inject an {@code @LookupUrl String} and it will supply the\n * DEFAULT_LOOKUP_URL. A user can change this value by binding\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class UserLookupModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setBinding().toInstance(CUSTOM_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * ... which will override the default value.\n *\n * \u003cp\u003eIf one module uses setDefault the only way to override the default is to use setBinding. It is\n * an error for a user to specify the binding without using OptionalBinder if setDefault or\n * setBinding are called. For example,\n *\n * \u003cpre\u003e\u003ccode\u003e\n * public class FrameworkModule extends AbstractModule {\n *   protected void configure() {\n *     OptionalBinder.newOptionalBinder(binder(), Key.get(String.class, LookupUrl.class))\n *         .setDefault().toInstance(DEFAULT_LOOKUP_URL);\n *   }\n * }\n * public class UserLookupModule extends AbstractModule {\n *   protected void configure() {\n *     bind(Key.get(String.class, LookupUrl.class)).toInstance(CUSTOM_LOOKUP_URL);\n *   }\n * }\u003c/code\u003e\u003c/pre\u003e\n *\n * ... would generate an error, because both the framework and the user are trying to bind\n * {@code @LookupUrl String}.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */"
				},
				{
					"signature": "public static \u003cT\u003e OptionalBinder\u003cT\u003e newOptionalBinder(Binder binder, TypeLiteral\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT\u003e OptionalBinder\u003cT\u003e newOptionalBinder(Binder binder, Key\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "private OptionalBinder(RealOptionalBinder\u003cT\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e setDefault()",
					"documentation": "/**\n   * Returns a binding builder used to set the default value that will be injected. The binding set\n   * by this method will be ignored if {@link #setBinding} is called.\n   *\n   * \u003cp\u003eIt is an error to call this method without also calling one of the {@code to} methods on the\n   * returned binding builder.\n   */"
				},
				{
					"signature": "public LinkedBindingBuilder\u003cT\u003e setBinding()",
					"documentation": "/**\n   * Returns a binding builder used to set the actual value that will be injected. This overrides\n   * any binding set by {@link #setDefault}.\n   *\n   * \u003cp\u003eIt is an error to call this method without also calling one of the {@code to} methods on the\n   * returned binding builder.\n   */"
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.RealOptionalBinder"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerMethodScanner"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding for a OptionalBinder.\n *\n * \u003cp\u003eAlthough OptionalBinders may be injected through a variety of types {@code V}, {@code\n * Optional\u003cV\u003e}, {@code Optional\u003cProvider\u003cV\u003e\u003e}, etc..), an OptionalBinderBinding exists only on the\n * Binding associated with the {@code Optional\u003cV\u003e} key. Injectable types can be discovered using\n * {@link #getKey} (which will return the {@code Optional\u003cV\u003e} key), or{@link #getAlternateKeys}\n * (which will return the other keys that can inject this data). Other bindings can be validated to\n * be derived from this OptionalBinderBinding using {@link #containsElement}.\n *\n * @param \u003cT\u003e The fully qualified type of the optional binding, including Optional. For example:\n *     {@code Optional\u003cString\u003e}.\n * @since 4.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.multibindings.OptionalBinderBinding",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates methods of a {@link Module} to add items to a {@link MapBinder}. The method's return\n * type, binding annotation and additional key annotation determines what Map this will contribute\n * to. For example,\n *\n * \u003cpre\u003e\n * {@literal @}ProvidesIntoMap\n * {@literal @}StringMapKey(\"Foo\")\n * {@literal @}Named(\"plugins\")\n * Plugin provideFooUrl(FooManager fm) { return fm.getPlugin(); }\n *\n * {@literal @}ProvidesIntoMap\n * {@literal @}StringMapKey(\"Bar\")\n * {@literal @}Named(\"plugins\")\n * Plugin provideBarUrl(BarManager bm) { return bm.getPlugin(); }\n * \u003c/pre\u003e\n *\n * will add two items to the {@code @Named(\"plugins\") Map\u003cString, Plugin\u003e} map. The key 'Foo' will\n * map to the provideFooUrl method, and the key 'Bar' will map to the provideBarUrl method. The\n * values are bound as providers and will be evaluated at injection time.\n *\n * \u003cp\u003eBecause the key is specified as an annotation, only Strings, Classes, enums, primitive types\n * and annotation instances are supported as keys.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.ProvidesIntoMap",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule",
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates methods of a {@link Module} to add items to a {@link Multibinder}. The method's return\n * type and binding annotation determines what Optional this will contribute to. For example,\n *\n * \u003cpre\u003e\n * {@literal @}ProvidesIntoOptional(DEFAULT)\n * {@literal @}Named(\"url\")\n * String provideFooUrl(FooManager fm) { returm fm.getUrl(); }\n *\n * {@literal @}ProvidesIntoOptional(ACTUAL)\n * {@literal @}Named(\"url\")\n * String provideBarUrl(BarManager bm) { return bm.getUrl(); }\n * \u003c/pre\u003e\n *\n * will set the default value of {@code @Named(\"url\") Optional\u003cString\u003e} to foo's URL, and then\n * override it to bar's URL.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.ProvidesIntoOptional",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.multibindings.Type"
			]
		},
		{
			"documentation": "/** @since 4.0 */",
			"name": "com.google.inject.multibindings.Type",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates methods of a {@link Module} to add items to a {@link Multibinder}. The method's return\n * type and binding annotation determines what Set this will contribute to. For example,\n *\n * \u003cpre\u003e\n * {@literal @}ProvidesIntoSet\n * {@literal @}Named(\"urls\")\n * String provideFooUrl(FooManager fm) { returm fm.getUrl(); }\n *\n * {@literal @}ProvidesIntoSet\n * {@literal @}Named(\"urls\")\n * String provideBarUrl(BarManager bm) { return bm.getUrl(); }\n * \u003c/pre\u003e\n *\n * will add two items to the {@code @Named(\"urls\") Set\u003cString\u003e} set. The items are bound as\n * providers and will be evaluated at injection time.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.ProvidesIntoSet",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.DuplicateElementModule",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Allows {@literal @}{@link ProvidesIntoMap} to specify a string map key.\n *\n * @since 4.0\n */",
			"name": "com.google.inject.multibindings.StringMapKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates named things.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.name.Named",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTestSuite",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsScopedANamedApple",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.PrivateModuleTest.AB",
				"com.google.inject.ProviderInjectionTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamedClient",
				"com.google.inject.name.NamesTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.ElementsTest.C",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.InjectionPointTest.HasInjections",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.OverrideModuleTest.ExampleModule",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
				"com.google.inject.servlet.ContextPathTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestPrivateModule",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.spi.ProvideTs",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.assistedinject.AnimalFactory",
				"com.google.inject.assistedinject.AnnotatedVersatileCarFactory",
				"com.google.inject.grapher.demo.Lightning"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.name.NamedImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public NamedImpl(String value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				}
			],
			"interfaces": [
				"Named",
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility methods for use with {@code @}{@link Named}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.name.Names",
			"extends": "",
			"Methods": [
				{
					"signature": "private Names()",
					"documentation": "/**\n * Utility methods for use with {@code @}{@link Named}.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public static Named named(String name)",
					"documentation": "/** Creates a {@link Named} annotation with {@code name} as the value. */"
				},
				{
					"signature": "public static void bindProperties(Binder binder, Map\u003cString, String\u003e properties)",
					"documentation": "/** Creates a constant binding to {@code @Named(key)} for each entry in {@code properties}. */"
				},
				{
					"signature": "public static void bindProperties(Binder binder, Properties properties)",
					"documentation": "/**\n   * Creates a constant binding to {@code @Named(key)} for each property. This method binds all\n   * properties including those inherited from {@link Properties#defaults defaults}.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BinderTest.InnerCoreModule",
				"com.google.inject.BindingTest",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.ImplicitBindingTest",
				"com.google.inject.KeyTest",
				"com.google.inject.LoggerInjectionTest",
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.ProviderInjectionTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.TypeListenerTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.googlecode.guice.Jsr330Test",
				"com.googlecode.guice.bundle.OSGiTestActivator",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.ExtensionSpiTest.Module",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.servlet.ContextPathTest",
				"com.google.inject.servlet.ExtensionSpiTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.spring.SpringIntegrationTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealMultibinder.BindingSelection",
				"com.google.inject.servlet.Module"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Visits each of the strategies used to scope an injection.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @since 2.0\n */",
			"name": "com.google.inject.spi.BindingScopingVisitor",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.DefaultBindingScopingVisitor",
				"com.google.inject.spi.FailingBindingScopingVisitor"
			],
			"uses": [],
			"usedBy": [
				"com.google.inject.Scopes"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Contains abstractions for enforcing {@link RestrictedBindingSource}.\n *\n * \u003cp\u003eEnforcement happens in two phases:\n *\n * \u003col\u003e\n *   \u003cli\u003eData structures for enforcement are built during Binder configuration. {@link\n *       PermitMapConstruction} encapsulates this process, and the {@link PermitMap} is the end\n *       result.\n *   \u003cli\u003eRestrictions are enforced by checking each binding for violations with {@link #check},\n *       which uses the {@link PermitMap}(s) built during Binder configuration.\n * \u003c/ol\u003e\n *\n * \u003cp\u003eNote: None of this is thread-safe because it's only used while the Injector is being built,\n * which happens on a single thread.\n *\n * @author vzm@google.com (Vladimir Makaric)\n * @since 5.0\n */",
			"name": "com.google.inject.spi.BindingSourceRestriction",
			"extends": "",
			"Methods": [
				{
					"signature": "private BindingSourceRestriction()",
					"documentation": "/**\n * Contains abstractions for enforcing {@link RestrictedBindingSource}.\n *\n * \u003cp\u003eEnforcement happens in two phases:\n *\n * \u003col\u003e\n *   \u003cli\u003eData structures for enforcement are built during Binder configuration. {@link\n *       PermitMapConstruction} encapsulates this process, and the {@link PermitMap} is the end\n *       result.\n *   \u003cli\u003eRestrictions are enforced by checking each binding for violations with {@link #check},\n *       which uses the {@link PermitMap}(s) built during Binder configuration.\n * \u003c/ol\u003e\n *\n * \u003cp\u003eNote: None of this is thread-safe because it's only used while the Injector is being built,\n * which happens on a single thread.\n *\n * @author vzm@google.com (Vladimir Makaric)\n * @since 5.0\n */"
				},
				{
					"signature": "public static Optional\u003cString\u003e getMissingImplementationSuggestion(\n      GuiceInternal guiceInternal, Key\u003c?\u003e key)",
					"documentation": "/** Returns a suggestion for how a restricted binding should be created in case it's missing. */"
				},
				{
					"signature": "public static ImmutableList\u003cMessage\u003e check(GuiceInternal guiceInternal, List\u003cElement\u003e elements)",
					"documentation": "/**\n   * Returns all the restriction violations found on the given Module Elements, as error messages.\n   *\n   * \u003cp\u003eNote: Intended to be used on Module Elements, not Injector Elements, ie. the result of\n   * {@link Elements#getElements} not {@code Injector.getElements}. The Module Elements this check\n   * cares about are:\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003eModule Bindings, which are always explicit and always have an {@link ElementSource} (with\n   *       a Module Stack), unlike Injector Bindings, which may be implicit and bereft of an\n   *       ElementSource.\n   *   \u003cli\u003e{@link PrivateElements}, which represent the recursive case of this check. They contain a\n   *       list of elements that this check is recursively called on.\n   * \u003c/ul\u003e\n   */"
				},
				{
					"signature": "private static ImmutableList\u003cMessage\u003e check(List\u003cElement\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "private static ImmutableList\u003cMessage\u003e check(Element element)",
					"documentation": ""
				},
				{
					"signature": "private static Optional\u003cMessage\u003e check(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private static String getViolationMessage(\n      Key\u003c?\u003e key,\n      String explanation,\n      ImmutableSet\u003cClass\u003c? extends Annotation\u003e\u003e acceptablePermits,\n      boolean annotationRestricted)",
					"documentation": ""
				},
				{
					"signature": "private static ImmutableSet\u003cClass\u003c? extends Annotation\u003e\u003e getAllPermits(\n      ElementSource elementSource)",
					"documentation": "/** Get all permits on the element source chain. */"
				},
				{
					"signature": "private static boolean isExempt(ElementSource elementSource, String exemptModulesRegex)",
					"documentation": ""
				},
				{
					"signature": "private static Iterable\u003cString\u003e getAllModules(ElementSource elementSource)",
					"documentation": ""
				},
				{
					"signature": "private static void clear(Element element)",
					"documentation": ""
				},
				{
					"signature": "private static void clear(ElementSource elementSource)",
					"documentation": ""
				},
				{
					"signature": "private static RestrictedBindingSource getRestriction(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private static Stream\u003cClass\u003c? extends Annotation\u003e\u003e getPermits(Class\u003c?\u003e clazz)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction.PermitMapImpl"
			],
			"usedBy": [
				"com.google.inject.internal.MissingImplementationErrorHints"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.PermitMap",
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction"
			]
		},
		{
			"documentation": "/** Mapping between an element source and its permit annotations. */",
			"name": "com.google.inject.spi.PermitMap",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction.PermitMapImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Builds the map from each module to all the permit annotations on its module stack.\n   *\n   * \u003cp\u003eBindings refer to the module that created them via a {@link ModuleSource}. The map built\n   * here maps a module's {@link ModuleSource} to all the {@link RestrictedBindingSource.Permit}\n   * annotations found on the path from the root of the module hierarchy to it. This path contains\n   * all the modules that transitively install the module (including the module itself). This path\n   * is also known as the module stack.\n   *\n   * \u003cp\u003eThe map is built by piggybacking on the depth-first traversal of the module hierarchy during\n   * Binder configuration.\n   */",
			"name": "com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction",
			"extends": "",
			"Methods": [
				{
					"signature": "PermitMap getPermitMap()",
					"documentation": "/**\n     * Returns a possibly unfinished map. The map should only be used after the construction is\n     * finished.\n     */"
				},
				{
					"signature": "void restoreCurrentModulePermits(ModuleSource moduleSource)",
					"documentation": "/**\n     * Sets the permits on the current module installation path to the permits on the given module\n     * source so that subsequently installed modules may inherit them. Used only for method\n     * scanning, so that modules installed by scanners inherit permits from the method's module.\n     */"
				},
				{
					"signature": "void pushModule(Class\u003c?\u003e module, ModuleSource moduleSource)",
					"documentation": "/** Called by the Binder prior to entering a module's configure method. */"
				},
				{
					"signature": "void popModule()",
					"documentation": "/** Called by the Binder when it exits a module's configure method. */"
				},
				{
					"signature": "void finish()",
					"documentation": "/** Finishes the {@link PermitMap}. Called by the Binder when all modules are installed. */"
				},
				{
					"signature": "@VisibleForTesting\n    static boolean isElementSourceCleared(ElementSource elementSource)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction.PermitMapImpl"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction.PermitMapImpl"
			]
		},
		{
			"documentation": "/**\n   * Builds the map from each module to all the permit annotations on its module stack.\n   *\n   * \u003cp\u003eBindings refer to the module that created them via a {@link ModuleSource}. The map built\n   * here maps a module's {@link ModuleSource} to all the {@link RestrictedBindingSource.Permit}\n   * annotations found on the path from the root of the module hierarchy to it. This path contains\n   * all the modules that transitively install the module (including the module itself). This path\n   * is also known as the module stack.\n   *\n   * \u003cp\u003eThe map is built by piggybacking on the depth-first traversal of the module hierarchy during\n   * Binder configuration.\n   */",
			"name": "com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction.PermitMapImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n      public ImmutableSet\u003cClass\u003c? extends Annotation\u003e\u003e getPermits(ElementSource elementSource)",
					"documentation": "/**\n   * Builds the map from each module to all the permit annotations on its module stack.\n   *\n   * \u003cp\u003eBindings refer to the module that created them via a {@link ModuleSource}. The map built\n   * here maps a module's {@link ModuleSource} to all the {@link RestrictedBindingSource.Permit}\n   * annotations found on the path from the root of the module hierarchy to it. This path contains\n   * all the modules that transitively install the module (including the module itself). This path\n   * is also known as the module stack.\n   *\n   * \u003cp\u003eThe map is built by piggybacking on the depth-first traversal of the module hierarchy during\n   * Binder configuration.\n   */"
				},
				{
					"signature": "@Override\n      public void clear()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.PermitMap"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.BindingSourceRestriction",
				"com.google.inject.spi.BindingSourceRestriction.PermitMapConstruction"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Visits each of the strategies used to find an instance to satisfy an injection.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @since 2.0\n */",
			"name": "com.google.inject.spi.BindingTargetVisitor",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ProvidesMethodTargetVisitor"
			],
			"implementedBy": [
				"com.google.inject.spi.DefaultBindingTargetVisitor"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to the constructor of a concrete clss. To resolve injections, an instance is\n * instantiated by invoking the constructor.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ConstructorBinding",
			"extends": "Binding,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding created from converting a bound instance to a new type. The source binding has the same\n * binding annotation but a different type.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ConvertedConstantBinding",
			"extends": "Binding,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * No-op visitor for subclassing. All interface methods simply delegate to {@link #visitOther()},\n * returning its result.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.DefaultBindingScopingVisitor",
			"extends": "",
			"Methods": [
				{
					"signature": "protected V visitOther()",
					"documentation": "/** Default visit implementation. Returns {@code null}. */"
				},
				{
					"signature": "@Override\n  public V visitEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visitScope(Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visitScopeAnnotation(Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visitNoScoping()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.BindingScopingVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ScopesTest.ScopeMutatingProvisionListener"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * No-op visitor for subclassing. All interface methods simply delegate to {@link\n * #visitOther(Binding)}, returning its result.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"extends": "",
			"Methods": [
				{
					"signature": "protected V visitOther(Binding\u003c? extends T\u003e binding)",
					"documentation": "/** Default visit implementation. Returns {@code null}. */"
				},
				{
					"signature": "@Override\n  public V visit(InstanceBinding\u003c? extends T\u003e instanceBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ProviderInstanceBinding\u003c? extends T\u003e providerInstanceBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ProviderKeyBinding\u003c? extends T\u003e providerKeyBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(LinkedKeyBinding\u003c? extends T\u003e linkedKeyBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ExposedBinding\u003c? extends T\u003e exposedBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(UntargettedBinding\u003c? extends T\u003e untargettedBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ConstructorBinding\u003c? extends T\u003e constructorBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ConvertedConstantBinding\u003c? extends T\u003e convertedConstantBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public V visit(ProviderBinding\u003c? extends T\u003e providerBinding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.BindingTargetVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.grapher.ShortNameFactoryTest"
			],
			"subClasses": [
				"com.google.inject.spi.FailingTargetVisitor",
				"com.google.inject.spi.ProviderMethodsTest.BindingCapturer",
				"com.google.inject.spi.SpiBindingsTest.FailingSpiTargetVisitor"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * No-op visitor for subclassing. All interface methods simply delegate to {@link\n * #visitOther(Element)}, returning its result.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @author sberlin@gmail.com (Sam Berlin)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.DefaultElementVisitor",
			"extends": "",
			"Methods": [
				{
					"signature": "protected V visitOther(Element element)",
					"documentation": "/** Default visit implementation. Returns {@code null}. */"
				},
				{
					"signature": "@Override\n  public V visit(Message message)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e V visit(Binding\u003cT\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(InterceptorBinding interceptorBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ScopeBinding scopeBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(TypeConverterBinding typeConverterBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e V visit(ProviderLookup\u003cT\u003e providerLookup)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(InjectionRequest\u003c?\u003e injectionRequest)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(StaticInjectionRequest staticInjectionRequest)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e V visit(MembersInjectorLookup\u003cT\u003e lookup)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(TypeListenerBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ProvisionListenerBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(DisableCircularProxiesOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(RequireExplicitBindingsOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(RequireAtInjectOnConstructorsOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(RequireExactBindingAnnotationsOption option)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public V visit(ModuleAnnotatedMethodScannerBinding binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ElementVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.MethodInterceptionTest"
			],
			"subClasses": [
				"com.google.inject.spi.FailingElementVisitor"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A variable that can be resolved by an injector.\n *\n * \u003cp\u003eUse {@link #get} to build a freestanding dependency, or {@link InjectionPoint} to build one\n * that's attached to a constructor, method or field.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.Dependency",
			"extends": "",
			"Methods": [
				{
					"signature": "Dependency(InjectionPoint injectionPoint, Key\u003cT\u003e key, boolean nullable, int parameterIndex)",
					"documentation": "/**\n * A variable that can be resolved by an injector.\n *\n * \u003cp\u003eUse {@link #get} to build a freestanding dependency, or {@link InjectionPoint} to build one\n * that's attached to a constructor, method or field.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "public static \u003cT\u003e Dependency\u003cT\u003e get(Key\u003cT\u003e key)",
					"documentation": "/**\n   * Returns a new dependency that is not attached to an injection point. The returned dependency is\n   * nullable.\n   */"
				},
				{
					"signature": "public static Set\u003cDependency\u003c?\u003e\u003e forInjectionPoints(Set\u003cInjectionPoint\u003e injectionPoints)",
					"documentation": "/** Returns the dependencies from the given injection points. */"
				},
				{
					"signature": "public Key\u003cT\u003e getKey()",
					"documentation": "/** Returns the key to the binding that satisfies this dependency. */"
				},
				{
					"signature": "public boolean isNullable()",
					"documentation": "/** Returns true if null is a legal value for this dependency. */"
				},
				{
					"signature": "public InjectionPoint getInjectionPoint()",
					"documentation": "/**\n   * Returns the injection point to which this dependency belongs, or null if this dependency isn't\n   * attached to a particular injection point.\n   */"
				},
				{
					"signature": "public int getParameterIndex()",
					"documentation": "/**\n   * Returns the index of this dependency in the injection point's parameter list, or {@code -1} if\n   * this dependency does not belong to a parameter list. Only method and constuctor dependencies\n   * are elements in a parameter list.\n   */"
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.MoreTypes"
			],
			"usedBy": [
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.internal.InstanceBindingImpl",
				"com.google.inject.internal.InternalInjectorCreator",
				"com.google.inject.internal.ProviderInstanceBindingImpl",
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder",
				"com.google.inject.internal.RealMapBinder.MultimapBinder.RealMultimapProvider",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealMultibinder.BindingSelection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to disable circular proxies.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */",
			"name": "com.google.inject.spi.DisableCircularProxiesOption",
			"extends": "",
			"Methods": [
				{
					"signature": "DisableCircularProxiesOption(Object source)",
					"documentation": "/**\n * A request to disable circular proxies.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A core component of a module or injector.\n *\n * \u003cp\u003eThe elements of a module can be inspected, validated and rewritten. Use {@link\n * Elements#getElements(com.google.inject.Module[]) Elements.getElements()} to read the elements\n * from a module, and {@link Elements#getModule(Iterable) Elements.getModule()} to rewrite them.\n * This can be used for static analysis and generation of Guice modules.\n *\n * \u003cp\u003eThe elements of an injector can be inspected and exercised. Use {@link\n * com.google.inject.Injector#getBindings Injector.getBindings()} to reflect on Guice injectors.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.Element",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.PrivateElements"
			],
			"implementedBy": [
				"com.google.inject.spi.DisableCircularProxiesOption",
				"com.google.inject.spi.InjectionRequest",
				"com.google.inject.spi.InterceptorBinding",
				"com.google.inject.spi.MembersInjectorLookup",
				"com.google.inject.spi.Message",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerBinding",
				"com.google.inject.spi.ProviderLookup",
				"com.google.inject.spi.ProvisionListenerBinding",
				"com.google.inject.spi.RequireAtInjectOnConstructorsOption",
				"com.google.inject.spi.RequireExactBindingAnnotationsOption",
				"com.google.inject.spi.RequireExplicitBindingsOption",
				"com.google.inject.spi.ScopeBinding",
				"com.google.inject.spi.StaticInjectionRequest",
				"com.google.inject.spi.TypeConverterBinding",
				"com.google.inject.spi.TypeListenerBinding"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Contains information about where and how an {@link Element element} was bound.\n *\n * \u003cp\u003eThe {@link #getDeclaringSource() declaring source} refers to a location in source code that\n * defines the Guice {@link Element element}. For example, if the element is created from a method\n * annotated by {@literal @Provides}, the declaring source of element would be the method itself.\n *\n * \u003cp\u003eThe sequence of class names of {@link com.google.inject.Module modules} involved in the\n * element creation can be retrieved by {@link #getModuleClassNames()}. The order of the module\n * class names is reverse chronological. The first module (index 0) is the module that installs the\n * {@link Element element}. The last module is the root module.\n *\n * \u003cp\u003eIn order to support the cases where a Guice {@link Element element} is created from another\n * Guice {@link Element element} (original) (e.g., by {@link Element#applyTo}), it also provides a\n * reference to the original element source ({@link #getOriginalElementSource()}).\n *\n * @since 4.0\n */",
			"name": "com.google.inject.spi.ElementSource",
			"extends": "",
			"Methods": [
				{
					"signature": "ElementSource(\n      @Nullable ElementSource originalSource,\n      boolean trustedOriginalSource,\n      Object declaringSource,\n      ModuleSource moduleSource,\n      ModuleAnnotatedMethodScanner scanner)",
					"documentation": "/**\n   * Creates a new {@ElementSource} from the given parameters.\n   *\n   * @param originalSource The source of element that this element was created from (if there is\n   *     any), otherwise {@code null}.\n   * @param declaringSource the source (in)directly declared the element.\n   * @param moduleSource the moduleSource when the element is bound\n   * @param partialCallStack the partial call stack from the top module to where the element is\n   *     bound\n   */"
				},
				{
					"signature": "public ElementSource getOriginalElementSource()",
					"documentation": "/**\n   * Returns the {@link ElementSource} of the element this was created or copied from. If this was\n   * not created or copied from another element, returns {@code null}.\n   */"
				},
				{
					"signature": "public Object getDeclaringSource()",
					"documentation": "/**\n   * Returns a single location in source code that defines the element. It can be any object such as\n   * {@link java.lang.reflect.Constructor}, {@link java.lang.reflect.Method}, {@link\n   * java.lang.reflect.Field}, {@link StackTraceElement}, etc. For example, if the element is\n   * created from a method annotated by {@literal @Provides}, the declaring source of element would\n   * be the method itself.\n   */"
				},
				{
					"signature": "public List\u003cString\u003e getModuleClassNames()",
					"documentation": "/**\n   * Returns the class names of modules involved in creating this {@link Element}. The first element\n   * (index 0) is the class name of module that defined the element, and the last element is the\n   * class name of root module.\n   */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": "/** Returns {@code getDeclaringSource().toString()} value. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Visit elements.\n *\n * @param \u003cV\u003e any type to be returned by the visit method. Use {@link Void} with {@code return null}\n *     if no return type is needed.\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ElementVisitor",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.DefaultElementVisitor"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Exposes elements of a module so they can be inspected, validated or {@link\n * Element#applyTo(Binder) rewritten}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.Elements",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public Object visit(InstanceBinding\u003c?\u003e binding)",
					"documentation": "/**\n * Exposes elements of a module so they can be inspected, validated or {@link\n * Element#applyTo(Binder) rewritten}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n        protected Object visitOther(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "public static List\u003cElement\u003e getElements(Module... modules)",
					"documentation": "/** Records the elements executed by {@code modules}. */"
				},
				{
					"signature": "public static List\u003cElement\u003e getElements(Stage stage, Module... modules)",
					"documentation": "/** Records the elements executed by {@code modules}. */"
				},
				{
					"signature": "public static List\u003cElement\u003e getElements(Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/** Records the elements executed by {@code modules}. */"
				},
				{
					"signature": "public static List\u003cElement\u003e getElements(Stage stage, Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/** Records the elements executed by {@code modules}. */"
				},
				{
					"signature": "public static Binder withTrustedSource(\n      GuiceInternal guiceInternal, Binder binder, Object source)",
					"documentation": "/**\n   * Internal version of Binder.withSource for establishing a trusted ElementSource chain for\n   * source-restricting bindings that are re-written using {@link Element#applyTo}.\n   *\n   * \u003cp\u003eUsing Binder.withSource is not trustworthy because it's a public API that external users can\n   * use to spoof the original ElementSource of a binding by calling withSource(bogusElementSource).\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "public static Module getModule(final Iterable\u003c? extends Element\u003e elements)",
					"documentation": "/** Returns the module composed of {@code elements}. */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  static \u003cT\u003e BindingTargetVisitor\u003cT, T\u003e getInstanceVisitor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.servlet.ExtensionSpiTest",
				"com.google.inject.servlet.ServletModuleTest",
				"com.google.inject.servlet.ServletScopesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.binder.AnnotatedElementBuilder",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.ExposureBuilder",
				"com.google.inject.internal.InternalFlags",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.PrivateElementsImpl",
				"com.google.inject.internal.ProviderMethodsModule",
				"com.google.inject.internal.util.StackTraceElements",
				"com.google.inject.spi.Elements.ElementsAsModule",
				"com.google.inject.spi.Elements.ModuleInfo"
			],
			"usedBy": [
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.internal.InstanceBindingImpl",
				"com.google.inject.internal.LinkedBindingImpl",
				"com.google.inject.internal.LinkedProviderBindingImpl",
				"com.google.inject.internal.ProviderInstanceBindingImpl",
				"com.google.inject.util.Modules",
				"com.google.inject.util.Modules.OverrideModule",
				"com.google.inject.internal.SpiUtils"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.Elements.ElementsAsModule",
				"com.google.inject.spi.Elements.ModuleInfo",
				"com.google.inject.spi.Elements.RecordingBinder"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Elements.ElementsAsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "ElementsAsModule(Iterable\u003c? extends Element\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Elements"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Elements.ModuleInfo",
			"extends": "",
			"Methods": [
				{
					"signature": "private ModuleInfo(ModuleSource moduleSource, boolean skipScanning)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.Elements"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Elements.RecordingBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "private RecordingBinder(Stage stage)",
					"documentation": "/**\n     * The current scanner.\n     *\n     * \u003cp\u003eNote that scanners cannot nest, ie. a scanner cannot install a module that requires\n     * scanning - except the built-in @Provides* methods. The built-in scanner isn't tracked by this\n     * variable, only custom scanners are.\n     */"
				},
				{
					"signature": "private RecordingBinder(\n        RecordingBinder prototype,\n        Object source,\n        SourceProvider sourceProvider,\n        boolean trustedSource)",
					"documentation": "/** Creates a recording binder that's backed by {@code prototype}. */"
				},
				{
					"signature": "private RecordingBinder(RecordingBinder parent, PrivateElementsImpl privateElements)",
					"documentation": "/** Creates a private recording binder. */"
				},
				{
					"signature": "@Override\n    public void bindInterceptor(\n        Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n        Matcher\u003c? super Method\u003e methodMatcher,\n        MethodInterceptor... interceptors)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void bindScope(Class\u003c? extends Annotation\u003e annotationType, Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\") \n    public void requestInjection(Object instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e void requestInjection(TypeLiteral\u003cT\u003e type, T instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(final TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e MembersInjector\u003cT\u003e getMembersInjector(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void bindListener(Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeListener listener)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void bindListener(\n        Matcher\u003c? super Binding\u003c?\u003e\u003e bindingMatcher, ProvisionListener... listeners)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void requestStaticInjection(Class\u003c?\u003e... types)",
					"documentation": ""
				},
				{
					"signature": "void scanForAnnotatedMethods()",
					"documentation": "/**\n     * Applies all scanners to the modules we've installed. We skip certain PrivateModules because\n     * store them in more than one Modules map and only want to process them through one of the\n     * maps. (They're stored in both maps to prevent a module from being installed more than once.)\n     */"
				},
				{
					"signature": "@Override\n    public void install(Module module)",
					"documentation": ""
				},
				{
					"signature": "private void forbidNestedScannerMethods(Module module)",
					"documentation": ""
				},
				{
					"signature": "private Iterable\u003cModuleAnnotatedMethodScanner\u003e getAllScanners()",
					"documentation": "/**\n     * Get all scanners registered in this binder and its ancestors.\n     *\n     * \u003cp\u003eShould only be called during module scanning, because at that point registering new\n     * scanners is forbidden.\n     */"
				},
				{
					"signature": "@Override\n    public Stage currentStage()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addError(String message, Object... arguments)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addError(Throwable t)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addError(Message message)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e AnnotatedBindingBuilder\u003cT\u003e bind(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotatedConstantBindingBuilder bindConstant()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e getProvider(final Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e getProvider(final Dependency\u003cT\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e getProvider(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void convertToTypes(\n        Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeConverter converter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public RecordingBinder withSource(final Object source)",
					"documentation": ""
				},
				{
					"signature": "public RecordingBinder withTrustedSource(final Object source)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public RecordingBinder skipSources(Class\u003c?\u003e... classesToSkip)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public PrivateBinder newPrivateBinder()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void disableCircularProxies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void requireExplicitBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void requireAtInjectOnConstructors()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void requireExactBindingAnnotations()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void scanModulesForAnnotatedMethods(ModuleAnnotatedMethodScanner scanner)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void expose(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotatedElementBuilder expose(Class\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public AnnotatedElementBuilder expose(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e AnnotatedElementBuilder exposeInternal(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void annotatedWith(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void annotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "private ModuleSource getModuleSource(Class\u003c?\u003e module)",
					"documentation": ""
				},
				{
					"signature": "private ElementSource getElementSource()",
					"documentation": ""
				},
				{
					"signature": "private boolean moduleScanning()",
					"documentation": "/** Returns if the binder is in the module scanning phase. */"
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Binder",
				"com.google.inject.PrivateBinder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.binder.AnnotatedElementBuilder",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.ExposureBuilder",
				"com.google.inject.internal.InternalFlags",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.PrivateElementsImpl",
				"com.google.inject.internal.ProviderMethodsModule"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Details about a single Guice error and supports formatting itself in the context of other Guice\n * errors.\n *\n * \u003cp\u003eWARNING: The class and its APIs are still experimental and subject to change.\n *\n * @since 5.0\n */",
			"name": "com.google.inject.spi.ErrorDetail",
			"extends": "",
			"Methods": [
				{
					"signature": "protected ErrorDetail(String message, List\u003cObject\u003e sources, Throwable cause)",
					"documentation": "/**\n * Details about a single Guice error and supports formatting itself in the context of other Guice\n * errors.\n *\n * \u003cp\u003eWARNING: The class and its APIs are still experimental and subject to change.\n *\n * @since 5.0\n */"
				},
				{
					"signature": "public boolean isMergeable(ErrorDetail\u003c?\u003e otherError)",
					"documentation": "/**\n   * Returns true if this error can be merged with the {@code otherError} and formatted together.\n   *\n   * \u003cp\u003eBy default this return false and implementations that support merging with other errors\n   * should override this method.\n   */"
				},
				{
					"signature": "public final void format(int index, List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": "/**\n   * Formats this error along with other errors that are mergeable with this error.\n   *\n   * \u003cp\u003e{@code mergeableErrors} is a list that contains all other errors that are reported in the\n   * same exception that are considered to be mergable with this error base on result of calling\n   * {@link #isMergeable}. The list will be empty if non of the other errors are mergable with this\n   * error.\n   *\n   * \u003cp\u003eFormatted error has the following structure:\n   *\n   * \u003cul\u003e\n   *   \u003cli\u003eSummary of the error\n   *   \u003cli\u003eDetails about the error such as the source of the error\n   *   \u003cli\u003eHints for fixing the error if available\n   *   \u003cli\u003eLink to the documentation on this error in greater detail\n   * \u003c/ul\u003e\n   *\n   * @param index index for this error\n   * @param mergeableErrors list of errors that are mergeable with this error\n   * @param formatter for printing the error message\n   */"
				},
				{
					"signature": "protected Optional\u003cString\u003e getLearnMoreLink()",
					"documentation": "/**\n   * Returns an optional link to additional documentation about this error to be included in the\n   * formatted error message.\n   */"
				},
				{
					"signature": "protected Optional\u003cString\u003e getErrorIdentifier()",
					"documentation": "/** Returns an optional string identifier for this error. */"
				},
				{
					"signature": "public String getMessage()",
					"documentation": ""
				},
				{
					"signature": "public List\u003cObject\u003e getSources()",
					"documentation": ""
				},
				{
					"signature": "public Throwable getCause()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Messages"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a key exposed from an enclosed private environment.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ExposedBinding",
			"extends": "Binding,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Implemented by {@link com.google.inject.Binding bindings}, {@link com.google.inject.Provider\n * providers} and instances that expose their dependencies explicitly.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.HasDependencies",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ProvidesMethodBinding"
			],
			"implementedBy": [
				"com.google.inject.spi.HasDependenciesTest.AWithDependencies"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Listens for injections into instances of type {@code I}. Useful for performing further\n * injections, post-injection initialization, and more.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.InjectionListener",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeListenerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A constructor, field or method that can receive injections. Typically this is a member with the\n * {@literal @}{@link Inject} annotation. For non-private, no argument constructors, the member may\n * omit the annotation.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.InjectionPoint",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectionPoint(TypeLiteral\u003c?\u003e declaringType, Method method, boolean optional)",
					"documentation": "/**\n * A constructor, field or method that can receive injections. Typically this is a member with the\n * {@literal @}{@link Inject} annotation. For non-private, no argument constructors, the member may\n * omit the annotation.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */"
				},
				{
					"signature": "InjectionPoint(TypeLiteral\u003c?\u003e declaringType, Constructor\u003c?\u003e constructor)",
					"documentation": ""
				},
				{
					"signature": "InjectionPoint(TypeLiteral\u003c?\u003e declaringType, Field field, boolean optional)",
					"documentation": ""
				},
				{
					"signature": "private ImmutableList\u003cDependency\u003c?\u003e\u003e forMember(\n      Errors errors,\n      Member member,\n      TypeLiteral\u003c?\u003e type,\n      AnnotatedType[] annotatedTypes,\n      Annotation[][] parameterAnnotationsPerParameter,\n      Predicate\u003cInteger\u003e isParameterKotlinNullable)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e Dependency\u003cT\u003e newDependency(Key\u003cT\u003e key, boolean allowsNull, int parameterIndex)",
					"documentation": ""
				},
				{
					"signature": "public Member getMember()",
					"documentation": "/** Returns the injected constructor, field, or method. */"
				},
				{
					"signature": "public List\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": "/**\n   * Returns the dependencies for this injection point. If the injection point is for a method or\n   * constructor, the dependencies will correspond to that member's parameters. Field injection\n   * points always have a single dependency for the field itself.\n   *\n   * @return a possibly-empty list\n   */"
				},
				{
					"signature": "public boolean isOptional()",
					"documentation": "/**\n   * Returns true if this injection point shall be skipped if the injector cannot resolve bindings\n   * for all required dependencies. Both explicit bindings (as specified in a module), and implicit\n   * bindings ({@literal @}{@link com.google.inject.ImplementedBy ImplementedBy}, default\n   * constructors etc.) may be used to satisfy optional injection points.\n   */"
				},
				{
					"signature": "public boolean isToolable()",
					"documentation": "/**\n   * Returns true if the element is annotated with {@literal @}{@link Toolable}.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "public TypeLiteral\u003c?\u003e getDeclaringType()",
					"documentation": "/**\n   * Returns the generic type that defines this injection point. If the member exists on a\n   * parameterized type, the result will include more type information than the member's {@link\n   * Member#getDeclaringClass() raw declaring class}.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT\u003e InjectionPoint forConstructor(Constructor\u003cT\u003e constructor)",
					"documentation": "/**\n   * Returns a new injection point for the specified constructor. If the declaring type of {@code\n   * constructor} is parameterized (such as {@code List\u003cT\u003e}), prefer the overload that includes a\n   * type literal.\n   *\n   * @param constructor any single constructor present on {@code type}.\n   * @since 3.0\n   */"
				},
				{
					"signature": "public static \u003cT\u003e InjectionPoint forConstructor(\n      Constructor\u003cT\u003e constructor, TypeLiteral\u003c? extends T\u003e type)",
					"documentation": "/**\n   * Returns a new injection point for the specified constructor of {@code type}.\n   *\n   * @param constructor any single constructor present on {@code type}.\n   * @param type the concrete type that defines {@code constructor}.\n   * @since 3.0\n   */"
				},
				{
					"signature": "public static InjectionPoint forConstructorOf(TypeLiteral\u003c?\u003e type)",
					"documentation": "/**\n   * Returns a new injection point for the injectable constructor of {@code type}.\n   *\n   * \u003cp\u003eEither a {@code @Inject} annotated constructor or a non-private no arg constructor is\n   * required to be defined by the class corresponding to {@code type}.\n   *\n   * @param type a concrete type with exactly one constructor annotated {@literal @}{@link Inject},\n   *     or a no-arguments constructor that is not private.\n   * @throws ConfigurationException if there is no injectable constructor, more than one injectable\n   *     constructor, or if parameters of the injectable constructor are malformed, such as a\n   *     parameter with multiple binding annotations.\n   */"
				},
				{
					"signature": "public static InjectionPoint forConstructorOf(TypeLiteral\u003c?\u003e type, boolean atInjectRequired)",
					"documentation": "/**\n   * Returns a new injection point for the injectable constructor of {@code type}.\n   *\n   * \u003cp\u003eIf {@code atInjectRequired} is true, the constructor must be annotated with {@code @Inject}.\n   * If {@code atInjectRequired} is false, either a {@code @Inject} annotated constructor or a\n   * non-private no arg constructor is required to be defined by the class corresponding to {@code\n   * type}.\n   *\n   * @param type a concrete type with exactly one constructor annotated {@code @Inject}, or a\n   *     no-arguments constructor that is not private.\n   * @param atInjectRequired whether the constructor must be annotated with {@code Inject}.\n   * @throws ConfigurationException if there is no injectable constructor, more than one injectable\n   *     constructor, or if parameters of the injectable constructor are malformed, such as a\n   *     parameter with multiple binding annotations.\n   * @since 5.0\n   */"
				},
				{
					"signature": "public static InjectionPoint forConstructorOf(Class\u003c?\u003e type)",
					"documentation": "/**\n   * Returns a new injection point for the injectable constructor of {@code type}.\n   *\n   * @param type a concrete type with exactly one constructor annotated {@literal @}{@link Inject},\n   *     or a no-arguments constructor that is not private.\n   * @throws ConfigurationException if there is no injectable constructor, more than one injectable\n   *     constructor, or if parameters of the injectable constructor are malformed, such as a\n   *     parameter with multiple binding annotations.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e InjectionPoint forMethod(Method method, TypeLiteral\u003cT\u003e type)",
					"documentation": "/**\n   * Returns a new injection point for the specified method of {@code type}. This is useful for\n   * extensions that need to build dependency graphs from arbitrary methods.\n   *\n   * @param method any single method present on {@code type}.\n   * @param type the concrete type that defines {@code method}.\n   * @since 4.0\n   */"
				},
				{
					"signature": "public static Set\u003cInjectionPoint\u003e forStaticMethodsAndFields(TypeLiteral\u003c?\u003e type)",
					"documentation": "/**\n   * Returns all static method and field injection points on {@code type}.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as\n   *     a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "public static Set\u003cInjectionPoint\u003e forStaticMethodsAndFields(Class\u003c?\u003e type)",
					"documentation": "/**\n   * Returns all static method and field injection points on {@code type}.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as\n   *     a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "public static Set\u003cInjectionPoint\u003e forInstanceMethodsAndFields(TypeLiteral\u003c?\u003e type)",
					"documentation": "/**\n   * Returns all instance method and field injection points on {@code type}.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as\n   *     a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "public static Set\u003cInjectionPoint\u003e forInstanceMethodsAndFields(Class\u003c?\u003e type)",
					"documentation": "/**\n   * Returns all instance method and field injection points on {@code type}.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as\n   *     a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors)",
					"documentation": "/** Returns true if the binding annotation is in the wrong place. */"
				},
				{
					"signature": "static Annotation getAtInject(AnnotatedElement member)",
					"documentation": ""
				},
				{
					"signature": "private static Set\u003cInjectionPoint\u003e getInjectionPoints(\n      final TypeLiteral\u003c?\u003e type, boolean statics, Errors errors)",
					"documentation": "/**\n   * Returns an ordered, immutable set of injection points for the given type. Members in\n   * superclasses come before members in subclasses. Within a class, fields come before methods.\n   * Overridden methods are filtered out. The order of fields/methods within a class is consistent\n   * but undefined.\n   *\n   * @param statics true is this method should return static members, false for instance members\n   * @param errors used to record errors\n   */"
				},
				{
					"signature": "private static Field[] getDeclaredFields(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "private static Method[] getDeclaredMethods(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "private static boolean isEligibleForInjection(Method method, boolean statics)",
					"documentation": "/**\n   * Returns true if the method is eligible to be injected. This is different than {@link\n   * #isValidMethod}, because ineligibility will not drop a method from being injected if a\n   * superclass was eligible and valid. Bridge and synthetic methods are excluded from eligibility\n   * for two reasons:\n   *\n   * \u003cp\u003ePrior to Java8, javac would generate these methods in subclasses without annotations, which\n   * means this would accidentally stop injecting a method annotated with {@link\n   * javax.inject.Inject}, since the spec says to stop injecting if a subclass isn't annotated with\n   * it.\n   *\n   * \u003cp\u003eStarting at Java8, javac copies the annotations to the generated subclass method, except it\n   * leaves out the generic types. If this considered it a valid injectable method, this would eject\n   * the parent's overridden method that had the proper generic types, and would use invalid\n   * injectable parameters as a result.\n   *\n   * \u003cp\u003eThe fix for both is simply to ignore these synthetic bridge methods.\n   */"
				},
				{
					"signature": "private static boolean isValidMethod(InjectableMethod injectableMethod, Errors errors)",
					"documentation": ""
				},
				{
					"signature": "private static List\u003cTypeLiteral\u003c?\u003e\u003e hierarchyFor(TypeLiteral\u003c?\u003e type)",
					"documentation": ""
				},
				{
					"signature": "private static boolean overrides(Method a, Method b)",
					"documentation": "/**\n   * Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\n   * class is a subclass of b's declaring class.\n   */"
				},
				{
					"signature": "public static Annotation[] getAnnotations(Field field)",
					"documentation": "/**\n   * Returns all the annotations on a field. If Kotlin-support is enabled, the annotations will\n   * include annotations on the related Kotlin-property.\n   *\n   * @since 5.0\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.ProxyFactoryTest",
				"com.google.inject.grapher.AbstractInjectorGrapherTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.DeclaredMembers",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.KotlinSupport",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.Nullability",
				"com.google.inject.internal.util.Classes",
				"com.google.inject.spi.InjectionPoint.InjectableMember",
				"com.google.inject.spi.InjectionPoint.InjectableField",
				"com.google.inject.spi.InjectionPoint.InjectableMethod",
				"com.google.inject.spi.InjectionPoint.InjectableMembers",
				"com.google.inject.spi.InjectionPoint.OverrideIndex",
				"com.google.inject.spi.InjectionPoint.Signature"
			],
			"usedBy": [
				"com.google.inject.internal.BindingBuilder",
				"com.google.inject.internal.ConstructorBindingImpl",
				"com.google.inject.internal.MembersInjectorStore",
				"com.google.inject.internal.ProviderMethodsModule",
				"com.google.inject.util.Providers",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.InjectionPoint.InjectableMember",
				"com.google.inject.spi.InjectionPoint.InjectableField",
				"com.google.inject.spi.InjectionPoint.InjectableMethod",
				"com.google.inject.spi.InjectionPoint.InjectableMembers",
				"com.google.inject.spi.Position",
				"com.google.inject.spi.InjectionPoint.OverrideIndex",
				"com.google.inject.spi.InjectionPoint.Signature"
			]
		},
		{
			"documentation": "/** Node in the doubly-linked list of injectable members (fields and methods). */",
			"name": "com.google.inject.spi.InjectionPoint.InjectableMember",
			"extends": "",
			"Methods": [
				{
					"signature": "InjectableMember(TypeLiteral\u003c?\u003e declaringType, Annotation atInject)",
					"documentation": "/** Node in the doubly-linked list of injectable members (fields and methods). */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectionPoint.InjectableField",
				"com.google.inject.spi.InjectionPoint.InjectableMethod"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPoint.InjectableField",
			"extends": "com.google.inject.spi.InjectionPoint.InjectableMember",
			"Methods": [
				{
					"signature": "InjectableField(TypeLiteral\u003c?\u003e declaringType, Field field, Annotation atInject)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    InjectionPoint toInjectionPoint()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPoint.InjectableMethod",
			"extends": "com.google.inject.spi.InjectionPoint.InjectableMember",
			"Methods": [
				{
					"signature": "InjectableMethod(TypeLiteral\u003c?\u003e declaringType, Method method, Annotation atInject)",
					"documentation": "/**\n     * true if this method overrode a method that was annotated with com.google.inject.Inject. used\n     * to allow different override behavior for guice inject vs javax.inject.Inject\n     */"
				},
				{
					"signature": "@Override\n    InjectionPoint toInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "public boolean isFinal()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Linked list of injectable members. */",
			"name": "com.google.inject.spi.InjectionPoint.InjectableMembers",
			"extends": "",
			"Methods": [
				{
					"signature": "void add(InjectableMember member)",
					"documentation": "/** Linked list of injectable members. */"
				},
				{
					"signature": "void remove(InjectableMember member)",
					"documentation": ""
				},
				{
					"signature": "boolean isEmpty()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Position in type hierarchy. */",
			"name": "com.google.inject.spi.Position",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Keeps track of injectable methods so we can remove methods that get overridden in O(1) time.\n   * Uses our position in the type hierarchy to perform optimizations.\n   */",
			"name": "com.google.inject.spi.InjectionPoint.OverrideIndex",
			"extends": "",
			"Methods": [
				{
					"signature": "OverrideIndex(InjectableMembers injectableMembers)",
					"documentation": "/**\n   * Keeps track of injectable methods so we can remove methods that get overridden in O(1) time.\n   * Uses our position in the type hierarchy to perform optimizations.\n   */"
				},
				{
					"signature": "boolean removeIfOverriddenBy(\n        Method method, boolean alwaysRemove, InjectableMethod injectableMethod)",
					"documentation": "/**\n     * Removes a method overridden by the given method, if present. In order to remain backwards\n     * compatible with prior Guice versions, this will *not* remove overridden methods if\n     * 'alwaysRemove' is false and the overridden signature was annotated with a\n     * com.google.inject.Inject.\n     *\n     * @param method The method used to determine what is overridden and should be removed.\n     * @param alwaysRemove true if overridden methods should be removed even if they were\n     *     guice @Inject\n     * @param injectableMethod if this method overrode any guice @Inject methods, {@link\n     *     InjectableMethod#overrodeGuiceInject} is set to true\n     */"
				},
				{
					"signature": "void add(InjectableMethod injectableMethod)",
					"documentation": "/**\n     * Adds the given method to the list of injection points. Keeps track of it in this index in\n     * case it gets overridden.\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A method signature. Used to handle method overridding. */",
			"name": "com.google.inject.spi.InjectionPoint.Signature",
			"extends": "",
			"Methods": [
				{
					"signature": "Signature(Method method)",
					"documentation": "/** A method signature. Used to handle method overridding. */"
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.InjectionPointTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPoint"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to inject the instance fields and methods of an instance. Requests are created\n * explicitly in a module using {@link com.google.inject.Binder#requestInjection(Object)\n * requestInjection()} statements:\n *\n * \u003cpre\u003e\n *     requestInjection(serviceInstance);\u003c/pre\u003e\n *\n * @author mikeward@google.com (Mike Ward)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.InjectionRequest",
			"extends": "",
			"Methods": [
				{
					"signature": "public InjectionRequest(Object source, TypeLiteral\u003cT\u003e type, T instance)",
					"documentation": "/**\n * A request to inject the instance fields and methods of an instance. Requests are created\n * explicitly in a module using {@link com.google.inject.Binder#requestInjection(Object)\n * requestInjection()} statements:\n *\n * \u003cpre\u003e\n *     requestInjection(serviceInstance);\u003c/pre\u003e\n *\n * @author mikeward@google.com (Mike Ward)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public T getInstance()",
					"documentation": "/**\n   * Returns the instance that injection is being requested on. This may be null for injection\n   * requests returned from an Injector, to allow the injector to reclaim memory.\n   */"
				},
				{
					"signature": "public TypeLiteral\u003cT\u003e getType()",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cInjectionPoint\u003e getInjectionPoints() throws ConfigurationException",
					"documentation": "/**\n   * Returns the instance methods and fields of {@code instance} that will be injected to fulfill\n   * this request.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on the class of {@code\n   *     instance}, such as a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "@Override\n  public \u003cR\u003e R acceptVisitor(ElementVisitor\u003cR\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral"
			],
			"usedBy": [
				"com.google.inject.internal.InjectionRequestProcessor"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a single instance. The same instance is returned for every injection.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.InstanceBinding",
			"extends": "Binding,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Registration of interceptors for matching methods of matching classes. Instances are created\n * explicitly in a module using {@link com.google.inject.Binder#bindInterceptor( Matcher, Matcher,\n * MethodInterceptor[]) bindInterceptor()} statements:\n *\n * \u003cpre\u003e\n *     bindInterceptor(Matchers.subclassesOf(MyAction.class),\n *         Matchers.annotatedWith(Transactional.class),\n *         new MyTransactionInterceptor());\u003c/pre\u003e\n *\n * or from an injectable type listener using {@link TypeEncounter#bindInterceptor(Matcher,\n * org.aopalliance.intercept.MethodInterceptor[]) TypeEncounter.bindInterceptor()}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.InterceptorBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "InterceptorBinding(\n      Object source,\n      Matcher\u003c? super Class\u003c?\u003e\u003e classMatcher,\n      Matcher\u003c? super Method\u003e methodMatcher,\n      MethodInterceptor[] interceptors)",
					"documentation": "/**\n * Registration of interceptors for matching methods of matching classes. Instances are created\n * explicitly in a module using {@link com.google.inject.Binder#bindInterceptor( Matcher, Matcher,\n * MethodInterceptor[]) bindInterceptor()} statements:\n *\n * \u003cpre\u003e\n *     bindInterceptor(Matchers.subclassesOf(MyAction.class),\n *         Matchers.annotatedWith(Transactional.class),\n *         new MyTransactionInterceptor());\u003c/pre\u003e\n *\n * or from an injectable type listener using {@link TypeEncounter#bindInterceptor(Matcher,\n * org.aopalliance.intercept.MethodInterceptor[]) TypeEncounter.bindInterceptor()}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public Matcher\u003c? super Class\u003c?\u003e\u003e getClassMatcher()",
					"documentation": ""
				},
				{
					"signature": "public Matcher\u003c? super Method\u003e getMethodMatcher()",
					"documentation": ""
				},
				{
					"signature": "public List\u003cMethodInterceptor\u003e getInterceptors()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a linked key. The other key's binding is used to resolve injections.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.LinkedKeyBinding",
			"extends": "com.google.inject.Binding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A lookup of the members injector for a type. Lookups are created explicitly in a module using\n * {@link com.google.inject.Binder#getMembersInjector(Class) getMembersInjector()} statements:\n *\n * \u003cpre\u003e\n *     MembersInjector\u0026lt;PaymentService\u0026gt; membersInjector\n *         = getMembersInjector(PaymentService.class);\u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.MembersInjectorLookup",
			"extends": "",
			"Methods": [
				{
					"signature": "public MembersInjectorLookup(Object source, TypeLiteral\u003cT\u003e type)",
					"documentation": "/**\n * A lookup of the members injector for a type. Lookups are created explicitly in a module using\n * {@link com.google.inject.Binder#getMembersInjector(Class) getMembersInjector()} statements:\n *\n * \u003cpre\u003e\n *     MembersInjector\u0026lt;PaymentService\u0026gt; membersInjector\n *         = getMembersInjector(PaymentService.class);\u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public TypeLiteral\u003cT\u003e getType()",
					"documentation": "/** Gets the type containing the members to be injected. */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "public void initializeDelegate(MembersInjector\u003cT\u003e delegate)",
					"documentation": "/**\n   * Sets the actual members injector.\n   *\n   * @throws IllegalStateException if the delegate is already set\n   */"
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public MembersInjector\u003cT\u003e getDelegate()",
					"documentation": "/**\n   * Returns the delegate members injector, or {@code null} if it has not yet been initialized. The\n   * delegate will be initialized when this element is processed, or otherwise used to create an\n   * injector.\n   */"
				},
				{
					"signature": "public Set\u003cInjectionPoint\u003e getInjectionPoints() throws ConfigurationException",
					"documentation": "/**\n   * Returns the instance methods and fields that will be injected to fulfill this request.\n   *\n   * @since 4.2.3\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on the class of {@code\n   *     instance}, such as a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "public MembersInjector\u003cT\u003e getMembersInjector()",
					"documentation": "/**\n   * Returns the looked up members injector. The result is not valid until this lookup has been\n   * initialized, which usually happens when the injector is created. The members injector will\n   * throw an {@code IllegalStateException} if you try to use it beforehand.\n   */"
				},
				{
					"signature": "@Override\n      public void injectMembers(T instance)",
					"documentation": "/**\n   * Returns the looked up members injector. The result is not valid until this lookup has been\n   * initialized, which usually happens when the injector is created. The members injector will\n   * throw an {@code IllegalStateException} if you try to use it beforehand.\n   */"
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.MembersInjector"
			],
			"usedBy": [
				"com.google.inject.internal.DeferredLookups"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An error message and the context in which it occured. Messages are usually created internally by\n * Guice and its extensions. Messages can be created explicitly in a module using {@link\n * com.google.inject.Binder#addError(Throwable) addError()} statements:\n *\n * \u003cpre\u003e\n *     try {\n *       bindPropertiesFromFile();\n *     } catch (IOException e) {\n *       addError(e);\n *     }\u003c/pre\u003e\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.spi.Message",
			"extends": "",
			"Methods": [
				{
					"signature": "public Message(GuiceInternal internalOnly, ErrorId errorId, ErrorDetail\u003c?\u003e errorDetail)",
					"documentation": "/** @since 5.0 */"
				},
				{
					"signature": "private Message(ErrorId errorId, ErrorDetail\u003c?\u003e errorDetail)",
					"documentation": ""
				},
				{
					"signature": "public Message(ErrorId errorId, List\u003cObject\u003e sources, String message, Throwable cause)",
					"documentation": "/** @since 2.0 */"
				},
				{
					"signature": "public Message(List\u003cObject\u003e sources, String message, Throwable cause)",
					"documentation": "/** @since 2.0 */"
				},
				{
					"signature": "public Message(String message, Throwable cause)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public Message(Object source, String message)",
					"documentation": ""
				},
				{
					"signature": "public Message(String message)",
					"documentation": ""
				},
				{
					"signature": "public ErrorDetail\u003c?\u003e getErrorDetail()",
					"documentation": "/**\n   * Returns details about this error message.\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "@Override\n  public String getSource()",
					"documentation": ""
				},
				{
					"signature": "public List\u003cObject\u003e getSources()",
					"documentation": "/** @since 2.0 */"
				},
				{
					"signature": "public String getMessage()",
					"documentation": "/** Gets the error message text. */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": "/** @since 2.0 */"
				},
				{
					"signature": "public Throwable getCause()",
					"documentation": "/**\n   * Returns the throwable that caused this message, or {@code null} if this message was not caused\n   * by a throwable.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": "/** @since 2.0 */"
				},
				{
					"signature": "public Message withSource(List\u003cObject\u003e newSources)",
					"documentation": "/**\n   * Returns a copy of this {@link Message} with its sources replaced.\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "private Object writeReplace() throws ObjectStreamException",
					"documentation": "/**\n   * When serialized, we convert the error detail to a {@link GenericErrorDetail} with string\n   * sources. This hurts our formatting, but it guarantees that the receiving end will be able to\n   * read the message.\n   */"
				}
			],
			"interfaces": [
				"java.io.Serializable",
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.TypeListenerTest",
				"com.google.inject.internal.MessagesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.GenericErrorDetail"
			],
			"usedBy": [
				"com.google.inject.ProvisionException",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.Messages",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealMultibinder.RealMultibinderProvider",
				"com.google.inject.internal.SingletonScope",
				"com.google.inject.assistedinject.BindingCollector",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.daggeradapter.DaggerAdapter",
				"com.google.inject.daggeradapter.DaggerAdapter.DaggerCompatibilityModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Allows extensions to scan modules for annotated methods and bind those methods as providers,\n * similar to {@code @Provides} methods.\n *\n * @since 4.0\n */",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.NamedMunger",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.FailingScanner",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.IgnoringScanner",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.TestScanner"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.multibindings.MultibindingsScanner"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Represents a call to {@link Binder#scanModulesForAnnotatedMethods} in a module.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "public ModuleAnnotatedMethodScannerBinding(Object source, ModuleAnnotatedMethodScanner scanner)",
					"documentation": "/**\n * Represents a call to {@link Binder#scanModulesForAnnotatedMethods} in a module.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public ModuleAnnotatedMethodScanner getScanner()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Associated to a {@link Module module}, provides the module class name, the parent module {@link\n * ModuleSource source}, and the call stack that ends just before the module {@link\n * Module#configure(Binder) configure(Binder)} method invocation.\n */",
			"name": "com.google.inject.spi.ModuleSource",
			"extends": "",
			"Methods": [
				{
					"signature": "ModuleSource(Class\u003c?\u003e moduleClass, BindingSourceRestriction.PermitMap permitMap)",
					"documentation": "/**\n   * Creates a new {@link ModuleSource} with a {@literal null} parent.\n   *\n   * @param moduleClass the corresponding module\n   */"
				},
				{
					"signature": "private ModuleSource(\n      @Nullable ModuleSource parent,\n      Class\u003c?\u003e moduleClass,\n      BindingSourceRestriction.PermitMap permitMap)",
					"documentation": "/**\n   * Creates a new {@link ModuleSource} Object.\n   *\n   * @param parent the parent module {@link ModuleSource source}\n   * @param moduleClass the corresponding module\n   * @param partialCallStack the chunk of call stack that starts from the parent module {@link\n   *     Module#configure(Binder) configure(Binder)} call and ends just before the module {@link\n   *     Module#configure(Binder) configure(Binder)} method invocation\n   */"
				},
				{
					"signature": "String getModuleClassName()",
					"documentation": "/**\n   * Returns the corresponding module class name.\n   *\n   * @see Class#getName()\n   */"
				},
				{
					"signature": "ModuleSource createChild(Class\u003c?\u003e moduleClass)",
					"documentation": "/**\n   * Creates and returns a child {@link ModuleSource} corresponding to the {@link Module module}.\n   *\n   * @param moduleClass the corresponding module\n   */"
				},
				{
					"signature": "ModuleSource getParent()",
					"documentation": "/** Returns the parent module {@link ModuleSource source}. */"
				},
				{
					"signature": "List\u003cString\u003e getModuleClassNames()",
					"documentation": "/**\n   * Returns the class names of modules in this module source. The first element (index 0) is filled\n   * by this object {@link #getModuleClassName()}. The second element is filled by the parent's\n   * {@link #getModuleClassName()} and so on.\n   */"
				},
				{
					"signature": "int size()",
					"documentation": "/**\n   * Returns the size of {@link ModuleSource ModuleSources} chain (all parents) that ends at this\n   * object.\n   */"
				},
				{
					"signature": "BindingSourceRestriction.PermitMap getPermitMap()",
					"documentation": "/** Returns the permit map created by the binder that installed this module. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A private collection of elements that are hidden from the enclosing injector or module by\n * default. See {@link com.google.inject.PrivateModule PrivateModule} for details.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.PrivateElements",
			"extends": "com.google.inject.spi.Element",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a {@link Provider} that delegates to the binding for the provided type. This binding\n * is used whenever a {@code Provider\u003cT\u003e} is injected (as opposed to injecting {@code T} directly).\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ProviderBinding",
			"extends": "com.google.inject.Binding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a provider instance. The provider's {@code get} method is invoked to resolve\n * injections.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ProviderInstanceBinding",
			"extends": "Binding,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a provider key. To resolve injections, the provider key is first resolved, then that\n * provider's {@code get} method is invoked.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ProviderKeyBinding",
			"extends": "com.google.inject.Binding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A lookup of the provider for a type. Lookups are created explicitly in a module using {@link\n * com.google.inject.Binder#getProvider(Class) getProvider()} statements:\n *\n * \u003cpre\u003e\n *     Provider\u0026lt;PaymentService\u0026gt; paymentServiceProvider\n *         = getProvider(PaymentService.class);\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ProviderLookup",
			"extends": "",
			"Methods": [
				{
					"signature": "public ProviderLookup(Object source, Key\u003cT\u003e key)",
					"documentation": "/**\n * A lookup of the provider for a type. Lookups are created explicitly in a module using {@link\n * com.google.inject.Binder#getProvider(Class) getProvider()} statements:\n *\n * \u003cpre\u003e\n *     Provider\u0026lt;PaymentService\u0026gt; paymentServiceProvider\n *         = getProvider(PaymentService.class);\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "public ProviderLookup(Object source, Dependency\u003cT\u003e dependency)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public Key\u003cT\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "public Dependency\u003cT\u003e getDependency()",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "public void initializeDelegate(Provider\u003cT\u003e delegate)",
					"documentation": "/**\n   * Sets the actual provider.\n   *\n   * @throws IllegalStateException if the delegate is already set\n   */"
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public Provider\u003cT\u003e getDelegate()",
					"documentation": "/**\n   * Returns the delegate provider, or {@code null} if it has not yet been initialized. The delegate\n   * will be initialized when this element is processed, or otherwise used to create an injector.\n   */"
				},
				{
					"signature": "public Provider\u003cT\u003e getProvider()",
					"documentation": "/**\n   * Returns the looked up provider. The result is not valid until this lookup has been initialized,\n   * which usually happens when the injector is created. The provider will throw an {@code\n   * IllegalStateException} if you try to use it beforehand.\n   */"
				},
				{
					"signature": "@Override\n      public T get()",
					"documentation": "/**\n   * Returns the looked up provider. The result is not valid until this lookup has been initialized,\n   * which usually happens when the injector is created. The provider will throw an {@code\n   * IllegalStateException} if you try to use it beforehand.\n   */"
				},
				{
					"signature": "@Override\n      public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors"
			],
			"usedBy": [
				"com.google.inject.internal.DeferredLookups"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A provider with dependencies on other injected types. If a {@link Provider} has dependencies that\n * aren't specified in injections, this interface should be used to expose all dependencies.\n *\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ProviderWithDependencies",
			"extends": "Provider,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.HasDependenciesTest.ProviderOfAWithDependencies"
			],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.SecondaryBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A Provider that is part of an extension which supports a custom BindingTargetVisitor.\n *\n * \u003cp\u003eWhen an extension binds a provider instance, the provider can implement this interface to\n * allow users using the {@link Binding#acceptTargetVisitor(BindingTargetVisitor)} method to visit a\n * custom visitor designed for that extension. A typical implementation within the extension would\n * look like\n *\n * \u003cpre\u003e{@code\n * \u003cV, B\u003e V acceptExtensionVisitor(\n *    BindingTargetVisitor\u003cB, V\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding) {\n *   if(visitor instanceof MyCustomExtensionVisitor) {\n *     return ((MyCustomExtensionVisitor\u003cB, V\u003e)visitor)\n *        .visitCustomExtension(customProperties, binding);\n *   } else {\n *     return visitor.visit(binding);\n *   }\n * }\n * }\u003c/pre\u003e\n *\n * 'MyCustomExtensionVisitor' in the example above would be an interface the extension provides that\n * users can implement in order to be notified of custom extension information. These visitor\n * interfaces must extend from BindingTargetVisitor.\n *\n * @since 3.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.spi.ProviderWithExtensionVisitor",
			"extends": "com.google.inject.Provider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An {@literal @}{@link Provides} binding or binding produced by a {@link\n * ModuleAnnotatedMethodScanner}.\n *\n * @since 4.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.spi.ProvidesMethodBinding",
			"extends": "com.google.inject.spi.HasDependencies",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A visitor for the {@literal @}{@link Provides} bindings.\n *\n * \u003cp\u003eIf your {@link com.google.inject.spi.BindingTargetVisitor} implements this interface, bindings\n * created by using {@code @Provides} will be visited through this interface.\n *\n * @since 4.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.spi.ProvidesMethodTargetVisitor",
			"extends": "com.google.inject.spi.BindingTargetVisitor",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.ProviderMethodsTest.BindingCapturer"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Listens for provisioning of objects. Useful for gathering timing information about provisioning,\n * post-provision initialization, and more.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.spi.ProvisionListener",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ProvisionListenerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.ProvisionListener.ProvisionInvocation"
			]
		},
		{
			"documentation": "/**\n   * Encapsulates a single act of provisioning.\n   *\n   * @since 4.0\n   */",
			"name": "com.google.inject.spi.ProvisionListener.ProvisionInvocation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Binds keys (picked using a Matcher) to a provision listener. Listeners are created explicitly in\n * a module using {@link Binder#bindListener(Matcher, ProvisionListener...)} statements:\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.spi.ProvisionListenerBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "ProvisionListenerBinding(\n      Object source, Matcher\u003c? super Binding\u003c?\u003e\u003e bindingMatcher, ProvisionListener[] listeners)",
					"documentation": "/**\n * Binds keys (picked using a Matcher) to a provision listener. Listeners are created explicitly in\n * a module using {@link Binder#bindListener(Matcher, ProvisionListener...)} statements:\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */"
				},
				{
					"signature": "public List\u003cProvisionListener\u003e getListeners()",
					"documentation": "/** Returns the registered listeners. */"
				},
				{
					"signature": "public Matcher\u003c? super Binding\u003c?\u003e\u003e getBindingMatcher()",
					"documentation": "/**\n   * Returns the binding matcher which chooses which bindings the listener should be notified of.\n   */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cR\u003e R acceptVisitor(ElementVisitor\u003cR\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to require explicit {@literal @}{@link Inject} annotations on constructors.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.spi.RequireAtInjectOnConstructorsOption",
			"extends": "",
			"Methods": [
				{
					"signature": "RequireAtInjectOnConstructorsOption(Object source)",
					"documentation": "/**\n * A request to require explicit {@literal @}{@link Inject} annotations on constructors.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to require exact binding annotations.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.spi.RequireExactBindingAnnotationsOption",
			"extends": "",
			"Methods": [
				{
					"signature": "RequireExactBindingAnnotationsOption(Object source)",
					"documentation": "/**\n * A request to require exact binding annotations.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to require explicit bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */",
			"name": "com.google.inject.spi.RequireExplicitBindingsOption",
			"extends": "",
			"Methods": [
				{
					"signature": "RequireExplicitBindingsOption(Object source)",
					"documentation": "/**\n * A request to require explicit bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Registration of a scope annotation with the scope that implements it. Instances are created\n * explicitly in a module using {@link com.google.inject.Binder#bindScope(Class, Scope) bindScope()}\n * statements:\n *\n * \u003cpre\u003e\n *     Scope recordScope = new RecordScope();\n *     bindScope(RecordScoped.class, new RecordScope());\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.ScopeBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "ScopeBinding(Object source, Class\u003c? extends Annotation\u003e annotationType, Scope scope)",
					"documentation": "/**\n * Registration of a scope annotation with the scope that implements it. Instances are created\n * explicitly in a module using {@link com.google.inject.Binder#bindScope(Class, Scope) bindScope()}\n * statements:\n *\n * \u003cpre\u003e\n *     Scope recordScope = new RecordScope();\n *     bindScope(RecordScoped.class, new RecordScope());\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public Class\u003c? extends Annotation\u003e getAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "public Scope getScope()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A request to inject the static fields and methods of a type. Requests are created explicitly in a\n * module using {@link com.google.inject.Binder#requestStaticInjection(Class[])\n * requestStaticInjection()} statements:\n *\n * \u003cpre\u003e\n *     requestStaticInjection(MyLegacyService.class);\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.StaticInjectionRequest",
			"extends": "",
			"Methods": [
				{
					"signature": "StaticInjectionRequest(Object source, Class\u003c?\u003e type)",
					"documentation": "/**\n * A request to inject the static fields and methods of a type. Requests are created explicitly in a\n * module using {@link com.google.inject.Binder#requestStaticInjection(Class[])\n * requestStaticInjection()} statements:\n *\n * \u003cpre\u003e\n *     requestStaticInjection(MyLegacyService.class);\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public Class\u003c?\u003e getType()",
					"documentation": ""
				},
				{
					"signature": "public Set\u003cInjectionPoint\u003e getInjectionPoints() throws ConfigurationException",
					"documentation": "/**\n   * Returns the static methods and fields of {@code type} that will be injected to fulfill this\n   * request.\n   *\n   * @return a possibly empty set of injection points. The set has a specified iteration order. All\n   *     fields are returned and then all methods. Within the fields, supertype fields are returned\n   *     before subtype fields. Similarly, supertype methods are returned before subtype methods.\n   * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as\n   *     a field with multiple binding annotations. The exception's {@link\n   *     ConfigurationException#getPartialValue() partial value} is a {@code Set\u003cInjectionPoint\u003e} of\n   *     the valid injection points.\n   */"
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Instructs an {@link Injector} running in {@link Stage#TOOL} that a method should be injected.\n * This is typically useful for for extensions to Guice that perform additional validation in an\n * injected method or field. This only applies to objects that are already constructed when bindings\n * are created (ie., something bound using {@link\n * com.google.inject.binder.LinkedBindingBuilder#toProvider toProvider}, {@link\n * com.google.inject.binder.LinkedBindingBuilder#toInstance toInstance}, or {@link\n * com.google.inject.Binder#requestInjection requestInjection}.\n *\n * @author sberlin@gmail.com (Sam Berlin)\n * @since 3.0\n */",
			"name": "com.google.inject.spi.Toolable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.spi.ToolStageInjectorTest.Tooled"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Converts constant string values to a different type.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.TypeConverter",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.TypeConverterBindingProcessor"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Registration of type converters for matching target types. Instances are created explicitly in a\n * module using {@link com.google.inject.Binder#convertToTypes(Matcher, TypeConverter)\n * convertToTypes()} statements:\n *\n * \u003cpre\u003e\n *     convertToTypes(Matchers.only(TypeLiteral.get(DateTime.class)), new DateTimeConverter());\n * \u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.TypeConverterBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "public TypeConverterBinding(\n      Object source, Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher, TypeConverter typeConverter)",
					"documentation": "/** @since 3.0 */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "public Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e getTypeMatcher()",
					"documentation": ""
				},
				{
					"signature": "public TypeConverter getTypeConverter()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors"
			],
			"usedBy": [
				"com.google.inject.internal.TypeConverterBindingProcessor"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Context of an injectable type encounter. Enables reporting errors, registering injection\n * listeners and binding method interceptors for injectable type {@code I}. It is an error to use an\n * encounter after the {@link TypeListener#hear(TypeLiteral, TypeEncounter) hear()} method has\n * returned.\n *\n * @param \u003cI\u003e the injectable type encountered\n * @since 2.0\n */",
			"name": "com.google.inject.spi.TypeEncounter",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Listens for Guice to encounter injectable types. If a given type has its constructor injected in\n * one situation but only its methods and fields injected in another, Guice will notify this\n * listener once.\n *\n * \u003cp\u003eUseful for extra type checking, {@linkplain TypeEncounter#register(InjectionListener)\n * registering injection listeners}, and {@linkplain TypeEncounter#bindInterceptor(\n * com.google.inject.matcher.Matcher, org.aopalliance.intercept.MethodInterceptor[]) binding method\n * interceptors}.\n *\n * @since 2.0\n */",
			"name": "com.google.inject.spi.TypeListener",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingTest",
				"com.google.inject.RequestInjectionTest",
				"com.google.inject.TypeListenerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Binds types (picked using a Matcher) to an type listener. Registrations are created explicitly in\n * a module using {@link com.google.inject.Binder#bindListener(Matcher, TypeListener)} statements:\n *\n * \u003cpre\u003e{@code\n * register(only(new TypeLiteral\u003cPaymentService\u003cCreditCard\u003e\u003e() {}), listener);\n * }\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.TypeListenerBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "TypeListenerBinding(\n      Object source, TypeListener listener, Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e typeMatcher)",
					"documentation": "/**\n * Binds types (picked using a Matcher) to an type listener. Registrations are created explicitly in\n * a module using {@link com.google.inject.Binder#bindListener(Matcher, TypeListener)} statements:\n *\n * \u003cpre\u003e{@code\n * register(only(new TypeLiteral\u003cPaymentService\u003cCreditCard\u003e\u003e() {}), listener);\n * }\u003c/pre\u003e\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "public TypeListener getListener()",
					"documentation": "/** Returns the registered listener. */"
				},
				{
					"signature": "public Matcher\u003c? super TypeLiteral\u003c?\u003e\u003e getTypeMatcher()",
					"documentation": "/** Returns the type matcher which chooses which types the listener should be notified of. */"
				},
				{
					"signature": "@Override\n  public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e T acceptVisitor(ElementVisitor\u003cT\u003e visitor)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void applyTo(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.Element"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An untargetted binding. This binding indicates that the injector should use its implicit binding\n * strategies to resolve injections.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.spi.UntargettedBinding",
			"extends": "com.google.inject.Binding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Static utility methods for creating and working with instances of {@link Module}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */",
			"name": "com.google.inject.util.Modules",
			"extends": "",
			"Methods": [
				{
					"signature": "private Modules()",
					"documentation": "/**\n * Static utility methods for creating and working with instances of {@link Module}.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @since 2.0\n */"
				},
				{
					"signature": "public static OverriddenModuleBuilder override(Module... modules)",
					"documentation": "/**\n   * Returns a builder that creates a module that overlays override modules over the given modules.\n   * If a key is bound in both sets of modules, only the binding from the override modules is kept.\n   * If a single {@link PrivateModule} is supplied or all elements are from a single {@link\n   * PrivateBinder}, then this will overwrite the private bindings. Otherwise, private bindings will\n   * not be overwritten unless they are exposed. This can be used to replace the bindings of a\n   * production module with test bindings:\n   *\n   * \u003cpre\u003e\n   * Module functionalTestModule\n   *     = Modules.override(new ProductionModule()).with(new TestModule());\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003ePrefer to write smaller modules that can be reused and tested without overrides.\n   *\n   * @param modules the modules whose bindings are open to be overridden\n   */"
				},
				{
					"signature": "@Deprecated\n  public static OverriddenModuleBuilder override()",
					"documentation": "/** @deprecated there's no reason to use {@code Modules.override()} without any arguments. */"
				},
				{
					"signature": "public static OverriddenModuleBuilder override(Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/**\n   * Returns a builder that creates a module that overlays override modules over the given modules.\n   * If a key is bound in both sets of modules, only the binding from the override modules is kept.\n   * If a single {@link PrivateModule} is supplied or all elements are from a single {@link\n   * PrivateBinder}, then this will overwrite the private bindings. Otherwise, private bindings will\n   * not be overwritten unless they are exposed. This can be used to replace the bindings of a\n   * production module with test bindings:\n   *\n   * \u003cpre\u003e\n   * Module functionalTestModule\n   *     = Modules.override(getProductionModules()).with(getTestModules());\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003ePrefer to write smaller modules that can be reused and tested without overrides.\n   *\n   * @param modules the modules whose bindings are open to be overridden\n   */"
				},
				{
					"signature": "public static Module combine(Module... modules)",
					"documentation": "/**\n   * Returns a new module that installs all of {@code modules}.\n   *\n   * \u003cp\u003eAlthough sometimes helpful, this method is rarely necessary. Most Guice APIs accept multiple\n   * arguments or (like {@code install()}) can be called repeatedly. Where possible, external APIs\n   * that require a single module should similarly be adapted to permit multiple modules.\n   */"
				},
				{
					"signature": "@Deprecated\n  public static Module combine(Module module)",
					"documentation": "/** @deprecated there's no need to \"combine\" one module; just install it directly. */"
				},
				{
					"signature": "@Deprecated\n  public static Module combine()",
					"documentation": "/** @deprecated this method call is effectively a no-op, just remove it. */"
				},
				{
					"signature": "public static Module combine(Iterable\u003c? extends Module\u003e modules)",
					"documentation": "/**\n   * Returns a new module that installs all of {@code modules}.\n   *\n   * \u003cp\u003eAlthough sometimes helpful, this method is rarely necessary. Most Guice APIs accept multiple\n   * arguments or (like {@code install()}) can be called repeatedly. Where possible, external APIs\n   * that require a single module should similarly be adapted to permit multiple modules.\n   */"
				},
				{
					"signature": "private static Module extractScanners(Iterable\u003cElement\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Void visit(ModuleAnnotatedMethodScannerBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public static Module requireExplicitBindingsModule()",
					"documentation": "/**\n   * Returns a module that will configure the injector to require explicit bindings.\n   *\n   * @since 4.2.3\n   */"
				},
				{
					"signature": "public static Module requireAtInjectOnConstructorsModule()",
					"documentation": "/**\n   * Returns a module that will configure the injector to require {@literal @}{@link Inject} on\n   * constructors.\n   *\n   * @since 4.2.3\n   * @see Binder#requireAtInjectOnConstructors\n   */"
				},
				{
					"signature": "public static Module requireExactBindingAnnotationsModule()",
					"documentation": "/**\n   * Returns a module that will configure the injector to require an exactly matching binding\n   * annotation.\n   *\n   * @since 4.2.3\n   * @see Binder#requireExactBindingAnnotations\n   */"
				},
				{
					"signature": "public static Module disableCircularProxiesModule()",
					"documentation": "/**\n   * Returns a module that will configure the injector to disable circular proxies.\n   *\n   * @since 4.2.3\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ModulesTest",
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.spi.BindingSourceRestrictionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Modules.EmptyModule",
				"com.google.inject.util.Modules.CombinedModule",
				"com.google.inject.util.Modules.RealOverriddenModuleBuilder",
				"com.google.inject.util.Modules.OverrideModule",
				"com.google.inject.util.Modules.ModuleWriter",
				"com.google.inject.util.Modules.RequireExplicitBindingsModule",
				"com.google.inject.util.Modules.RequireAtInjectOnConstructorsModule",
				"com.google.inject.util.Modules.RequireExactBindingAnnotationsModule",
				"com.google.inject.util.Modules.DisableCircularProxiesModule"
			],
			"usedBy": [
				"com.google.inject.NetworkModuleVersion2"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.util.Modules.EmptyModule",
				"com.google.inject.util.Modules.CombinedModule",
				"com.google.inject.util.OverriddenModuleBuilder",
				"com.google.inject.util.Modules.RealOverriddenModuleBuilder",
				"com.google.inject.util.Modules.OverrideModule",
				"com.google.inject.util.Modules.ModuleWriter",
				"com.google.inject.util.Modules.RequireExplicitBindingsModule",
				"com.google.inject.util.Modules.RequireAtInjectOnConstructorsModule",
				"com.google.inject.util.Modules.RequireExactBindingAnnotationsModule",
				"com.google.inject.util.Modules.DisableCircularProxiesModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.EmptyModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.CombinedModule",
			"extends": "",
			"Methods": [
				{
					"signature": "CombinedModule(Iterable\u003c? extends Module\u003e modules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** See the EDSL example at {@link Modules#override(Module[]) override()}. */",
			"name": "com.google.inject.util.OverriddenModuleBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.util.Modules.RealOverriddenModuleBuilder"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.RealOverriddenModuleBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "private RealOverriddenModuleBuilder(Iterable\u003c? extends Module\u003e baseModules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Module with(Module... overrides)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Module with()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Module with(Iterable\u003c? extends Module\u003e overrides)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.util.OverriddenModuleBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.OverrideModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "OverrideModule(Iterable\u003c? extends Module\u003e overrides, ImmutableSet\u003cModule\u003e baseModules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cT\u003e Void visit(Binding\u003cT\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Void visit(ScopeBinding scopeBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Void visit(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cT\u003e Void visit(Binding\u003cT\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "void rewrite(Binder binder, PrivateElements privateElements, Set\u003cKey\u003c?\u003e\u003e keysToSkip)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Void visit(PrivateElements privateElements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Void visit(ScopeBinding scopeBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Void visit(ScopeBinding scopeBinding)",
					"documentation": ""
				},
				{
					"signature": "private Scope getScopeInstanceOrNull(Binding\u003c?\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.Elements"
			],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.ModuleWriter",
			"extends": "com.google.inject.spi.DefaultElementVisitor",
			"Methods": [
				{
					"signature": "ModuleWriter(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Void visitOther(Element element)",
					"documentation": ""
				},
				{
					"signature": "void writeAll(Iterable\u003c? extends Element\u003e elements)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.RequireExplicitBindingsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.RequireAtInjectOnConstructorsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.RequireExactBindingAnnotationsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Modules.DisableCircularProxiesModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Modules"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Static utility methods for creating and working with instances of {@link Provider}.\n *\n * @author Kevin Bourrillion (kevinb9n@gmail.com)\n * @since 2.0\n */",
			"name": "com.google.inject.util.Providers",
			"extends": "",
			"Methods": [
				{
					"signature": "private Providers()",
					"documentation": "/**\n * Static utility methods for creating and working with instances of {@link Provider}.\n *\n * @author Kevin Bourrillion (kevinb9n@gmail.com)\n * @since 2.0\n */"
				},
				{
					"signature": "public static \u003cT\u003e Provider\u003cT\u003e of(final T instance)",
					"documentation": "/**\n   * Returns a provider which always provides {@code instance}. This should not be necessary to use\n   * in your application, but is helpful for several types of unit tests.\n   *\n   * @param instance the instance that should always be provided. This is also permitted to be null,\n   *     to enable aggressive testing, although in real life a Guice-supplied Provider will never\n   *     return null.\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Provider\u003cT\u003e guicify(javax.inject.Provider\u003cT\u003e provider)",
					"documentation": "/**\n   * Returns a Guice-friendly {@code com.google.inject.Provider} for the given JSR-330 {@code\n   * javax.inject.Provider}. The converse method is unnecessary, since Guice providers directly\n   * implement the JSR-330 interface.\n   *\n   * @since 3.0\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTestSuite",
				"com.google.inject.BinderTestSuite.Injectable",
				"com.google.inject.DuplicateBindingsTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.googlecode.guice.Jsr330Test",
				"com.google.inject.servlet.ServletPipelineRequestDispatcherTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyProviderClass"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.util.Providers.ConstantProvider",
				"com.google.inject.util.Providers.GuicifiedProvider",
				"com.google.inject.util.Providers.GuicifiedProviderWithDependencies"
			],
			"usedBy": [
				"com.google.inject.internal.InjectorImpl",
				"com.google.inject.internal.InjectorImpl.ConvertedConstantBindingImpl",
				"com.google.inject.internal.ProviderInstanceBindingImpl",
				"com.google.inject.testing.fieldbinder.BoundFieldModule"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.util.Providers.ConstantProvider",
				"com.google.inject.util.Providers.GuicifiedProvider",
				"com.google.inject.util.Providers.GuicifiedProviderWithDependencies"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Providers.ConstantProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "private ConstantProvider(T instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Providers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Providers.GuicifiedProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "private GuicifiedProvider(javax.inject.Provider\u003cT\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.util.Providers.GuicifiedProviderWithDependencies"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.Providers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Providers.GuicifiedProviderWithDependencies",
			"extends": "com.google.inject.util.Providers.GuicifiedProvider",
			"Methods": [
				{
					"signature": "private GuicifiedProviderWithDependencies(\n        Set\u003cDependency\u003c?\u003e\u003e dependencies, javax.inject.Provider\u003cT\u003e delegate)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    void initialize(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.util.Providers"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Static methods for working with types.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */",
			"name": "com.google.inject.util.Types",
			"extends": "",
			"Methods": [
				{
					"signature": "private Types()",
					"documentation": "/**\n * Static methods for working with types.\n *\n * @author crazybob@google.com (Bob Lee)\n * @since 2.0\n */"
				},
				{
					"signature": "public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments)",
					"documentation": "/**\n   * Returns a new parameterized type, applying {@code typeArguments} to {@code rawType}. The\n   * returned type does not have an owner type.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static ParameterizedType newParameterizedTypeWithOwner(\n      Type ownerType, Type rawType, Type... typeArguments)",
					"documentation": "/**\n   * Returns a new parameterized type, applying {@code typeArguments} to {@code rawType} and\n   * enclosed by {@code ownerType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static GenericArrayType arrayOf(Type componentType)",
					"documentation": "/**\n   * Returns an array type whose elements are all instances of {@code componentType}.\n   *\n   * @return a {@link java.io.Serializable serializable} generic array type.\n   */"
				},
				{
					"signature": "public static WildcardType subtypeOf(Type bound)",
					"documentation": "/**\n   * Returns a type that represents an unknown type that extends {@code bound}. For example, if\n   * {@code bound} is {@code CharSequence.class}, this returns {@code ? extends CharSequence}. If\n   * {@code bound} is {@code Object.class}, this returns {@code ?}, which is shorthand for {@code ?\n   * extends Object}.\n   */"
				},
				{
					"signature": "public static WildcardType supertypeOf(Type bound)",
					"documentation": "/**\n   * Returns a type that represents an unknown supertype of {@code bound}. For example, if {@code\n   * bound} is {@code String.class}, this returns {@code ? super String}.\n   */"
				},
				{
					"signature": "public static ParameterizedType listOf(Type elementType)",
					"documentation": "/**\n   * Returns a type modelling a {@link List} whose elements are of type {@code elementType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static ParameterizedType collectionOf(Type elementType)",
					"documentation": "/**\n   * Returns a type modelling a {@link Collection} whose elements are of type {@code elementType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static ParameterizedType setOf(Type elementType)",
					"documentation": "/**\n   * Returns a type modelling a {@link Set} whose elements are of type {@code elementType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static ParameterizedType mapOf(Type keyType, Type valueType)",
					"documentation": "/**\n   * Returns a type modelling a {@link Map} whose keys are of type {@code keyType} and whose values\n   * are of type {@code valueType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static ParameterizedType providerOf(Type providedType)",
					"documentation": "/**\n   * Returns a type modelling a {@link Provider} that provides elements of type {@code elementType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				},
				{
					"signature": "public static Type javaxProviderOf(Type type)",
					"documentation": "/**\n   * Returns a type modelling a {@link javax.inject.Provider} that provides elements of type {@code\n   * elementType}.\n   *\n   * @return a {@link java.io.Serializable serializable} parameterized type.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeLiteralTypeResolutionTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.util.TypesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.MoreTypes.ParameterizedTypeImpl",
				"com.google.inject.internal.MoreTypes.GenericArrayTypeImpl",
				"com.google.inject.internal.MoreTypes.WildcardTypeImpl"
			],
			"usedBy": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.RealMapBinder",
				"com.google.inject.internal.RealMapBinder.BindingSelection",
				"com.google.inject.internal.RealMultibinder",
				"com.google.inject.internal.RealOptionalBinder",
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.SecondaryBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.AllTests",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.Asserts",
			"extends": "",
			"Methods": [
				{
					"signature": "private Asserts()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public static String asModuleChain(Class\u003c?\u003e... classes)",
					"documentation": "/**\n   * Returns the String that would appear in an error message for this chain of classes as modules.\n   */"
				},
				{
					"signature": "public static String getDeclaringSourcePart(Class\u003c?\u003e clazz)",
					"documentation": "/**\n   * Returns the source file appears in error messages based on {@link\n   * #getIncludeStackTraceOption()} value.\n   */"
				},
				{
					"signature": "public static boolean isIncludeStackTraceOff()",
					"documentation": "/**\n   * Returns true if {@link #getIncludeStackTraceOption()} returns {@link\n   * IncludeStackTraceOption#OFF}.\n   */"
				},
				{
					"signature": "public static void assertEqualsBothWays(Object expected, Object actual)",
					"documentation": "/**\n   * Fails unless {@code expected.equals(actual)}, {@code actual.equals(expected)} and their hash\n   * codes are equal. This is useful for testing the equals method itself.\n   */"
				},
				{
					"signature": "public static void assertContains(String text, String... substrings)",
					"documentation": "/** Fails unless {@code text} includes all {@code substrings}, in order, no duplicates */"
				},
				{
					"signature": "public static void assertContains(String text, boolean allowDuplicates, String... substrings)",
					"documentation": "/**\n   * Fails unless {@code text} includes all {@code substrings}, in order, and optionally {@code\n   * allowDuplicates}.\n   */"
				},
				{
					"signature": "public static void assertEqualWhenReserialized(Object object) throws IOException",
					"documentation": "/** Fails unless {@code object} doesn't equal itself when reserialized. */"
				},
				{
					"signature": "public static void assertSimilarWhenReserialized(Object object) throws IOException",
					"documentation": "/** Fails unless {@code object} has the same toString value when reserialized. */"
				},
				{
					"signature": "public static \u003cE\u003e E reserialize(E original) throws IOException",
					"documentation": ""
				},
				{
					"signature": "public static void assertNotSerializable(Object object) throws IOException",
					"documentation": ""
				},
				{
					"signature": "public static void awaitFullGc()",
					"documentation": ""
				},
				{
					"signature": "public static void awaitClear(WeakReference\u003c?\u003e ref)",
					"documentation": ""
				},
				{
					"signature": "public static URL[] getClassPathUrls()",
					"documentation": "/** Returns the URLs in the system class path. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest",
				"com.google.inject.BinderTestSuite",
				"com.google.inject.BinderTestSuite.CreationExceptionTest",
				"com.google.inject.BinderTestSuite.ConfigurationExceptionTest",
				"com.google.inject.BinderTestSuite.UserExceptionsTest",
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BindingTest",
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.InjectorTest",
				"com.google.inject.JitBindingsTest",
				"com.google.inject.KeyTest",
				"com.google.inject.LoggerInjectionTest",
				"com.google.inject.MembersInjectorTest",
				"com.google.inject.NullableInjectionPointTest",
				"com.google.inject.OptionalBindingTest",
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.PrivateModuleTest",
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ProvisionListenerTest",
				"com.google.inject.RequestInjectionTest",
				"com.google.inject.ScopesTest",
				"com.google.inject.SerializationTest",
				"com.google.inject.TypeConversionTest",
				"com.google.inject.TypeListenerTest",
				"com.google.inject.TypeLiteralInjectionTest",
				"com.google.inject.TypeLiteralTest",
				"com.google.inject.TypeLiteralTypeResolutionTest",
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MoreTypesTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest",
				"com.google.inject.internal.WeakKeySetTest",
				"com.google.inject.internal.util.LineNumbersTest",
				"com.google.inject.matcher.MatcherTest",
				"com.google.inject.multibindings.ProvidesIntoTest",
				"com.google.inject.name.NamedEquivalanceTest",
				"com.google.inject.name.NamesTest",
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.TypesTest",
				"com.googlecode.guice.Jsr330Test",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.ManyConstructorsTest",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.InternalFlags"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BinderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n        public void publish(LogRecord logRecord)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n        public void flush()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void close() throws SecurityException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void tearDown() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderFromBinder()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingDependency()",
					"documentation": ""
				},
				{
					"signature": "public void testDanglingConstantBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testRecursiveBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingNullConstant()",
					"documentation": ""
				},
				{
					"signature": "public void testToStringOnBinderApi()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingIsSerializableInBinderApi()",
					"documentation": ""
				},
				{
					"signature": "public void testArrayTypeCanonicalization()",
					"documentation": "/**\n   * Although {@code String[].class} isn't equal to {@code new GenericArrayTypeImpl(String.class)},\n   * Guice should treat these two types interchangeably.\n   */"
				},
				{
					"signature": "public void testSettingBindingTwice()",
					"documentation": "/** Binding something to two different things should give an error. */"
				},
				{
					"signature": "public void testSettingAtImplementedByTwice()",
					"documentation": "/** Binding an @ImplementedBy thing to something else should also fail. */"
				},
				{
					"signature": "public void testJitDependencyDoesntBlockOtherExplicitBindings()",
					"documentation": "/** See issue 614, Problem One https://github.com/google/guice/issues/614 */"
				},
				{
					"signature": "public void testJitDependencyCanUseExplicitDependencies()",
					"documentation": "/** See issue 614, Problem Two https://github.com/google/guice/issues/id=614 */"
				},
				{
					"signature": "public void testUntargettedBinding()",
					"documentation": "/**\n   * Untargetted bindings should follow @ImplementedBy and @ProvidedBy annotations if they exist.\n   * Otherwise the class should be constructed directly.\n   */"
				},
				{
					"signature": "public void testPartialInjectorGetInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testUserReportedError()",
					"documentation": ""
				},
				{
					"signature": "public void testUserReportedErrorsAreAlsoLogged()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testCannotBindToGuiceTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectRawProvider()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Message",
				"com.google.inject.Asserts",
				"com.google.inject.BinderTest.ParentModule",
				"com.google.inject.BinderTest.FooModule",
				"com.google.inject.BinderTest.BarModule",
				"com.google.inject.BinderTest.ConstantModule",
				"com.google.inject.BinderTest.OuterCoreModule",
				"com.google.inject.BinderTest.InnerCoreModule",
				"com.google.inject.BinderTest.MissingParameter",
				"com.google.inject.BinderTest.NoInjectConstructor",
				"com.google.inject.HasProvidedBy1",
				"com.google.inject.HasImplementedBy1",
				"com.google.inject.BinderTest.HasProvidedBy2",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatNeedsAnotherImplementedBy",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatWantsExplicit",
				"com.google.inject.BinderTest.JustAnInterface"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BinderTest.Foo",
				"com.google.inject.BinderTest.NeedsRunnable",
				"com.google.inject.BinderTest.ParentModule",
				"com.google.inject.BinderTest.FooModule",
				"com.google.inject.BinderTest.BarModule",
				"com.google.inject.BinderTest.ConstantModule",
				"com.google.inject.BinderTest.OuterCoreModule",
				"com.google.inject.BinderTest.InnerCoreModule",
				"com.google.inject.BinderTest.MissingParameter",
				"com.google.inject.BinderTest.NoInjectConstructor",
				"com.google.inject.HasProvidedBy1",
				"com.google.inject.BinderTest.HasProvidedBy1Provider",
				"com.google.inject.HasImplementedBy1",
				"com.google.inject.BinderTest.ImplementsHasImplementedBy1",
				"com.google.inject.BinderTest.HasProvidedBy2",
				"com.google.inject.BinderTest.HasProvidedBy2Provider",
				"com.google.inject.BinderTest.HasImplementedBy2",
				"com.google.inject.BinderTest.ExtendsHasImplementedBy2",
				"com.google.inject.BinderTest.JustAClass",
				"com.google.inject.BinderTest.HasImplementedByThatNeedsAnotherImplementedBy",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatNeedsAnotherImplementedBy",
				"com.google.inject.BinderTest.HasImplementedByThatWantsExplicit",
				"com.google.inject.BinderTest.ImplementsHasImplementedByThatWantsExplicit",
				"com.google.inject.BinderTest.JustAnInterface",
				"com.google.inject.Roshambo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.NeedsRunnable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ParentModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.FooModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.FailedModule",
				"com.google.inject.DuplicateBindingsTest.SimpleModule",
				"com.google.inject.DuplicateBindingsTest.ScopedModule",
				"com.google.inject.DuplicateBindingsTest.AnnotatedScopeModule"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.BarModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ConstantModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "ConstantModule(String constant)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.OuterCoreModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.InnerCoreModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Names"
			],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.MissingParameter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    MissingParameter(NoInjectConstructor noInjectConstructor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.NoInjectConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "private NoInjectConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.HasProvidedBy1",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasProvidedBy1Provider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public HasProvidedBy1 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.HasImplementedBy1",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.BinderTest.ImplementsHasImplementedBy1"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ImplementsHasImplementedBy1",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.HasImplementedBy1"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasProvidedBy2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasProvidedBy2Provider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public HasProvidedBy2 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasImplementedBy2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.BinderTest.ExtendsHasImplementedBy2"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ExtendsHasImplementedBy2",
			"extends": "com.google.inject.BinderTest.HasImplementedBy2",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.JustAClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasImplementedByThatNeedsAnotherImplementedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ImplementsHasImplementedByThatNeedsAnotherImplementedBy",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    ImplementsHasImplementedByThatNeedsAnotherImplementedBy(HasImplementedBy1 h1n1)",
					"documentation": ""
				}
			],
			"interfaces": [
				"HasImplementedByThatNeedsAnotherImplementedBy"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.HasImplementedByThatWantsExplicit",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.ImplementsHasImplementedByThatWantsExplicit",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    ImplementsHasImplementedByThatWantsExplicit(JustAnInterface jai)",
					"documentation": ""
				}
			],
			"interfaces": [
				"HasImplementedByThatWantsExplicit"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTest.JustAnInterface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Roshambo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.BinderTestSuite",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "private static String shortNamed(Named named)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.name.Named",
				"com.google.inject.util.Providers",
				"com.google.inject.Asserts",
				"com.google.inject.BinderTestSuite.Builder",
				"com.google.inject.BinderTestSuite.SuccessTest",
				"com.google.inject.BinderTestSuite.CreationExceptionTest",
				"com.google.inject.BinderTestSuite.ConfigurationExceptionTest",
				"com.google.inject.BinderTestSuite.UserExceptionsTest",
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.BinderTestSuite.TwoAtATimeScope",
				"com.google.inject.TwoAtATimeScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.Scoper",
				"com.google.inject.CreationTime",
				"com.google.inject.BinderTestSuite.Builder",
				"com.google.inject.BinderTestSuite.SuccessTest",
				"com.google.inject.BinderTestSuite.CreationExceptionTest",
				"com.google.inject.BinderTestSuite.ConfigurationExceptionTest",
				"com.google.inject.BinderTestSuite.UserExceptionsTest",
				"com.google.inject.AWithProvidedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedByNamedApple",
				"com.google.inject.AWithImplementedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedByNamedApple",
				"com.google.inject.A",
				"com.google.inject.BinderTestSuite.InjectsA",
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.BinderTestSuite.PlainAProvider",
				"com.google.inject.BinderTestSuite.InjectsPlainA",
				"com.google.inject.BinderTestSuite.TwoAtATimeScope",
				"com.google.inject.TwoAtATimeScoped",
				"com.google.inject.BinderTestSuite.ScopedA",
				"com.google.inject.BinderTestSuite.InjectsScopedA",
				"com.google.inject.BinderTestSuite.InjectsScopedANamedApple",
				"com.google.inject.BinderTestSuite.Injectable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.Scoper",
			"extends": "",
			"Methods": [
				{
					"signature": "UNSCOPED",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "EAGER_SINGLETON",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "SCOPES_SINGLETON",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "SINGLETON_DOT_CLASS",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "TWO_AT_A_TIME_SCOPED_DOT_CLASS",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "TWO_AT_A_TIME_SCOPE",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void configure(ScopedBindingBuilder sbb)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      void apply(Builder builder)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** When Guice creates a value, directly or via a provider */",
			"name": "com.google.inject.CreationTime",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.Builder",
			"extends": "",
			"Methods": [
				{
					"signature": "public Builder module(Module module)",
					"documentation": ""
				},
				{
					"signature": "public Builder creationTime(CreationTime creationTime)",
					"documentation": ""
				},
				{
					"signature": "public Builder name(String name)",
					"documentation": ""
				},
				{
					"signature": "public Builder key(Key\u003c?\u003e key, Class\u003c? extends Injectable\u003e injectsKey)",
					"documentation": ""
				},
				{
					"signature": "private Builder creationException(String message, Object... args)",
					"documentation": ""
				},
				{
					"signature": "private Builder configurationException(String message, Object... args)",
					"documentation": ""
				},
				{
					"signature": "private Builder scoper(Scoper scoper)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e Builder expectedValues(T... values)",
					"documentation": ""
				},
				{
					"signature": "public void addToSuite(TestSuite suite)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.SuccessTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public SuccessTest(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getName()",
					"documentation": ""
				},
				{
					"signature": "Injector newInjector()",
					"documentation": ""
				},
				{
					"signature": "public void test() throws IllegalAccessException, InstantiationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.CreationExceptionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public CreationExceptionTest(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getName()",
					"documentation": ""
				},
				{
					"signature": "public void test()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts"
			],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.ConfigurationExceptionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public ConfigurationExceptionTest(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getName()",
					"documentation": ""
				},
				{
					"signature": "Injector newInjector()",
					"documentation": ""
				},
				{
					"signature": "public void test() throws IllegalAccessException, InstantiationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts"
			],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.UserExceptionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public UserExceptionsTest(Builder builder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getName()",
					"documentation": ""
				},
				{
					"signature": "Injector newInjector()",
					"documentation": ""
				},
				{
					"signature": "public void test() throws IllegalAccessException, InstantiationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts"
			],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** negative to throw, 101... for eager singletons, 201... for everything else */",
			"name": "com.google.inject.AWithProvidedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsAWithProvidedBy",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(\n        AWithProvidedBy aWithProvidedBy, Provider\u003cAWithProvidedBy\u003e aWithProvidedByProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsAWithProvidedByNamedApple",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(\n        @Named(\"apple\") AWithProvidedBy aWithProvidedBy,\n        @Named(\"apple\") Provider\u003cAWithProvidedBy\u003e aWithProvidedByProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.AWithImplementedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsAWithImplementedBy",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(\n        AWithImplementedBy aWithImplementedBy,\n        Provider\u003cAWithImplementedBy\u003e aWithImplementedByProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsAWithImplementedByNamedApple",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(\n        @Named(\"apple\") AWithImplementedBy aWithImplementedBy,\n        @Named(\"apple\") Provider\u003cAWithImplementedBy\u003e aWithImplementedByProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.A",
			"extends": "AWithProvidedBy,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ScopesTest.AImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsA",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(A a, Provider\u003cA\u003e aProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.PlainA",
			"extends": "",
			"Methods": [
				{
					"signature": "PlainA()",
					"documentation": ""
				},
				{
					"signature": "PlainA(int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.BinderTestSuite.ScopedA"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.PlainAProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public A get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsPlainA",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(PlainA plainA, Provider\u003cPlainA\u003e plainAProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** This scope hands out each value exactly twice */",
			"name": "com.google.inject.BinderTestSuite.TwoAtATimeScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, final Provider\u003cT\u003e unscoped)",
					"documentation": "/** This scope hands out each value exactly twice */"
				},
				{
					"signature": "@Override\n        public T get()",
					"documentation": "/** This scope hands out each value exactly twice */"
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BinderTestSuite"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TwoAtATimeScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BinderTestSuite",
				"com.google.inject.BinderTestSuite.ScopedA"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.ScopedA",
			"extends": "com.google.inject.BinderTestSuite.PlainA",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TwoAtATimeScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsScopedA",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(ScopedA scopedA, Provider\u003cScopedA\u003e scopedAProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.InjectsScopedANamedApple",
			"extends": "com.google.inject.BinderTestSuite.Injectable",
			"Methods": [
				{
					"signature": "@Inject\n    public void inject(\n        @Named(\"apple\") ScopedA scopedA, @Named(\"apple\") Provider\u003cScopedA\u003e scopedAProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BinderTestSuite.Injectable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithProvidedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedBy",
				"com.google.inject.BinderTestSuite.InjectsAWithImplementedByNamedApple",
				"com.google.inject.BinderTestSuite.InjectsA",
				"com.google.inject.BinderTestSuite.InjectsPlainA",
				"com.google.inject.BinderTestSuite.InjectsScopedA",
				"com.google.inject.BinderTestSuite.InjectsScopedANamedApple"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.Providers"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BindingAnnotationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAnnotationWithValueMatchesKeyWithTypeOnly() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testRequireExactAnnotationsDisablesFallback()",
					"documentation": ""
				},
				{
					"signature": "public void testRequireExactAnnotationsDoesntBreakIfDefaultsExist()",
					"documentation": ""
				},
				{
					"signature": "public void testRequireExactAnnotationsRequireAllOptionals()",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotationWithValueThatDoesntMatch()",
					"documentation": ""
				},
				{
					"signature": "public Blue createBlue(final int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.internal.Annotations",
				"com.google.inject.Asserts",
				"com.google.inject.Blue",
				"com.google.inject.Color"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BindingAnnotationTest.BlueFoo",
				"com.google.inject.BindingAnnotationTest.RedFoo",
				"com.google.inject.BindingAnnotationTest.ColorFoo",
				"com.google.inject.Blue",
				"com.google.inject.Red",
				"com.google.inject.Color"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingAnnotationTest.BlueFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Blue"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingAnnotationTest.RedFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingAnnotationTest.ColorFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Color"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Blue",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BindingAnnotationTest.BlueFoo"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Red",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Color",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.BindingAnnotationTest",
				"com.google.inject.BindingAnnotationTest.ColorFoo"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.BindingOrderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindingOutOfOrder()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testBindingOrderAndScopes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithExtraThreads() throws InterruptedException",
					"documentation": ""
				},
				{
					"signature": "@Inject\n          void createAnotherThread(final Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Override\n              public void run()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.BindingOrderTest.BoundFirst",
				"com.google.inject.BindingOrderTest.A"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BindingOrderTest.BoundFirst",
				"com.google.inject.BoundSecond",
				"com.google.inject.BindingOrderTest.BoundSecondImpl",
				"com.google.inject.BindingOrderTest.A",
				"com.google.inject.BindingOrderTest.B"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingOrderTest.BoundFirst",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public BoundFirst(BoundSecond boundSecond)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BindingOrderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundSecond",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.BindingOrderTest.BoundSecondImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingOrderTest.BoundSecondImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.BoundSecond"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingOrderTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingOrderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingOrderTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BindingTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testExplicitCyclicDependency()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindToUnboundLinkedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testScopeIsAppliedToKeyNotTarget()",
					"documentation": "/**\n   * This test ensures that the asEagerSingleton() scoping applies to the key, not to what the key\n   * is linked to.\n   */"
				},
				{
					"signature": "@Test\n  public void testAnnotatedNoArgConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testUnannotatedNoArgConstructor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void assertBindingSucceeds(final Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "private void assertBindingFails(final Class\u003c?\u003e clazz) throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTooManyConstructors()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorBinding() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorBindingsOnParameterizedTypes() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorBindingsFailsOnRawTypes() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorAndMethodInterceptors() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInaccessibleConstructor() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorAndScopes() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void assertDistinct(Injector injector, int expectedCount, Key\u003c?\u003e... keys)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testToConstructorSpiData() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cI\u003e void hear(TypeLiteral\u003cI\u003e type, TypeEncounter\u003cI\u003e encounter)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterfaceToImplementationConstructor() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGetAllBindings()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGetAllServletBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTurkeyBaconProblemUsingToConstuctor()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMissingAnnotationOneChoice()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMissingAnnotationRelated()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.internal.Annotations",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Names",
				"com.google.inject.spi.TypeListener",
				"com.google.inject.Asserts",
				"com.google.inject.BindingTest.Dependent",
				"com.google.inject.BindingTest.Foo",
				"com.google.inject.BindingTest.PublicNoArgAnnotated",
				"com.google.inject.BindingTest.ProtectedNoArgAnnotated",
				"com.google.inject.BindingTest.PackagePrivateNoArgAnnotated",
				"com.google.inject.BindingTest.PrivateNoArgAnnotated",
				"com.google.inject.BindingTest.PublicNoArg",
				"com.google.inject.BindingTest.ProtectedNoArg",
				"com.google.inject.BindingTest.PackagePrivateNoArg",
				"com.google.inject.BindingTest.PrivateNoArgInPrivateClass",
				"com.google.inject.BindingTest.PrivateNoArg",
				"com.google.inject.BindingTest.TooManyConstructors"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BindingTest.Dependent",
				"com.google.inject.BindingTest.A",
				"com.google.inject.BindingTest.B",
				"com.google.inject.BindingTest.Bob",
				"com.google.inject.BindingTest.MyModule",
				"com.google.inject.BindingTest.Foo",
				"com.google.inject.BindingTest.FooProvider",
				"com.google.inject.BindingTest.Bar",
				"com.google.inject.BindingTest.Counter",
				"com.google.inject.BindingTest.PublicNoArgAnnotated",
				"com.google.inject.BindingTest.ProtectedNoArgAnnotated",
				"com.google.inject.BindingTest.PackagePrivateNoArgAnnotated",
				"com.google.inject.BindingTest.PrivateNoArgAnnotated",
				"com.google.inject.BindingTest.PublicNoArg",
				"com.google.inject.BindingTest.ProtectedNoArg",
				"com.google.inject.BindingTest.PackagePrivateNoArg",
				"com.google.inject.BindingTest.PrivateNoArgInPrivateClass",
				"com.google.inject.BindingTest.PrivateNoArg",
				"com.google.inject.BindingTest.TooManyConstructors",
				"com.google.inject.BindingTest.IFoo",
				"com.google.inject.BindingTest.CFoo",
				"com.google.inject.BindingTest.C",
				"com.google.inject.BindingTest.D",
				"com.google.inject.BindingTest.E",
				"com.google.inject.BindingTest.F",
				"com.google.inject.Food",
				"com.google.inject.BindingTest.Bacon",
				"com.google.inject.BindingTest.TurkeyBacon",
				"com.google.inject.BindingTest.TofuBacon",
				"com.google.inject.BindingTest.UncookedBacon",
				"com.google.inject.BindingTest.Sandwitch",
				"com.google.inject.BindingTest.Butter",
				"com.google.inject.BindingTest.ButterSandwitch"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BindingTest.Dependent",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject Dependent(A a, B b)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Inject void injectBob(Bob bob)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Bob",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.MyModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.FooProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Counter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Integer get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PublicNoArgAnnotated",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject public PublicNoArgAnnotated()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.ProtectedNoArgAnnotated",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject protected ProtectedNoArgAnnotated()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PackagePrivateNoArgAnnotated",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject PackagePrivateNoArgAnnotated()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PrivateNoArgAnnotated",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject private PrivateNoArgAnnotated()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PublicNoArg",
			"extends": "",
			"Methods": [
				{
					"signature": "public PublicNoArg()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.ProtectedNoArg",
			"extends": "",
			"Methods": [
				{
					"signature": "protected ProtectedNoArg()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PackagePrivateNoArg",
			"extends": "",
			"Methods": [
				{
					"signature": "PackagePrivateNoArg()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PrivateNoArgInPrivateClass",
			"extends": "",
			"Methods": [
				{
					"signature": "PrivateNoArgInPrivateClass()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.PrivateNoArg",
			"extends": "",
			"Methods": [
				{
					"signature": "private PrivateNoArg()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.TooManyConstructors",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    TooManyConstructors(Injector i)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    TooManyConstructors()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.IFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.CFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"IFoo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "public C(Stage stage, T t)",
					"documentation": ""
				},
				{
					"signature": "@Inject C()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.D",
			"extends": "",
			"Methods": [
				{
					"signature": "public D(Stage stage)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.E",
			"extends": "",
			"Methods": [
				{
					"signature": "private E(Stage stage)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.F",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject public F(Stage stage)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Food",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Bacon",
			"extends": "",
			"Methods": [
				{
					"signature": "public Food getMaterial()",
					"documentation": ""
				},
				{
					"signature": "public boolean isCooked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.BindingTest.TurkeyBacon",
				"com.google.inject.BindingTest.TofuBacon",
				"com.google.inject.BindingTest.UncookedBacon"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.TurkeyBacon",
			"extends": "com.google.inject.BindingTest.Bacon",
			"Methods": [
				{
					"signature": "@Override\n    public Food getMaterial()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.TofuBacon",
			"extends": "com.google.inject.BindingTest.Bacon",
			"Methods": [
				{
					"signature": "@Override\n    public Food getMaterial()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.UncookedBacon",
			"extends": "com.google.inject.BindingTest.Bacon",
			"Methods": [
				{
					"signature": "@Override\n    public boolean isCooked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Sandwitch",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.Butter",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BindingTest.ButterSandwitch",
			"extends": "",
			"Methods": [
				{
					"signature": "private ButterSandwitch()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    ButterSandwitch(@Named(\"unsalted\") Butter butter)",
					"documentation": ""
				}
			],
			"interfaces": [
				"Sandwitch"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BoundInstanceInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testInstancesAreInjected() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testProvidersAreInjected() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testMalformedInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testMalformedProvider()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.BoundInstanceInjectionTest.O",
				"com.google.inject.BoundInstanceInjectionTest.MalformedInjectable",
				"com.google.inject.BoundInstanceInjectionTest.MalformedProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BoundInstanceInjectionTest.O",
				"com.google.inject.BoundInstanceInjectionTest.MalformedInjectable",
				"com.google.inject.BoundInstanceInjectionTest.MalformedProvider",
				"com.google.inject.Another"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundInstanceInjectionTest.O",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setInt(int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BoundInstanceInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundInstanceInjectionTest.MalformedInjectable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void doublyAnnotated(@Named(\"a\") @Another String unused)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BoundInstanceInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundInstanceInjectionTest.MalformedProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void doublyAnnotated(@Named(\"a\") @Another String s)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BoundInstanceInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Another",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.BoundProviderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testFooProvider() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testSingletonFooProvider() throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.BoundProviderTest.Foo",
				"com.google.inject.BoundProviderTest.FooProvider",
				"com.google.inject.BoundProviderTest.SingletonFooProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.BoundProviderTest.Bar",
				"com.google.inject.BoundProviderTest.Foo",
				"com.google.inject.BoundProviderTest.FooProvider",
				"com.google.inject.BoundProviderTest.SingletonFooProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundProviderTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundProviderTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "Foo(Bar bar, int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.BoundProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundProviderTest.FooProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public FooProvider(Bar bar)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.BoundProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BoundProviderTest.SingletonFooProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public SingletonFooProvider(Bar bar)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.BoundProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * @author crazybob@google.com (Bob Lee)\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.CircularDependencyTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/**\n * @author crazybob@google.com (Bob Lee)\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testCircularlyDependentConstructors() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testCircularlyDependentConstructorsWithProviderMethods() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testCircularlyDependentConstructorsWithProviderInstances() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testCircularlyDependentConstructorsWithProviderKeys() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testCircularlyDependentConstructorsWithProvidedBy() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "private void assertCircularDependencies(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "public void testUnresolvableCircularDependency()",
					"documentation": ""
				},
				{
					"signature": "public void testUnresolvableCircularDependenciesWithProviderInstances()",
					"documentation": ""
				},
				{
					"signature": "public void testUnresolvableCircularDependenciesWithProviderKeys()",
					"documentation": ""
				},
				{
					"signature": "public void testUnresolvableCircularDependenciesWithProvidedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testDisabledCircularDependency()",
					"documentation": ""
				},
				{
					"signature": "public void testDisabledCircularDependenciesWithProviderInstances()",
					"documentation": ""
				},
				{
					"signature": "public void testDisabledCircularDependenciesWithProviderKeys()",
					"documentation": ""
				},
				{
					"signature": "public void testDisabledCircularDependenciesWithProvidedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testCircularlyDependentMultipleWays()",
					"documentation": "/**\n   * As reported by issue 349, we give a lousy trace when a class is circularly dependent on itself\n   * in multiple ways.\n   */"
				},
				{
					"signature": "public void testDisablingCircularDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testCircularDependencyProxyDelegateNeverInitialized()",
					"documentation": ""
				},
				{
					"signature": "public void testCircularDependenciesDetectedEarlyWhenDependenciesHaveDifferentTypes()",
					"documentation": "/**\n   * Tests that ProviderInternalFactory can detect circular dependencies before it gets to\n   * Scopes.SINGLETON. This is especially important because the failure in Scopes.SINGLETON doesn't\n   * have enough context to provide a decent error message.\n   */"
				},
				{
					"signature": "public void testPrivateModulesDontTriggerCircularErrorsInProviders()",
					"documentation": ""
				},
				{
					"signature": "public void testCustomScopeCircularProxies()",
					"documentation": "/**\n   * When Scope Providers call their unscoped Provider's get() methods are called, it's possible\n   * that the result is a circular proxy designed for one specific parameter (not for all possible\n   * parameters). But custom scopes typically cache the results without checking to see if the\n   * result is a proxy. This leads to caching a result that is unsuitable for reuse for other\n   * parameters.\n   *\n   * \u003cp\u003eThis means that custom proxies have to do an {@code if(Scopes.isCircularProxy(..))} in order\n   * to avoid exceptions.\n   */"
				},
				{
					"signature": "public void testDisabledNonConstructorCircularDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.Provides",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.Singleton",
				"com.google.inject.Asserts",
				"com.google.inject.CircularDependencyTest.BP",
				"com.google.inject.CircularDependencyTest.C",
				"com.google.inject.CircularDependencyTest.D",
				"com.google.inject.CircularDependencyTest.C2",
				"com.google.inject.CircularDependencyTest.D2",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.CircularDependencyTest.RealF",
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.CircularDependencyTest.JImpl",
				"com.google.inject.SimpleSingleton",
				"com.google.inject.CircularDependencyTest.BasicSingleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.A",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.AP",
				"com.google.inject.CircularDependencyTest.AutoAP",
				"com.google.inject.B",
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.BP",
				"com.google.inject.CircularDependencyTest.C",
				"com.google.inject.CircularDependencyTest.D",
				"com.google.inject.CircularDependencyTest.C2P",
				"com.google.inject.CircularDependencyTest.D2P",
				"com.google.inject.CircularDependencyTest.C2",
				"com.google.inject.CircularDependencyTest.D2",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.F",
				"com.google.inject.CircularDependencyTest.RealF",
				"com.google.inject.G",
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.CircularDependencyTest.Foo",
				"com.google.inject.CircularDependencyTest.Bar",
				"com.google.inject.H",
				"com.google.inject.I",
				"com.google.inject.J",
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.CircularDependencyTest.JImpl",
				"com.google.inject.SimpleSingleton",
				"com.google.inject.CircularDependencyTest.BasicSingleton",
				"com.google.inject.CircularDependencyTest.K",
				"com.google.inject.CircularDependencyTest.L"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ScopesTest.AImpl"
			],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.AImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public AImpl(B b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int id()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public B getB()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.AP",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public A get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.AutoAP",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public A get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.ProvisionListenerTest.BImpl"
			],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.BImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public BImpl(A a)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int id()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public A getA()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.BP",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    BP(Provider\u003cA\u003e ap)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public B get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    C(D d)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.D",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    D(C c)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.C2P",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public C2 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.D2P",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public D2 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.C2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    C2(D2 d)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.D2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    D2(C2 c)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.E",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public E(A a, B b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public B getB()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public A getA()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int id()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.A",
				"com.google.inject.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.F",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealF"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.RealF",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RealF(G g)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public G g()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.F"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.G",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.ParentInjectorTest.F",
				"com.google.inject.ScopesTest.GImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.RealG",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RealG(F f)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public F f()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.G"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.H",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.ScopesTest.HImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.I",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.ImplicitBindingTest.IImpl",
				"com.google.inject.ImplicitBindingTest.AlternateImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.J",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.JImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.HImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    HImpl(I i)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.H"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.SimpleSingleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.IImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    IImpl(HImpl i, J j)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.I"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.SimpleSingleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.JImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    JImpl(IImpl i)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.J"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.SimpleSingleton"
			],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SimpleSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.CircularDependencyTest",
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.CircularDependencyTest.JImpl"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.BasicSingleton",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(final Key\u003cT\u003e key, final Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        @SuppressWarnings(\"unchecked\")\n        public T get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.CircularDependencyTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.K",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CircularDependencyTest.L",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void inject(K k)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for interception of default methods.\n *\n * @author cgdecker@google.com (Colin Decker)\n */",
			"name": "com.google.inject.DefaultMethodInterceptionTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkBytecodeGenIsEnabled()",
					"documentation": ""
				},
				{
					"signature": "@Before\n  public void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedDefaultMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedDefaultMethod_calledByAnotherMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedDefaultMethod_whenParentClassDefinesNonInterceptedMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedDefaultMethod_whenParentClassDefinesInterceptedMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterception_ofAllMethodsOnType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterception_ofAllMethodsOnType_interceptsInheritedDefaultMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Matchers",
				"com.google.inject.InterceptMe"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.InterceptMe",
				"com.google.inject.Foo",
				"com.google.inject.DefaultMethodInterceptionTest.NonOverridingFoo",
				"com.google.inject.DefaultMethodInterceptionTest.BaseClass",
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo",
				"com.google.inject.DefaultMethodInterceptionTest.BaseClass2",
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo2",
				"com.google.inject.Baz",
				"com.google.inject.DefaultMethodInterceptionTest.BazImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.InterceptMe",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.DefaultMethodInterceptionTest",
				"com.google.inject.DefaultMethodInterceptionTest.BaseClass2"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.Foo"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Interface with a default method annotated to be intercepted. */",
			"name": "com.google.inject.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@InterceptMe\n    default String defaultMethod()",
					"documentation": "/** Interface with a default method annotated to be intercepted. */"
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [
				"com.google.inject.DefaultMethodInterceptionTest.NonOverridingFoo",
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo",
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo2",
				"com.google.inject.DuplicateBindingsTest.FooImpl",
				"com.google.inject.DuplicateBindingsTest.Bar",
				"com.google.inject.JitBindingsTest.FooImpl",
				"com.google.inject.JitBindingsTest.ScopedFooImpl"
			],
			"uses": [
				"com.google.inject.InterceptMe"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Foo implementation that does not override the default method. */",
			"name": "com.google.inject.DefaultMethodInterceptionTest.NonOverridingFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "public String methodCallingDefault()",
					"documentation": "/** Foo implementation that does not override the default method. */"
				}
			],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** A base class defining a method with the same signature as Foo's default method. */",
			"name": "com.google.inject.DefaultMethodInterceptionTest.BaseClass",
			"extends": "",
			"Methods": [
				{
					"signature": "public String defaultMethod()",
					"documentation": "/** A base class defining a method with the same signature as Foo's default method. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Foo implementation that should use superclass method rather than default method. */",
			"name": "com.google.inject.DefaultMethodInterceptionTest.InheritingFoo",
			"extends": "com.google.inject.DefaultMethodInterceptionTest.BaseClass",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A base class defining an intercepted method with the same signature as Foo's default method.\n   */",
			"name": "com.google.inject.DefaultMethodInterceptionTest.BaseClass2",
			"extends": "",
			"Methods": [
				{
					"signature": "@InterceptMe\n    public String defaultMethod()",
					"documentation": "/**\n   * A base class defining an intercepted method with the same signature as Foo's default method.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DefaultMethodInterceptionTest.InheritingFoo2"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.InterceptMe"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Foo implementation that should use intercepted superclass method rather than default method.\n   */",
			"name": "com.google.inject.DefaultMethodInterceptionTest.InheritingFoo2",
			"extends": "com.google.inject.DefaultMethodInterceptionTest.BaseClass2",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Baz",
			"extends": "",
			"Methods": [
				{
					"signature": "default String doSomething()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.DefaultMethodInterceptionTest.BazImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DefaultMethodInterceptionTest.BazImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String doSomethingElse()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Baz"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A suite of tests for duplicate bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.DuplicateBindingsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testDuplicateBindingsAreIgnored()",
					"documentation": "/**\n * A suite of tests for duplicate bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testElementsDeduplicate()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodsFailIfInstancesDiffer()",
					"documentation": ""
				},
				{
					"signature": "public void testSameScopeInstanceIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testSameScopeAnnotationIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testMixedAnnotationAndScopeForSingletonIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testMixedScopeAndUnscopedIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testMixedScopeFails()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  public void testMixedTargetsFails()",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionInEqualsThrowsCreationException()",
					"documentation": ""
				},
				{
					"signature": "public void testChildInjectorDuplicateParentFail()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicatesSolelyInChildIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testDifferentBindingTypesFail()",
					"documentation": ""
				},
				{
					"signature": "public void testJitBindingsAreCheckedAfterConversions()",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsNotCalledByDefaultOnInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsNotCalledByDefaultOnProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testHashcodeNeverCalledOnInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testHashcodeNeverCalledOnProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "private void removeBasicBindings(Collection\u003cKey\u003c?\u003e\u003e bindings)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Providers",
				"com.google.inject.DuplicateBindingsTest.FooModule",
				"com.google.inject.DuplicateBindingsTest.FailedModule",
				"com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
				"com.google.inject.DuplicateBindingsTest.SimpleModule",
				"com.google.inject.DuplicateBindingsTest.ScopedModule",
				"com.google.inject.DuplicateBindingsTest.AnnotatedScopeModule",
				"com.google.inject.DuplicateBindingsTest.Foo",
				"com.google.inject.DuplicateBindingsTest.HashEqualsTester"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.DuplicateBindingsTest.A",
				"com.google.inject.DuplicateBindingsTest.ThrowingModule",
				"com.google.inject.DuplicateBindingsTest.FooModule",
				"com.google.inject.DuplicateBindingsTest.FailedModule",
				"com.google.inject.DuplicateBindingsTest.FailingProviderModule",
				"com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
				"com.google.inject.DuplicateBindingsTest.SimpleModule",
				"com.google.inject.DuplicateBindingsTest.ScopedModule",
				"com.google.inject.DuplicateBindingsTest.AnnotatedScopeModule",
				"com.google.inject.DuplicateBindingsTest.Foo",
				"com.google.inject.DuplicateBindingsTest.FooImpl",
				"com.google.inject.DuplicateBindingsTest.FooProvider",
				"com.google.inject.DuplicateBindingsTest.Bar",
				"com.google.inject.DuplicateBindingsTest.BarProvider",
				"com.google.inject.DuplicateBindingsTest.HashEqualsTester"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.RealA",
			"extends": "com.google.inject.TypeLiteralInjectionTest.A",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.ThrowingModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.FooModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "FooModule(\n        FooImpl foo,\n        Provider\u003cFoo\u003e pFoo,\n        Class\u003c? extends Provider\u003c? extends Foo\u003e\u003e pclFoo,\n        Class\u003c? extends Foo\u003e clFoo,\n        Constructor\u003cFooImpl\u003e cFoo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.FailedModule",
				"com.google.inject.DuplicateBindingsTest.SimpleModule",
				"com.google.inject.DuplicateBindingsTest.ScopedModule",
				"com.google.inject.DuplicateBindingsTest.AnnotatedScopeModule"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.FailedModule",
			"extends": "com.google.inject.DuplicateBindingsTest.FooModule",
			"Methods": [
				{
					"signature": "FailedModule(\n        FooImpl foo,\n        Provider\u003cFoo\u003e pFoo,\n        Class\u003c? extends Provider\u003c? extends Foo\u003e\u003e pclFoo,\n        Class\u003c? extends Foo\u003e clFoo,\n        Constructor\u003cFooImpl\u003e cFoo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    Foo foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.FailingProviderModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    Foo foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.SimpleProviderModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Named(\"providerMethod\")\n    Foo foo()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings({\n      \"EqualsHashCode\",\n      \"EqualsBrokenForNull\"\n    }) \n    public boolean equals(Object obj)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.name.Named"
			],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.SimpleModule",
			"extends": "com.google.inject.DuplicateBindingsTest.FooModule",
			"Methods": [
				{
					"signature": "SimpleModule(\n        FooImpl foo,\n        Provider\u003cFoo\u003e pFoo,\n        Class\u003c? extends Provider\u003c? extends Foo\u003e\u003e pclFoo,\n        Class\u003c? extends Foo\u003e clFoo,\n        Constructor\u003cFooImpl\u003e cFoo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.ScopedModule",
			"extends": "com.google.inject.DuplicateBindingsTest.FooModule",
			"Methods": [
				{
					"signature": "ScopedModule(\n        Scope scope,\n        FooImpl foo,\n        Provider\u003cFoo\u003e pFoo,\n        Class\u003c? extends Provider\u003c? extends Foo\u003e\u003e pclFoo,\n        Class\u003c? extends Foo\u003e clFoo,\n        Constructor\u003cFooImpl\u003e cFoo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.AnnotatedScopeModule",
			"extends": "com.google.inject.DuplicateBindingsTest.FooModule",
			"Methods": [
				{
					"signature": "AnnotatedScopeModule(\n        Class\u003c? extends Annotation\u003e scope,\n        FooImpl foo,\n        Provider\u003cFoo\u003e pFoo,\n        Class\u003c? extends Provider\u003c? extends Foo\u003e\u003e pclFoo,\n        Class\u003c? extends Foo\u003e clFoo,\n        Constructor\u003cFooImpl\u003e cFoo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.FooImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public FooImpl()",
					"documentation": ""
				},
				{
					"signature": "private static Constructor\u003cFooImpl\u003e cxtor()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.FooProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Bar()",
					"documentation": ""
				},
				{
					"signature": "private static Constructor\u003cBar\u003e cxtor()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.BarProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DuplicateBindingsTest.HashEqualsTester",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.DuplicateBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.EagerSingletonTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testJustInTimeEagerSingletons()",
					"documentation": ""
				},
				{
					"signature": "public void testJustInTimeSingletonsAreNotEager()",
					"documentation": ""
				},
				{
					"signature": "public void testChildEagerSingletons()",
					"documentation": ""
				},
				{
					"signature": "public void testJustInTimeEagerSingletons_multipleThreads() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private static Class\u003c?\u003e copyClass(final Class\u003c?\u003e cls)",
					"documentation": "/** Creates a copy of a class in a child classloader. */"
				},
				{
					"signature": "@Override\n        public Class\u003c?\u003e loadClass(String name) throws ClassNotFoundException",
					"documentation": "/** Creates a copy of a class in a child classloader. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.EagerSingletonTest.A",
				"com.google.inject.EagerSingletonTest.B",
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.EagerSingletonTest.D"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.EagerSingletonTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    A(Injector injector)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EagerSingletonTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EagerSingletonTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EagerSingletonTest.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.GenericInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testGenericInjection() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testImplicitBindingOfGenericType()",
					"documentation": "/**\n   * Although we may not have intended to support this behaviour, this test passes under Guice 1.0.\n   * The workaround is to add an explicit binding for the parameterized type. See {@link\n   * #testExplicitBindingOfGenericType()}.\n   */"
				},
				{
					"signature": "public void testExplicitBindingOfGenericType()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingParameterizedDependenciesForImplicitBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingParameterizedDependenciesForBindingTarget()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingParameterizedDependenciesForBindingSource()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToSubtype()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingSubtype()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  public void assertParameterizedDepsInjected(Key\u003c?\u003e key, Module bindingModule)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          Map\u003cString, Integer\u003e provideMap()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          Set\u003cString\u003e provideSet(Map\u003cString, Integer\u003e map)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          Collection\u003cInteger\u003e provideCollection(Map\u003cString, Integer\u003e map)",
					"documentation": ""
				},
				{
					"signature": "public void testImmediateTypeVariablesAreInjected()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.GenericInjectionTest.SubParameterizedDeps",
				"com.google.inject.GenericInjectionTest.ParameterizedDeps"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.GenericInjectionTest.Foo",
				"com.google.inject.GenericInjectionTest.Parameterized",
				"com.google.inject.GenericInjectionTest.SubParameterizedDeps",
				"com.google.inject.GenericInjectionTest.ParameterizedDeps",
				"com.google.inject.GenericInjectionTest.InjectsT"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.GenericInjectionTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.GenericInjectionTest.Parameterized",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Parameterized()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.GenericInjectionTest.SubParameterizedDeps",
			"extends": "com.google.inject.GenericInjectionTest.ParameterizedDeps",
			"Methods": [
				{
					"signature": "@Inject\n    SubParameterizedDeps(Set\u003cA\u003e keys)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.GenericInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.GenericInjectionTest.ParameterizedDeps",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    ParameterizedDeps(Set\u003cK\u003e keys)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void method(Collection\u003cV\u003e values)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.GenericInjectionTest.SubParameterizedDeps"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.GenericInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.GenericInjectionTest.InjectsT",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.ImplicitBindingTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testCircularDependency() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testDefaultImplementation()",
					"documentation": ""
				},
				{
					"signature": "public void testDefaultProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingOverridesImplementedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testNoImplicitBindingIsCreatedForAnnotatedKeys()",
					"documentation": ""
				},
				{
					"signature": "public void testCircularJitBindingsLeaveNoResidue()",
					"documentation": "/**\n   * When we're building the binding for A, we temporarily insert that binding to support circular\n   * dependencies. And so we can successfully create a binding for B. But later, when the binding\n   * for A ultimately fails, we need to clean up the dependent binding for B.\n   *\n   * \u003cp\u003eThe test loops through linked bindings \u0026 bindings with constructor and member injections, to\n   * make sure that all are cleaned up and traversed. It also makes sure we don't touch explicit\n   * bindings.\n   */"
				},
				{
					"signature": "private static void assertFailure(Injector injector, Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public void testInstancesRequestingProvidersForThemselvesWithChildInjectors()",
					"documentation": "/**\n   * Regression test for https://github.com/google/guice/issues/319\n   *\n   * \u003cp\u003eThe bug is that a class that asks for a provider for itself during injection time, where any\n   * one of the other types required to fulfill the object creation was bound in a child\n   * constructor, explodes when the injected Provider is called.\n   *\n   * \u003cp\u003eIt works just fine when the other types are bound in a main injector.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * Regression test for https://github.com/google/guice/issues/319\n   *\n   * \u003cp\u003eThe bug is that a class that asks for a provider for itself during injection time, where any\n   * one of the other types required to fulfill the object creation was bound in a child\n   * constructor, explodes when the injected Provider is called.\n   *\n   * \u003cp\u003eIt works just fine when the other types are bound in a main injector.\n   */"
				},
				{
					"signature": "public void testRecursiveJitBindingsCleanupCorrectly() throws Exception",
					"documentation": "/**\n   * Ensure that when we cleanup failed JIT bindings, we don't break. The test here requires a\n   * sequence of JIT bindings:\n   *\n   * \u003col\u003e\n   * \u003cli\u003e A-\u003e B\n   * \u003cli\u003e B -\u003e C, A\n   * \u003cli\u003e C -\u003e A, D\n   * \u003cli\u003e D not JITable\n   * \u003c/ol\u003e\n   *\n   * \u003cp\u003eThe problem was that C cleaned up A's binding and then handed control back to B, which tried\n   * to continue processing A.. but A was removed from the jitBindings Map, so it attempts to create\n   * a new JIT binding for A, but we haven't yet finished constructing the first JIT binding for A,\n   * so we get a recursive computation exception from ComputingConcurrentHashMap.\n   *\n   * \u003cp\u003eWe also throw in a valid JIT binding, E, to guarantee that if something fails in this flow,\n   * it can be recreated later if it's not from a failed sequence.\n   */"
				},
				{
					"signature": "public void testProvidedByNonEmptyEnum()",
					"documentation": ""
				},
				{
					"signature": "public void testProvidedByEmptyEnum()",
					"documentation": ""
				},
				{
					"signature": "public void testImplementedByEnum()",
					"documentation": ""
				},
				{
					"signature": "public void testImplicitJdkBindings()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Names",
				"com.google.inject.ImplicitBindingTest.Bar",
				"com.google.inject.Provided",
				"com.google.inject.ImplicitBindingTest.RequiresProviderForSelfWithOtherType",
				"com.google.inject.ImplicitBindingTest.C",
				"com.google.inject.ImplicitBindingTest.D"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ImplicitBindingTest.Foo",
				"com.google.inject.ImplicitBindingTest.Bar",
				"com.google.inject.I",
				"com.google.inject.ImplicitBindingTest.IImpl",
				"com.google.inject.ImplicitBindingTest.AlternateImpl",
				"com.google.inject.Provided",
				"com.google.inject.ImplicitBindingTest.ProvidedProvider",
				"com.google.inject.ImplicitBindingTest.Invalid",
				"com.google.inject.ImplicitBindingTest.InvalidLinked",
				"com.google.inject.ImplicitBindingTest.InvalidLinkedImpl",
				"com.google.inject.ImplicitBindingTest.InvalidLinked2",
				"com.google.inject.ImplicitBindingTest.InvalidLinked2Impl",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedByProvider",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy2",
				"com.google.inject.ImplicitBindingTest.InvalidProvidedBy2Provider",
				"com.google.inject.ImplicitBindingTest.Invalid2",
				"com.google.inject.InvalidInterface",
				"com.google.inject.ImplicitBindingTest.Valid",
				"com.google.inject.ImplicitBindingTest.Valid2",
				"com.google.inject.ImplicitBindingTest.JitValid",
				"com.google.inject.ImplicitBindingTest.JitValid2",
				"com.google.inject.ImplicitBindingTest.TestStringProvider",
				"com.google.inject.ImplicitBindingTest.RequiresProviderForSelfWithOtherType",
				"com.google.inject.ImplicitBindingTest.A",
				"com.google.inject.ImplicitBindingTest.B",
				"com.google.inject.ImplicitBindingTest.C",
				"com.google.inject.ImplicitBindingTest.D",
				"com.google.inject.ImplicitBindingTest.E",
				"com.google.inject.NonEmptyEnum",
				"com.google.inject.ImplicitBindingTest.NonEmptyEnumProvider",
				"com.google.inject.EmptyEnum",
				"com.google.inject.ImplicitBindingTest.EmptyEnumProvider",
				"com.google.inject.EnumWithImplementedBy",
				"com.google.inject.ImplicitBindingTest.EnumWithImplementedByEnum"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Bar(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ImplicitBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.I",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.IImpl",
				"com.google.inject.ImplicitBindingTest.IImpl",
				"com.google.inject.ImplicitBindingTest.AlternateImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.IImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.I"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.AlternateImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.I"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Provided",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ImplicitBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.ProvidedProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Provided get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Invalid",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Invalid(InvalidLinked a)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void foo(InvalidInterface a)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidLinked",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidLinkedImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"InvalidLinked"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidLinked2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidLinked2Impl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    InvalidLinked2Impl(Invalid2 a)",
					"documentation": ""
				}
			],
			"interfaces": [
				"InvalidLinked2"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidProvidedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidProvidedByProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public InvalidProvidedBy get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidProvidedBy2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.InvalidProvidedBy2Provider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public InvalidProvidedBy2 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Invalid2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InvalidInterface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Valid",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.Valid2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.JitValid",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.JitValid2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.TestStringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.RequiresProviderForSelfWithOtherType",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RequiresProviderForSelfWithOtherType(\n        String providedStringValue, Provider\u003cRequiresProviderForSelfWithOtherType\u003e selfProvider)",
					"documentation": ""
				},
				{
					"signature": "public String getValue()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ImplicitBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public A(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.B",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public B(C c, A a)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public C(A a, D d, E e)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ImplicitBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.D",
			"extends": "",
			"Methods": [
				{
					"signature": "public D(int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ImplicitBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NonEmptyEnum",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.NonEmptyEnumProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public NonEmptyEnum get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EmptyEnum",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.EmptyEnumProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public EmptyEnum get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EnumWithImplementedBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ImplicitBindingTest.EnumWithImplementedByEnum",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.InjectorTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testToStringDoesNotInfinitelyRecurse()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethods() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInjection() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "private Injector createFooInjector() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstance() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testIntAndIntegerAreInterchangeable() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInjectorApiIsNotSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testInjectStatics() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInjectStaticInterface()",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateInjection() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testProtectedInjection() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInstanceInjectionHappensAfterFactoriesAreSetUp()",
					"documentation": ""
				},
				{
					"signature": "public void testSubtypeNotProvided()",
					"documentation": ""
				},
				{
					"signature": "public void testNotASubtype()",
					"documentation": ""
				},
				{
					"signature": "public void testRecursiveImplementationType()",
					"documentation": ""
				},
				{
					"signature": "public void testRecursiveProviderType()",
					"documentation": ""
				},
				{
					"signature": "public void testJitBindingFromAnotherThreadDuringInjection()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.Singleton",
				"com.google.inject.Asserts",
				"com.google.inject.InjectorTest.TeeImpl",
				"com.google.inject.InjectorTest.Private",
				"com.google.inject.InjectorTest.Protected"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.Other",
				"com.google.inject.S",
				"com.google.inject.I",
				"com.google.inject.InjectorTest.SampleSingleton",
				"com.google.inject.InjectorTest.IntegerWrapper",
				"com.google.inject.InjectorTest.Foo",
				"com.google.inject.Bar",
				"com.google.inject.InjectorTest.BarImpl",
				"com.google.inject.Tee",
				"com.google.inject.InjectorTest.TeeImpl",
				"com.google.inject.InjectorTest.Interface",
				"com.google.inject.InjectorTest.Static",
				"com.google.inject.InjectorTest.Private",
				"com.google.inject.InjectorTest.Protected",
				"com.google.inject.InjectorTest.MyRunnable",
				"com.google.inject.InjectorTest.Money",
				"com.google.inject.InjectorTest.Tree",
				"com.google.inject.InjectorTest.PineTree",
				"com.google.inject.InjectorTest.SeaHorse",
				"com.google.inject.InjectorTest.Chicken",
				"com.google.inject.InjectorTest.JustInTime"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.Other",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.S",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.I",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.SampleSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.IntegerWrapper",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setI(@I int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.InjectorTest.BarImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.BarImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void initialize(Tee tee)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Tee getTee()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int getI()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Bar"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Tee",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.InjectorTest.TeeImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.TeeImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    TeeImpl(@S String s)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getS()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Bar getBar()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Tee"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.InjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Interface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Static",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    static void setS(@S String s)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Private",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    private Private(String fromConstructor)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setInt(int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.InjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Protected",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    protected Protected(String fromConstructor)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setInt(int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.InjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.MyRunnable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void run()",
					"documentation": ""
				}
			],
			"interfaces": [
				"Runnable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Money",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Tree",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.InjectorTest.PineTree"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.PineTree",
			"extends": "com.google.inject.InjectorTest.Tree",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.SeaHorse",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.Chicken",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Chicken get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InjectorTest.JustInTime",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.IntegrationTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testIntegration() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Matchers",
				"com.google.inject.IntegrationTest.CountingInterceptor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.IntegrationTest.Foo",
				"com.google.inject.IntegrationTest.CountingInterceptor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.IntegrationTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "public void foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.IntegrationTest.CountingInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.IntegrationTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test bindings to lambdas, method references, etc.\n *\n * @author cgdecker@google.com (Colin Decker)\n */",
			"name": "com.google.inject.Java8LanguageFeatureBindingTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBinding_lambdaToInterface()",
					"documentation": "/**\n * Test bindings to lambdas, method references, etc.\n *\n * @author cgdecker@google.com (Colin Decker)\n */"
				},
				{
					"signature": "public void testProviderMethod_returningLambda() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethod_containingLambda_throwingException() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProvider_usingJdk8Features()",
					"documentation": ""
				},
				{
					"signature": "public void testBinding_toProvider_lambda()",
					"documentation": ""
				},
				{
					"signature": "public void testBinding_toProvider_methodReference()",
					"documentation": ""
				},
				{
					"signature": "private String provideString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.Java8LanguageFeatureBindingTest.StringProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.Java8LanguageFeatureBindingTest.StringProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.Java8LanguageFeatureBindingTest.StringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    StringProvider(UUID uuid)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.Java8LanguageFeatureBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Some tests for {@link Binder#requireExplicitBindings()}\n *\n * @author sberlin@gmail.com (Sam Berlin)\n */",
			"name": "com.google.inject.JitBindingsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "private String jitFailed(Class\u003c?\u003e clazz)",
					"documentation": "/**\n * Some tests for {@link Binder#requireExplicitBindings()}\n *\n * @author sberlin@gmail.com (Sam Berlin)\n */"
				},
				{
					"signature": "private String jitFailed(TypeLiteral\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "private String jitInParentFailed(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "private String jitInParentFailed(TypeLiteral\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "private String inChildMessage(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedBindingWorks()",
					"documentation": ""
				},
				{
					"signature": "public void testMoreBasicsWork()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testBasicsWithEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedToScoped()",
					"documentation": ""
				},
				{
					"signature": "public void testBasicsWithScoped()",
					"documentation": ""
				},
				{
					"signature": "public void testFailsIfInjectingScopedDirectlyWhenItIsntBound()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedProviderBindingWorks()",
					"documentation": ""
				},
				{
					"signature": "public void testJitGetFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitInjectionFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitProviderGetFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitProviderInjectionFails()",
					"documentation": ""
				},
				{
					"signature": "public void testImplementedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testImplementedBySomethingThatIsAnnotated()",
					"documentation": ""
				},
				{
					"signature": "public void testProvidedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testChildInjectorInheritsOption()",
					"documentation": ""
				},
				{
					"signature": "public void testChildInjectorAddsOption()",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateModulesInheritOptions()",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateModuleAddsOption()",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateModuleSiblingsDontShareOption()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeLiteralsCanBeInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testMembersInjectorsCanBeInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testJitLinkedBindingInParentFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitProviderBindingInParentFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitImplementedByBindingInParentFails()",
					"documentation": ""
				},
				{
					"signature": "public void testJitProvidedByBindingInParentFails()",
					"documentation": ""
				},
				{
					"signature": "private void ensureWorks(Injector injector, Class\u003c?\u003e... classes)",
					"documentation": ""
				},
				{
					"signature": "private void ensureFails(Injector injector, GetBindingCheck getBinding, Class\u003c?\u003e... classes)",
					"documentation": ""
				},
				{
					"signature": "private void ensureInChild(Injector injector, Class\u003c?\u003e... classes)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.Asserts",
				"com.google.inject.JitBindingsTest.WantsTypeLiterals"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.GetBindingCheck",
				"com.google.inject.JitBindingsTest.Foo",
				"com.google.inject.JitBindingsTest.FooImpl",
				"com.google.inject.JitBindingsTest.ScopedFooImpl",
				"com.google.inject.JitBindingsTest.WantsScopedFooImpl",
				"com.google.inject.JitBindingsTest.Bar",
				"com.google.inject.JitBindingsTest.FooBar",
				"com.google.inject.JitBindingsTest.ProviderFooBar",
				"com.google.inject.JitBindingsTest.FooProvider",
				"com.google.inject.JitBindingsTest.ImplBy",
				"com.google.inject.JitBindingsTest.ImplByImpl",
				"com.google.inject.JitBindingsTest.ImplByScoped",
				"com.google.inject.JitBindingsTest.ImplByScopedImpl",
				"com.google.inject.JitBindingsTest.ProvBy",
				"com.google.inject.JitBindingsTest.ProvByProvider",
				"com.google.inject.JitBindingsTest.WantsTypeLiterals"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.GetBindingCheck",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.FooImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ScopedFooImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.WantsScopedFooImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.FooBar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ProviderFooBar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.FooProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ImplBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ImplByImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"ImplBy"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ImplByScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ImplByScopedImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"ImplByScoped"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ProvBy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.ProvByProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public ProvBy get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.JitBindingsTest.WantsTypeLiterals",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    WantsTypeLiterals(TypeLiteral\u003cT\u003e literal, Set\u003cT\u003e set)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.JitBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.KeyTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void foo(List\u003cString\u003e a, List\u003cString\u003e b)",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void bar(Provider\u003cList\u003cString\u003e\u003e a)",
					"documentation": ""
				},
				{
					"signature": "public void testOfType()",
					"documentation": ""
				},
				{
					"signature": "public void testWithAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testWithAnnotationInstance() throws NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testKeyEquality()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderKey() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testTypeEquality() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testPrimitivesAndWrappersAreEqual()",
					"documentation": "/**\n   * Key canonicalizes {@link int.class} to {@code Integer.class}, and won't expose wrapper types.\n   */"
				},
				{
					"signature": "public void testSerialization() throws IOException, NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testEqualityOfAnnotationTypesAndInstances() throws NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testNonBindingAnnotationOnKey()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingAnnotationWithoutRuntimeRetention()",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e void parameterizedWithVariable(List\u003cT\u003e typeWithVariables)",
					"documentation": ""
				},
				{
					"signature": "public void testCannotCreateKeysWithTypeVariables() throws NoSuchMethodException",
					"documentation": "/** Test for issue 186 */"
				},
				{
					"signature": "public void testCannotGetKeyWithUnspecifiedTypeVariables()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e TypeLiteral\u003cT\u003e createTypeLiteral()",
					"documentation": ""
				},
				{
					"signature": "public void testCannotCreateKeySubclassesWithUnspecifiedTypeVariables()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Key\u003cT\u003e createKey()",
					"documentation": ""
				},
				{
					"signature": "public void testKeysWithDefaultAnnotations()",
					"documentation": ""
				},
				{
					"signature": "public void testAnonymousClassesDontHoldRefs()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.AllDefaults",
				"com.google.inject.Marker"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.B",
				"com.google.inject.Foo",
				"com.google.inject.Bar",
				"com.google.inject.KeyTest.HasTypeParameters",
				"com.google.inject.AllDefaults",
				"com.google.inject.SomeDefaults",
				"com.google.inject.NoDefaults",
				"com.google.inject.Marker",
				"com.google.inject.KeyTest.HasAnnotations",
				"com.google.inject.KeyTest.Typed"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.ProvisionListenerTest.BImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.KeyTest.HasTypeParameters",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.AllDefaults",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.KeyTest",
				"com.google.inject.KeyTest.HasAnnotations"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SomeDefaults",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NoDefaults",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Marker",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.KeyTest",
				"com.google.inject.KeyTest.HasAnnotations"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.KeyTest.HasAnnotations",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AllDefaults",
				"com.google.inject.Marker"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.KeyTest.Typed",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests that code in {@link KotlinSupport} doesn't break when analyzing Java code. */",
			"name": "com.google.inject.KotlinSupportDoesNotBreakJavaTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testConstructorInjection()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMethodInjection()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.KotlinSupportDoesNotBreakJavaTest.InjectedViaConstructor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.KotlinSupportDoesNotBreakJavaTest.InjectedViaConstructor",
				"com.google.inject.KotlinSupportDoesNotBreakJavaTest.InjectedViaMethod"
			]
		},
		{
			"documentation": "/** Tests that code in {@link KotlinSupport} doesn't break when analyzing Java code. */",
			"name": "com.google.inject.KotlinSupportDoesNotBreakJavaTest.InjectedViaConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    InjectedViaConstructor(String s)",
					"documentation": "/** Tests that code in {@link KotlinSupport} doesn't break when analyzing Java code. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.KotlinSupportDoesNotBreakJavaTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.KotlinSupportDoesNotBreakJavaTest.InjectedViaMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setter(String s)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test built-in injection of loggers.\n *\n * @author jessewilson\n */",
			"name": "com.google.inject.LoggerInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testLoggerWithMember()",
					"documentation": "/**\n * Test built-in injection of loggers.\n *\n * @author jessewilson\n */"
				},
				{
					"signature": "public void testLoggerInConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testLoggerWithoutMember()",
					"documentation": ""
				},
				{
					"signature": "public void testCanBindAnnotatedLogger()",
					"documentation": ""
				},
				{
					"signature": "public void testCannotBindLogger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.LoggerInjectionTest.Foo"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.LoggerInjectionTest.Foo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.LoggerInjectionTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    Foo(Logger logger)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.LoggerInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.MembersInjectorTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Inject\n        @Override\n        void doNothing()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "@Inject\n        @Override\n        void doNothing()",
					"documentation": ""
				},
				{
					"signature": "public void testMembersInjectorFromBinder()",
					"documentation": ""
				},
				{
					"signature": "public void testMembersInjectorFromInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testMembersInjectorWithNonInjectedTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectionFailure()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectionAppliesToSpecifiedType()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testCannotBindMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingMembersInjectorWithErrorsInDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testLookupMembersInjectorBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testGettingRawMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testGettingAnnotatedMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testMemberInjectorParallelization() throws Exception",
					"documentation": "/**\n   * Tests that member injections could happen in parallel.\n   *\n   * \u003cp\u003eAdditional check that when member injection happen other threads would wait for it to finish\n   * to provide proper resolution order semantics.\n   */"
				},
				{
					"signature": "public void testRecursiveMemberInjector() throws Exception",
					"documentation": "/** Verifies that member injection injecting itself would get a non initialized instance. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations",
				"com.google.inject.Asserts",
				"com.google.inject.MembersInjectorTest.AbstractParallelMemberInjectionCallback",
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback1",
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback2",
				"com.google.inject.MembersInjectorTest.RecursiveMemberInjection",
				"com.google.inject.MembersInjectorTest.A",
				"com.google.inject.MembersInjectorTest.B",
				"com.google.inject.MembersInjectorTest.C",
				"com.google.inject.MembersInjectorTest.NoInjectedMembers",
				"com.google.inject.MembersInjectorTest.InjectionFailure"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.MembersInjectorTest.AbstractParallelMemberInjectionCallback",
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback1",
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback2",
				"com.google.inject.MembersInjectorTest.RecursiveMemberInjection",
				"com.google.inject.MembersInjectorTest.A",
				"com.google.inject.MembersInjectorTest.B",
				"com.google.inject.MembersInjectorTest.C",
				"com.google.inject.MembersInjectorTest.NoInjectedMembers",
				"com.google.inject.MembersInjectorTest.InjectionFailure",
				"com.google.inject.MembersInjectorTest.InjectsMembersInjector",
				"com.google.inject.MembersInjectorTest.InjectsBrokenMembersInjector",
				"com.google.inject.MembersInjectorTest.Unimplemented"
			]
		},
		{
			"documentation": "/** Callback for member injection. Uses a static type to be referable by getInstance(). */",
			"name": "com.google.inject.MembersInjectorTest.AbstractParallelMemberInjectionCallback",
			"extends": "",
			"Methods": [
				{
					"signature": "AbstractParallelMemberInjectionCallback(\n        Class\u003c? extends AbstractParallelMemberInjectionCallback\u003e otherCallbackClass)",
					"documentation": "/** Callback for member injection. Uses a static type to be referable by getInstance(). */"
				},
				{
					"signature": "@Inject\n    void callback(final Injector injector) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback1",
				"com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback2"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback1",
			"extends": "com.google.inject.MembersInjectorTest.AbstractParallelMemberInjectionCallback",
			"Methods": [
				{
					"signature": "ParallelMemberInjectionCallback1()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.ParallelMemberInjectionCallback2",
			"extends": "com.google.inject.MembersInjectorTest.AbstractParallelMemberInjectionCallback",
			"Methods": [
				{
					"signature": "ParallelMemberInjectionCallback2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Member injection callback that injects itself. */",
			"name": "com.google.inject.MembersInjectorTest.RecursiveMemberInjection",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void callback(RecursiveMemberInjection recursiveMemberInjection)",
					"documentation": "/** Member injection callback that injects itself. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void doNothing()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.B",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void doNothing()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.NoInjectedMembers",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.InjectionFailure",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void fail()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MembersInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.InjectsMembersInjector",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.InjectsBrokenMembersInjector",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MembersInjectorTest.Unimplemented",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.MethodInterceptionTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkBytecodeGenIsEnabled()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSharedProxyClasses()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGetThis()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptingFinalClass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSpiAccessToInterceptors() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGetElements_interceptorBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedMethodThrows() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNotInterceptedMethodsInInterceptedClassDontAddFrames()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptingNonBridgeWorks()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptionOrder()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeDuplicateInterceptors() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testCallLater()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDefaultMethodInterception()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSetterInterception()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptionWithMixedReturnTypes()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderInterception()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptionWithSimilarlyNamedMethodThatAffectsOrdering()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.matcher.AbstractMatcher",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.spi.DefaultElementVisitor",
				"com.google.inject.CountingInterceptor",
				"com.google.inject.MethodInterceptionTest.ReturnNullInterceptor",
				"com.google.inject.MethodInterceptionTest.NoOpInterceptor",
				"com.google.inject.MethodInterceptionTest.Foo",
				"com.google.inject.MethodInterceptionTest.Bar",
				"com.google.inject.MethodInterceptionTest.NamedInterceptor",
				"com.google.inject.MethodInterceptionTest.CallLaterInterceptor",
				"com.google.inject.Grounded",
				"com.google.inject.Intercept",
				"com.google.inject.MethodInterceptionTest.InterceptChecker"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.CountingInterceptor",
				"com.google.inject.MethodInterceptionTest.ReturnNullInterceptor",
				"com.google.inject.MethodInterceptionTest.NoOpInterceptor",
				"com.google.inject.MethodInterceptionTest.Foo",
				"com.google.inject.MethodInterceptionTest.Bar",
				"com.google.inject.MethodInterceptionTest.Interceptable",
				"com.google.inject.MethodInterceptionTest.NotInterceptable",
				"com.google.inject.MethodInterceptionTest.ErasedType",
				"com.google.inject.MethodInterceptionTest.RetType",
				"com.google.inject.MethodInterceptionTest.Superclass",
				"com.google.inject.Interface",
				"com.google.inject.MethodInterceptionTest.Impl",
				"com.google.inject.MethodInterceptionTest.NamedInterceptor",
				"com.google.inject.MethodInterceptionTest.CallLaterInterceptor",
				"com.google.inject.Grounded",
				"com.google.inject.Animal",
				"com.google.inject.Horse",
				"com.google.inject.MythicalAnimal",
				"com.google.inject.FlyingHorse",
				"com.google.inject.MethodInterceptionTest.HorseImpl",
				"com.google.inject.MethodInterceptionTest.Unicorn",
				"com.google.inject.MethodInterceptionTest.Pegasus",
				"com.google.inject.MethodInterceptionTest.BaseSetter",
				"com.google.inject.MethodInterceptionTest.Setter",
				"com.google.inject.Intercept",
				"com.google.inject.RawReturn",
				"com.google.inject.MethodInterceptionTest.GenericReturn",
				"com.google.inject.MethodInterceptionTest.MixedReturn",
				"com.google.inject.ShardedStringProvider",
				"com.google.inject.MethodInterceptionTest.ShardedStringProviderImpl",
				"com.google.inject.MethodInterceptionTest.InterceptChecker",
				"com.google.inject.MethodInterceptionTest.BarGetter"
			]
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.CountingInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.MethodInterceptionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.ReturnNullInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.NoOpInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Interceptable",
			"extends": "",
			"Methods": [
				{
					"signature": "public Foo foo()",
					"documentation": ""
				},
				{
					"signature": "public Bar bar()",
					"documentation": ""
				},
				{
					"signature": "public String explode() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.NotInterceptable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.ErasedType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MethodInterceptionTest.RetType"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.RetType",
			"extends": "com.google.inject.MethodInterceptionTest.ErasedType",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Superclass",
			"extends": "",
			"Methods": [
				{
					"signature": "public T aMethod(T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MethodInterceptionTest.Impl"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Interface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.Impl",
				"com.google.inject.ProvisionListenerTest.Implementation",
				"com.google.inject.RequireAtInjectOnConstructorsTest.NoCxtors"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Impl",
			"extends": "com.google.inject.MethodInterceptionTest.Superclass",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Interface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.NamedInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "NamedInterceptor(String name, List\u003cString\u003e callList)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.CallLaterInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "public CallLaterInterceptor(Queue\u003cRunnable\u003e queue)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object invoke(final MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Grounded",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.MethodInterceptionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.Horse"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Animal",
			"extends": "",
			"Methods": [
				{
					"signature": "default String identifyMyself()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.Horse",
				"com.google.inject.MythicalAnimal"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Horse",
			"extends": "com.google.inject.Animal",
			"Methods": [
				{
					"signature": "@Override\n    @Grounded\n    default String identifyMyself()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.HorseImpl"
			],
			"uses": [
				"com.google.inject.Grounded"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MythicalAnimal",
			"extends": "com.google.inject.Animal",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.Unicorn",
				"com.google.inject.MethodInterceptionTest.Pegasus"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.FlyingHorse",
			"extends": "Horse,",
			"Methods": [
				{
					"signature": "@Override\n    \n    default String identifyMyself()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.Pegasus"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.HorseImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Horse"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MethodInterceptionTest.Unicorn",
				"com.google.inject.MethodInterceptionTest.Pegasus"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Unicorn",
			"extends": "com.google.inject.MethodInterceptionTest.HorseImpl",
			"Methods": [],
			"interfaces": [
				"com.google.inject.MythicalAnimal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Pegasus",
			"extends": "com.google.inject.MethodInterceptionTest.HorseImpl",
			"Methods": [],
			"interfaces": [
				"com.google.inject.MythicalAnimal",
				"com.google.inject.FlyingHorse"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.BaseSetter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    protected void setText(@Named(\"text\") String text)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MethodInterceptionTest.Setter"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.Setter",
			"extends": "com.google.inject.MethodInterceptionTest.BaseSetter",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Intercept",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.MethodInterceptionTest",
				"com.google.inject.MethodInterceptionTest.GenericReturn",
				"com.google.inject.MethodInterceptionTest.ShardedStringProviderImpl",
				"com.google.inject.MethodInterceptionTest.BarGetter"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RawReturn",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.MixedReturn"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.GenericReturn",
			"extends": "",
			"Methods": [
				{
					"signature": "@Intercept\n    public R testReturn()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.MethodInterceptionTest.MixedReturn"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Intercept"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.MixedReturn",
			"extends": "com.google.inject.MethodInterceptionTest.GenericReturn",
			"Methods": [],
			"interfaces": [
				"com.google.inject.RawReturn"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ShardedStringProvider",
			"extends": "com.google.inject.Provider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.ShardedStringProviderImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.ShardedStringProviderImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @Intercept\n    public String get(int i)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.ShardedStringProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Intercept"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.InterceptChecker",
			"extends": "com.google.inject.matcher.AbstractMatcher",
			"Methods": [
				{
					"signature": "@Override\n    public boolean matches(Method m)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.MethodInterceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MethodInterceptionTest.BarGetter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    @Intercept\n    public Bar get()",
					"documentation": ""
				},
				{
					"signature": "public Bar get(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Intercept"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests relating to modules.\n *\n * @author kevinb\n */",
			"name": "com.google.inject.ModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testDiamond() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ModuleTest.B",
				"com.google.inject.ModuleTest.C"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ModuleTest.A",
				"com.google.inject.ModuleTest.B",
				"com.google.inject.ModuleTest.C",
				"com.google.inject.ModuleTest.D",
				"com.google.inject.ModuleTest.X",
				"com.google.inject.ModuleTest.Y",
				"com.google.inject.ModuleTest.Z",
				"com.google.inject.ModuleTest.W"
			]
		},
		{
			"documentation": "/**\n * Tests relating to modules.\n *\n * @author kevinb\n */",
			"name": "com.google.inject.ModuleTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": "/**\n * Tests relating to modules.\n *\n * @author kevinb\n */"
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.B",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.D",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"EqualsBrokenForNull\") \n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.X",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.Y",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.Z",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ModuleTest.W",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.ModulesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testCombineVarargs()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testCombineIterable()",
					"documentation": ""
				},
				{
					"signature": "public void testCombineSources()",
					"documentation": "/** The module returned by Modules.combine shouldn't show up in binder sources. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** The module returned by Modules.combine shouldn't show up in binder sources. */"
				},
				{
					"signature": "private \u003cT\u003e Module newModule(final T toBind)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.Modules"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.NullableInjectionPointTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testInjectNullIntoNotNullableConstructor()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testInjectNullIntoNotNullableMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoNotNullableField()",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstanceOfNull()",
					"documentation": "/** Provider.getInstance() is allowed to return null via direct calls to getInstance(). */"
				},
				{
					"signature": "public void testInjectNullIntoNullableConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoNullableMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoNullableField()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoCustomNullableConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoCustomNullableMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoCustomNullableField()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoTypeUseNullableConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoTypeUseNullableMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectNullIntoTypeUseNullableField()",
					"documentation": ""
				},
				{
					"signature": "private Injector createInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testBindNullToInstance()",
					"documentation": "/** We haven't decided on what the desired behaviour of this test should be... */"
				},
				{
					"signature": "public void testBindNullToProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testBindScopedNull()",
					"documentation": ""
				},
				{
					"signature": "public void testBindNullAsEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testBindNullAndLinkFromOptionalBinder()",
					"documentation": "/**\n   * Tests for a regression where dependency objects were not updated properly and OptionalBinder\n   * was rejecting nulls from its dependencies.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.multibindings.OptionalBinder",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.NullableInjectionPointTest.FooConstructor",
				"com.google.inject.NullableInjectionPointTest.NullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooConstructor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.NullableInjectionPointTest.Foo",
				"com.google.inject.NullableInjectionPointTest.FooConstructor",
				"com.google.inject.NullableInjectionPointTest.FooField",
				"com.google.inject.NullableInjectionPointTest.FooMethod",
				"com.google.inject.NullableInjectionPointTest.NullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.NullableFooField",
				"com.google.inject.NullableInjectionPointTest.NullableFooMethod",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooField",
				"com.google.inject.NullableInjectionPointTest.CustomNullableFooMethod",
				"com.google.inject.NullableInjectionPointTest.TypeUse",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooConstructor",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooField",
				"com.google.inject.NullableInjectionPointTest.TypeUseNullableFooMethod",
				"com.google.inject.Nullable",
				"com.google.inject.NullableInjectionPointTest.Namespace"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.FooConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    FooConstructor(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.NullableInjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.FooField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.FooMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setFoo(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.NullableFooConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    NullableFooConstructor(@Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.NullableInjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.NullableFooField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.NullableFooMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setFoo(@Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.CustomNullableFooConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    CustomNullableFooConstructor(@Namespace.Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.NullableInjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.CustomNullableFooField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.CustomNullableFooMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setFoo(@Namespace.Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.TypeUse",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.Nullable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.TypeUseNullableFooConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    TypeUseNullableFooConstructor(@TypeUse.Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.NullableInjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.TypeUseNullableFooField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.TypeUseNullableFooMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setFoo(@TypeUse.Nullable Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NullableInjectionPointTest.Namespace",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.Nullable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This test verifies the ways things are injected (ie. getInstance(), injectMembers(), bind to\n * instance, and bind to provider instance) for all states of optional bindings (fields, methods,\n * multiple-argument methods, provider fields, provider methods, constructors).\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.OptionalBindingTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testEverythingInjectorGetInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testPartialInjectorGetInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingInjectorGetInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testEverythingInjectorInjectMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testPartialInjectorInjectMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingInjectorInjectMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testEverythingInjectorToInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testPartialInjectorToInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingInjectorToInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testEverythingInjectorToProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testPartialInjectorToProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingInjectorToProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testEverythingInjectorToProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testPartialInjectorToProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testNothingInjectorToProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testOptionalConstructorBlowsUp()",
					"documentation": ""
				},
				{
					"signature": "public void testStaticInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testIndirectOptionalInjection()",
					"documentation": "/**\n   * Test for bug 107, where we weren't doing optional injection properly for indirect injections.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Asserts",
				"com.google.inject.A",
				"com.google.inject.B",
				"com.google.inject.F",
				"com.google.inject.G",
				"com.google.inject.OptionalBindingTest.HasOptionalInjections",
				"com.google.inject.OptionalBindingTest.HasOptionalInjectionsProvider",
				"com.google.inject.OptionalBindingTest.HasOptionalConstructor",
				"com.google.inject.C",
				"com.google.inject.D",
				"com.google.inject.E"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.OptionalBindingTest.HasOptionalInjections",
				"com.google.inject.OptionalBindingTest.HasOptionalInjectionsProvider",
				"com.google.inject.OptionalBindingTest.HasOptionalConstructor",
				"com.google.inject.OptionalBindingTest.Indirect",
				"com.google.inject.A",
				"com.google.inject.B",
				"com.google.inject.C",
				"com.google.inject.D",
				"com.google.inject.E",
				"com.google.inject.F",
				"com.google.inject.G"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.OptionalBindingTest.HasOptionalInjections",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject(optional = true)\n    void methodInjectZeroArguments()",
					"documentation": ""
				},
				{
					"signature": "@Inject(optional = true)\n    void methodInjectOneArgument(B b)",
					"documentation": ""
				},
				{
					"signature": "@Inject(optional = true)\n    void methodInjectTwoArguments(C c, D d)",
					"documentation": ""
				},
				{
					"signature": "@Inject(optional = true)\n    void methodInjectAnnotated(@Named(\"e\") E e)",
					"documentation": ""
				},
				{
					"signature": "@Inject(optional = true)\n    void methodInjectProvider(Provider\u003cG\u003e gProvider)",
					"documentation": ""
				},
				{
					"signature": "void assertNothingInjected()",
					"documentation": ""
				},
				{
					"signature": "public void assertEverythingInjected()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.OptionalBindingTest.HasOptionalInjectionsProvider"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.OptionalBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.OptionalBindingTest.HasOptionalInjectionsProvider",
			"extends": "com.google.inject.OptionalBindingTest.HasOptionalInjections",
			"Methods": [
				{
					"signature": "@Override\n    public HasOptionalInjections get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.OptionalBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.OptionalBindingTest.HasOptionalConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"InjectedConstructorAnnotations\")\n    @Inject(optional = true)\n    HasOptionalConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.OptionalBindingTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.OptionalBindingTest.Indirect",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ScopesTest.AImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.ProvisionListenerTest.BImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ScopesTest.DImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.F",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealF"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.G",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.ParentInjectorTest.F",
				"com.google.inject.ScopesTest.GImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.ParentInjectorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testParentAndChildCannotShareExplicitBindings()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "@Test\n  public void testParentJitBindingWontClobberChildBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testChildCannotBindToAParentJitBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testJustInTimeBindingsAreSharedWithParentIfPossible()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingsInherited()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGetParent()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testChildBindingsNotVisibleToParent()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testScopesInherited()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Object invoke(MethodInvocation methodInvocation)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptorsInherited()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeConvertersInherited()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeConvertersConflicting()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectorInjectionSpanningInjectors()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSeveralLayersOfHierarchy()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testScopeBoundInChildInjectorOnly()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testErrorInParentButOkayInChild()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testErrorInParentAndChild()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.Singleton",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Names",
				"com.google.inject.spi.TypeConverter",
				"com.google.inject.Asserts",
				"com.google.inject.MyScope"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ParentInjectorTest.A",
				"com.google.inject.B",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.MyScope",
				"com.google.inject.ParentInjectorTest.C",
				"com.google.inject.ParentInjectorTest.D",
				"com.google.inject.ParentInjectorTest.E",
				"com.google.inject.ParentInjectorTest.F",
				"com.google.inject.G"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.ProvisionListenerTest.BImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.RealB",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MyScope",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ParentInjectorTest",
				"com.google.inject.ParentInjectorTest.F"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "public A interceptedMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ParentInjectorTest.F",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.G"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.MyScope"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.G",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.ParentInjectorTest.F",
				"com.google.inject.ScopesTest.GImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.PrivateModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBasicUsage()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testWithoutPrivateModules()",
					"documentation": ""
				},
				{
					"signature": "public void testMisplacedExposedAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testMisplacedExposeStatement()",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateModulesAndProvidesMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testCannotBindAKeyExportedByASibling()",
					"documentation": ""
				},
				{
					"signature": "public void testExposeButNoBind()",
					"documentation": ""
				},
				{
					"signature": "public void testMessagesFromPrivateModulesAreNicelyIntegrated()",
					"documentation": "/**\n   * Ensure that when we've got errors in different private modules, Guice presents all errors in a\n   * unified message.\n   */"
				},
				{
					"signature": "public void testNestedPrivateInjectors()",
					"documentation": ""
				},
				{
					"signature": "public void testInstallingRegularModulesFromPrivateModules()",
					"documentation": ""
				},
				{
					"signature": "public void testNestedPrivateModulesWithSomeKeysUnexposed()",
					"documentation": ""
				},
				{
					"signature": "public void testDependenciesBetweenPrivateAndPublic()",
					"documentation": ""
				},
				{
					"signature": "public void testDependenciesBetweenPrivateAndPublicWithPublicEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testDependenciesBetweenPrivateAndPublicWithPrivateEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testSpiAccess()",
					"documentation": ""
				},
				{
					"signature": "public void testParentBindsSomethingInPrivate()",
					"documentation": ""
				},
				{
					"signature": "public void testParentBindingToPrivateLinkedJitBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testParentBindingToPrivateJitBinding()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Exposed",
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.PrivateModuleTest.FailingModule",
				"com.google.inject.PrivateModuleTest.ManyPrivateModules",
				"com.google.inject.PrivateModuleTest.FailingPrivateModule",
				"com.google.inject.PrivateModuleTest.SecondFailingPrivateModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.PrivateModuleTest.AB",
				"com.google.inject.C",
				"com.google.inject.PrivateModuleTest.FailingModule",
				"com.google.inject.PrivateModuleTest.ManyPrivateModules",
				"com.google.inject.PrivateModuleTest.FailingPrivateModule",
				"com.google.inject.PrivateModuleTest.SecondFailingPrivateModule",
				"com.google.inject.PrivateModuleTest.PrivateFoo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.PrivateModuleTest.AB",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.PrivateModuleTest.FailingModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.PrivateModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.PrivateModuleTest.ManyPrivateModules",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.PrivateModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.PrivateModuleTest.FailingPrivateModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.PrivateModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A second class, so we can see another name in the source list. */",
			"name": "com.google.inject.PrivateModuleTest.SecondFailingPrivateModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": "/** A second class, so we can see another name in the source list. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.PrivateModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.PrivateModuleTest.PrivateFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.ProviderInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testProviderInjection() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testProvidersAreInjectedWhenBound()",
					"documentation": "/** Test for bug 155. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Test for bug 155. */"
				},
				{
					"signature": "public void testProvidersAreInjectedBeforeTheyAreUsed()",
					"documentation": "/**\n   * When custom providers are used at injector creation time, they should be injected before use.\n   * In this testcase, we verify that a provider for List.class is injected before it is used.\n   */"
				},
				{
					"signature": "public void testCreationTimeInjectionOrdering()",
					"documentation": "/**\n   * This test ensures that regardless of binding order, instances are injected before they are\n   * used. It injects mutable Count objects and records their value at the time that they're\n   * injected.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.ProviderInjectionTest.Count",
				"com.google.inject.ProviderInjectionTest.Bar"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ProviderInjectionTest.Count",
				"com.google.inject.ProviderInjectionTest.StaticallyInjectable",
				"com.google.inject.ProviderInjectionTest.Foo",
				"com.google.inject.ProviderInjectionTest.Bar",
				"com.google.inject.ProviderInjectionTest.SampleSingleton",
				"com.google.inject.Baz"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderInjectionTest.Count",
			"extends": "",
			"Methods": [
				{
					"signature": "Count(int value)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProviderInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderInjectionTest.StaticallyInjectable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    static void initialize(@Named(\"c\") Count cCount)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderInjectionTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderInjectionTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProviderInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderInjectionTest.SampleSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Baz",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.DefaultMethodInterceptionTest.BazImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.ProvisionExceptionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testExceptionsCollapsed()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testExceptionsCollapsedWithScopes()",
					"documentation": "/**\n   * There's a pass-through of user code in the scope. We want exceptions thrown by Guice to be\n   * limited to a single exception, even if it passes through user code.\n   */"
				},
				{
					"signature": "public void testMethodInjectionExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToProviderInstanceExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testProvisionExceptionsAreWrappedForBindToType()",
					"documentation": "/**\n   * This test demonstrates that if the user throws a ProvisionException, we wrap it to add context.\n   */"
				},
				{
					"signature": "public void testProvisionExceptionsAreWrappedForBindToProviderType()",
					"documentation": ""
				},
				{
					"signature": "public void testProvisionExceptionsAreWrappedForBindToProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testProvisionExceptionIsSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleCauses()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectInnerClass() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testInjectLocalClass() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingAnnotationsOnMethodsAndConstructors()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingAnnotationWarningForScala()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderKeyBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateCausesCollapsed()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleDuplicates()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.Asserts",
				"com.google.inject.ProvisionExceptionTest.A",
				"com.google.inject.ProvisionExceptionTest.ConstructorWithBindingAnnotation",
				"com.google.inject.Green",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ProvisionExceptionTest.DProvider",
				"com.google.inject.ProvisionExceptionTest.F",
				"com.google.inject.ProvisionExceptionTest.FProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.LocalClass",
				"com.google.inject.InnerClass",
				"com.google.inject.ProvisionExceptionTest.A",
				"com.google.inject.ProvisionExceptionTest.B",
				"com.google.inject.ProvisionExceptionTest.C",
				"com.google.inject.ProvisionExceptionTest.E",
				"com.google.inject.ProvisionExceptionTest.MethodWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.ConstructorWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.LikeScala",
				"com.google.inject.Green",
				"com.google.inject.D",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ProvisionExceptionTest.DProvider",
				"com.google.inject.ProvisionExceptionTest.F",
				"com.google.inject.ProvisionExceptionTest.FProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.LocalClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InnerClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    A(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setD(RealD d)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.E",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setObject(Object o)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.MethodWithBindingAnnotation",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    @Green\n    void injectMe(String greenString)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Green"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.ConstructorWithBindingAnnotation",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"InjectedConstructorAnnotations\")\n    @Inject\n    @Green\n    ConstructorWithBindingAnnotation(String greenString)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Green"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * In Scala, fields automatically get accessor methods with the same name. So we don't do\n   * misplaced-binding annotation detection if the offending method has a matching field.\n   */",
			"name": "com.google.inject.ProvisionExceptionTest.LikeScala",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    @Green\n    String green()",
					"documentation": "/**\n   * In Scala, fields automatically get accessor methods with the same name. So we don't do\n   * misplaced-binding annotation detection if the offending method has a matching field.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Green"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Green",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ProvisionExceptionTest",
				"com.google.inject.ProvisionExceptionTest.MethodWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.ConstructorWithBindingAnnotation",
				"com.google.inject.ProvisionExceptionTest.LikeScala"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ScopesTest.DImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.RealD",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RealD()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.DProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public D get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.F",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public F()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionTest.FProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public F get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionExceptionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests that ProvisionExceptions are readable and clearly indicate to the user what went wrong with\n * their code.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.ProvisionExceptionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testConstructorRuntimeException()",
					"documentation": "/**\n * Tests that ProvisionExceptions are readable and clearly indicate to the user what went wrong with\n * their code.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testConstructorCheckedException()",
					"documentation": ""
				},
				{
					"signature": "public void testCustomProvidersRuntimeException()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodRuntimeException()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodCheckedException()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.internal.Messages",
				"com.google.inject.ProvisionExceptionsTest.Explosion",
				"com.google.inject.ProvisionExceptionsTest.TracerImpl"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ProvisionExceptionsTest.Exploder",
				"com.google.inject.ProvisionExceptionsTest.Explosion",
				"com.google.inject.ProvisionExceptionsTest.Tracer",
				"com.google.inject.ProvisionExceptionsTest.TracerImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionsTest.Exploder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionsTest.Explosion",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Explosion(@Named(\"runtime\") boolean runtime) throws IOException",
					"documentation": ""
				},
				{
					"signature": "public static Explosion createRuntime()",
					"documentation": ""
				},
				{
					"signature": "public static Explosion createChecked() throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [
				"Exploder"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionsTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionsTest.Tracer",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionExceptionsTest.TracerImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    TracerImpl(Exploder explosion)",
					"documentation": ""
				}
			],
			"interfaces": [
				"Tracer"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionExceptionsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link Binder#bindListener(Matcher, ProvisionListener...)}\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.ProvisionListenerTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testExceptionInListenerBeforeProvisioning()",
					"documentation": "/**\n * Tests for {@link Binder#bindListener(Matcher, ProvisionListener...)}\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testExceptionInListenerAfterProvisioning()",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionInProvisionExplicitlyCalled()",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionInProvisionAutomaticallyCalled()",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionInFieldProvision() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionInCxtorProvision() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testListenerCallsProvisionTwice()",
					"documentation": ""
				},
				{
					"signature": "public void testCachedInScopePreventsProvisionNotify()",
					"documentation": ""
				},
				{
					"signature": "public void testCombineAllBindListenerCalls()",
					"documentation": ""
				},
				{
					"signature": "public void testNotifyEarlyListenersIfFailBeforeProvision()",
					"documentation": ""
				},
				{
					"signature": "public void testNotifyLaterListenersIfFailAfterProvision()",
					"documentation": ""
				},
				{
					"signature": "public void testNotifiedKeysOfAllBindTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonMatcher()",
					"documentation": ""
				},
				{
					"signature": "public void testCallingBindingDotGetProviderDotGet()",
					"documentation": ""
				},
				{
					"signature": "private static Matcher\u003cBinding\u003c?\u003e\u003e keyMatcher(final Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public boolean matches(Binding\u003c?\u003e t)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  public void testDependencyChain()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleRequestInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testToProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectorInjectMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToInjectorWithListeningGivesSaneException()",
					"documentation": ""
				},
				{
					"signature": "public void testProvisionIsNotifiedAfterContextsClear()",
					"documentation": ""
				},
				{
					"signature": "public void testDeDuplicateProvisionListeners()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.matcher.AbstractMatcher",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.ProvisionListener",
				"com.google.inject.Asserts",
				"com.google.inject.ProvisionListenerTest.Implementation",
				"com.google.inject.ProvisionListenerTest.JitFoo2",
				"com.google.inject.ProvisionListenerTest.Foo",
				"com.google.inject.ProvisionListenerTest.FooBomb",
				"com.google.inject.ProvisionListenerTest.DependsOnFooBombInCxtor",
				"com.google.inject.ProvisionListenerTest.Counter",
				"com.google.inject.ProvisionListenerTest.CountAndCaptureExceptionListener",
				"com.google.inject.ProvisionListenerTest.Capturer",
				"com.google.inject.ProvisionListenerTest.FailBeforeProvision",
				"com.google.inject.ProvisionListenerTest.FailAfterProvision",
				"com.google.inject.ProvisionListenerTest.JustProvision",
				"com.google.inject.ProvisionListenerTest.NoProvision",
				"com.google.inject.ProvisionListenerTest.ProvisionTwice",
				"com.google.inject.ProvisionListenerTest.ChainAsserter",
				"com.google.inject.ProvisionListenerTest.SpecialChecker",
				"com.google.inject.ProvisionListenerTest.Instance",
				"com.google.inject.ProvisionListenerTest.Y"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.Interface",
				"com.google.inject.ProvisionListenerTest.Implementation",
				"com.google.inject.ProvisionListenerTest.Sole",
				"com.google.inject.ProvisionListenerTest.Many",
				"com.google.inject.ProvisionListenerTest.JitFoo",
				"com.google.inject.ProvisionListenerTest.JitFoo2",
				"com.google.inject.ProvisionListenerTest.LinkedFoo",
				"com.google.inject.ProvisionListenerTest.Foo",
				"com.google.inject.ProvisionListenerTest.FooP",
				"com.google.inject.ProvisionListenerTest.JitFoo2P",
				"com.google.inject.ProvisionListenerTest.FooBomb",
				"com.google.inject.ProvisionListenerTest.DependsOnFooBombInField",
				"com.google.inject.ProvisionListenerTest.DependsOnFooBombInCxtor",
				"com.google.inject.ProvisionListenerTest.Counter",
				"com.google.inject.ProvisionListenerTest.CountAndCaptureExceptionListener",
				"com.google.inject.ProvisionListenerTest.Capturer",
				"com.google.inject.ProvisionListenerTest.FailBeforeProvision",
				"com.google.inject.ProvisionListenerTest.FailAfterProvision",
				"com.google.inject.ProvisionListenerTest.JustProvision",
				"com.google.inject.ProvisionListenerTest.NoProvision",
				"com.google.inject.ProvisionListenerTest.ProvisionTwice",
				"com.google.inject.ProvisionListenerTest.ChainAsserter",
				"com.google.inject.ProvisionListenerTest.SpecialChecker",
				"com.google.inject.ProvisionListenerTest.Instance",
				"com.google.inject.ProvisionListenerTest.A",
				"com.google.inject.B",
				"com.google.inject.ProvisionListenerTest.BImpl",
				"com.google.inject.C",
				"com.google.inject.D",
				"com.google.inject.ProvisionListenerTest.DP",
				"com.google.inject.ProvisionListenerTest.E",
				"com.google.inject.ProvisionListenerTest.F",
				"com.google.inject.ProvisionListenerTest.X",
				"com.google.inject.ProvisionListenerTest.Y"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.Interface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.MethodInterceptionTest.Impl",
				"com.google.inject.ProvisionListenerTest.Implementation",
				"com.google.inject.RequireAtInjectOnConstructorsTest.NoCxtors"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Implementation",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Interface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Sole",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Many",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.JitFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.JitFoo2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.LinkedFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"JitFoo",
				"LinkedFoo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.FooP",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Foo get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.JitFoo2P",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public JitFoo2 get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.FooBomb",
			"extends": "",
			"Methods": [
				{
					"signature": "FooBomb()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.DependsOnFooBombInField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.DependsOnFooBombInCxtor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    DependsOnFooBombInCxtor(FooBomb fooBomb)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Counter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.CountAndCaptureExceptionListener",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Capturer",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				},
				{
					"signature": "Set\u003cKey\u003c?\u003e\u003e getAsSetAndClear()",
					"documentation": ""
				},
				{
					"signature": "List\u003cKey\u003c?\u003e\u003e getAndClear()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.FailBeforeProvision",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.FailAfterProvision",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.JustProvision",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.NoProvision",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.ProvisionTwice",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.ChainAsserter",
			"extends": "",
			"Methods": [
				{
					"signature": "public ChainAsserter(List\u003cClass\u003c?\u003e\u003e provisionList, Iterable\u003cClass\u003c?\u003e\u003e expected)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.SpecialChecker",
			"extends": "",
			"Methods": [
				{
					"signature": "public SpecialChecker(Class\u003c?\u003e notifyType, String firstSource, AtomicBoolean notified)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(ProvisionInvocation\u003cT\u003e provision)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Instance",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    A(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.BImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ParentInjectorTest.RealB",
				"com.google.inject.ProvisionListenerTest.BImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.BImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void inject(C c)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ScopesTest.DImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.DP",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public D get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.F",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.X",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    X(Provider\u003cY\u003e yProvider)",
					"documentation": ""
				},
				{
					"signature": "void init()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProvisionListenerTest.Y",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Y(Provider\u003cX\u003e xProvider)",
					"documentation": ""
				},
				{
					"signature": "void init()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.ProvisionListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.ReflectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testNormalBinding() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testConstantBinding() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedBinding() throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.ReflectionTest.Foo",
				"com.google.inject.ReflectionTest.Bar"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.I",
				"com.google.inject.ReflectionTest.Foo",
				"com.google.inject.ReflectionTest.Bar"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.I",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ReflectionTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ReflectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ReflectionTest.Bar",
			"extends": "com.google.inject.TypeConversionTest.Foo",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ReflectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.RequestInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testInjectMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectStatics() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInjectMembersAndStatics()",
					"documentation": ""
				},
				{
					"signature": "public void testValidationErrorOnInjectedMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectionErrorOnInjectedMembers()",
					"documentation": ""
				},
				{
					"signature": "public void testUserExceptionWhileInjectingInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testUserExceptionWhileInjectingStatically()",
					"documentation": ""
				},
				{
					"signature": "public void testEarlyInjectableReferencesWithSameIdentity()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.spi.TypeListener",
				"com.google.inject.Asserts",
				"com.google.inject.RequestInjectionTest.NeedsRunnable",
				"com.google.inject.RequestInjectionTest.BlowsUpOnInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.ForField",
				"com.google.inject.ForMethod",
				"com.google.inject.RequestInjectionTest.NeedsRunnable",
				"com.google.inject.RequestInjectionTest.HasInjections",
				"com.google.inject.RequestInjectionTest.BlowsUpOnInject"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.ForField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ForMethod",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequestInjectionTest.NeedsRunnable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RequestInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequestInjectionTest.HasInjections",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    static void setStaticMethod(@ForMethod String staticMethod)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setInstanceS(@ForMethod String instanceS)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequestInjectionTest.BlowsUpOnInject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void injectInstance()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    static void injectStatically()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.RequestInjectionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link Binder#requireAtInjectOnConstructors()}\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.RequireAtInjectOnConstructorsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testNoCxtors_explicitBinding()",
					"documentation": "/**\n * Tests for {@link Binder#requireAtInjectOnConstructors()}\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testNoCxtors_jitBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testNoCxtors_implicitBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testNoCxtors_inheritedByPrivateModules()",
					"documentation": ""
				},
				{
					"signature": "public void testNoCxtors_accumulatesAllErrors()",
					"documentation": ""
				},
				{
					"signature": "public void testNoCxtors_separateOptionsForPrivateModules()",
					"documentation": ""
				},
				{
					"signature": "public void testManyConstructorsButNoneWithAtInject()",
					"documentation": ""
				},
				{
					"signature": "public void testRequireAtInjectStillAllowsToConstructorBindings()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RequireAtInjectOnConstructorsTest.ManyConstructors"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.RequireAtInjectOnConstructorsTest.Interface",
				"com.google.inject.RequireAtInjectOnConstructorsTest.NoCxtors",
				"com.google.inject.RequireAtInjectOnConstructorsTest.AnotherNoCxtors",
				"com.google.inject.RequireAtInjectOnConstructorsTest.ManyConstructors"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequireAtInjectOnConstructorsTest.Interface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequireAtInjectOnConstructorsTest.NoCxtors",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.Interface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequireAtInjectOnConstructorsTest.AnotherNoCxtors",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RequireAtInjectOnConstructorsTest.ManyConstructors",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    ManyConstructors()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    ManyConstructors(String a)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    ManyConstructors(int a)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RequireAtInjectOnConstructorsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link RestrictedBindingSource}.\n *\n * @author vzm@google.com (Vladimir Makaric)\n */",
			"name": "com.google.inject.RestrictedBindingSourceTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void networkLibraryCanProvideItsBindings()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void networkBindingCantBeProvidedByOtherModules()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @GatewayIpAdress\n          int provideGatewayIp()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingImplementationErrorForRestrictedBindingIncludesExplanation()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void canBindRestrictedTypeWithUnrestrictedQualifierAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void twoRogueNetworkBindingsYieldTwoErrorMessages()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @GatewayIpAdress\n          int provideGatewayIp()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          RoutingTable provideRoutingTable()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void bindingWithTwoPermitsAllowedIfOnePresent()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void untargettedBindingAllowedWithPermit()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void untargettedBindingDisallowedWithoutPermit()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void permitOnAnonymousClassWorks()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void rogueBindingWithWarningRestrictionLevel()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void exemptModulesCanCreateRestrictedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void nonExemptModuleCantCreateRestrictedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void parentModuleExeptionAppliesToChildPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void exemptModuleCanBeOverridenIfRestrictedBindingIsNotOverriden()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void permittedModuleCanWithSourceAnUnpermittedModuleMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void unpermittedModuleCantWithSourceAPermittedModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void getElements_getModule_works()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void rogueBindingByMethodScannerDenied()",
					"documentation": ""
				},
				{
					"signature": "@NetworkProvides\n          String provideNetworkString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void bindingsAddedByMethodScannerAllowedByNetworkLib()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerWithPermitCanCreateRestrictedBinding()",
					"documentation": ""
				},
				{
					"signature": "@NetworkProvides\n          String provideNetworkString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerWithPermitCanCreateRestrictedBindings()",
					"documentation": ""
				},
				{
					"signature": "@NetworkProvides\n          String provideNetworkString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void moduleInstalledByScannerInheritsMethodModulePermit()",
					"documentation": ""
				},
				{
					"signature": "private static Module scannerModule(ModuleAnnotatedMethodScanner scanner)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void modulesOverrideCantOverrideRestrictedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void modulesOverrideRestrictedBindingAllowedIfParentHasPermit()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void modulesOverrideCanOverrideUnrestrictedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void nestedModulesOverrideCanOverrideUnrestrictedBindings()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void modulesOverridePrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void originalElementSourceNotTrustedIfSetExternally()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void parentHasPermit_childPrivateModuleCanBind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void noPermitOnStack_privateModuleCantBind()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void parentHasPermit_childPrivateModuleCanExposeBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void noPermitOnStack_childPrivateModuleCantExposeBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childInjectorCantBindRestrictedBindingWithoutPermit()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          RoutingTable provideRoutingTable()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childInjectorCanBindRestrictedBindingWithPermit()",
					"documentation": ""
				},
				{
					"signature": "CreationException assertThatInjectorCreationFails(Module... modules)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Exposed",
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.RestrictedBindingSource",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Modules",
				"com.google.inject.Foo",
				"com.google.inject.NetworkLibrary",
				"com.google.inject.GatewayIpAdress",
				"com.google.inject.NetworkTestLibrary",
				"com.google.inject.MacAddress",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule",
				"com.google.inject.RestrictedBindingSourceTest.RoutingTableImpl",
				"com.google.inject.PermittedNetworkModule",
				"com.google.inject.HostIp",
				"com.google.inject.DnsAddress",
				"com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.TopLevelModulePrivatelyBindingDnsAddress",
				"com.google.inject.RestrictedBindingSourceTest.PermittedModule",
				"com.google.inject.NetworkProvides",
				"com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
				"com.google.inject.NetworkModuleWithCustomProvides",
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithoutPermit",
				"com.google.inject.ScannedModuleWithPermit",
				"com.google.inject.NetworkModuleVersion2",
				"com.google.inject.UnrestrictedQualifier",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModuleThatInstalls",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleCreatesUnexposedNetworkBinding",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleExposesNetworkBinding"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.NetworkLibrary",
				"com.google.inject.GatewayIpAdress",
				"com.google.inject.Hostname",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModule",
				"com.google.inject.RoutingTable",
				"com.google.inject.RestrictedBindingSourceTest.RoutingModule",
				"com.google.inject.NetworkTestLibrary",
				"com.google.inject.MacAddress",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule",
				"com.google.inject.RestrictedBindingSourceTest.RoutingTableImpl",
				"com.google.inject.PermittedNetworkModule",
				"com.google.inject.FooPermit",
				"com.google.inject.Foo",
				"com.google.inject.HostIp",
				"com.google.inject.DnsAddress",
				"com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.TopLevelModulePrivatelyBindingDnsAddress",
				"com.google.inject.RestrictedBindingSourceTest.PermittedModule",
				"com.google.inject.RestrictedBindingSourceTest.UnpermittedModule",
				"com.google.inject.NetworkProvides",
				"com.google.inject.Network",
				"com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
				"com.google.inject.NetworkModuleWithCustomProvides",
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithoutPermit",
				"com.google.inject.ScannedModuleWithPermit",
				"com.google.inject.NetworkModuleVersion2",
				"com.google.inject.UnrestrictedQualifier",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModuleThatInstalls",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleCreatesUnexposedNetworkBinding",
				"com.google.inject.RestrictedBindingSourceTest.PrivateModuleExposesNetworkBinding"
			]
		},
		{
			"documentation": "/**\n * Tests for {@link RestrictedBindingSource}.\n *\n * @author vzm@google.com (Vladimir Makaric)\n */",
			"name": "com.google.inject.NetworkLibrary",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModule",
				"com.google.inject.RestrictedBindingSourceTest.RoutingModule",
				"com.google.inject.RestrictedBindingSourceTest.PermittedModule",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModuleThatInstalls"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.PermittedNetworkModule",
				"com.google.inject.NetworkModuleWithCustomProvides",
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.ScannedModuleWithPermit",
				"com.google.inject.NetworkModuleVersion2"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.GatewayIpAdress",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.NetworkModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithoutPermit",
				"com.google.inject.NetworkModuleVersion2"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Hostname",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.NetworkModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @GatewayIpAdress\n    int provideIpAddress()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.NetworkLibrary",
				"com.google.inject.GatewayIpAdress"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RoutingTable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.RestrictedBindingSourceTest.RoutingTableImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.RoutingModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    RoutingTable provideRoutingTable(@GatewayIpAdress int gateway)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.NetworkLibrary"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkTestLibrary",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.MacAddress",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.TestMacAddressModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @MacAddress\n    String provideMacAddress()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.NetworkTestLibrary",
				"com.google.inject.MacAddress"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.RoutingTableImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RoutingTableImpl()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int getNextHopIpAddress(int destinationIpAddress)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.RoutingTable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.PermittedNetworkModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.FooPermit",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.HostIp",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.DnsAddress",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest",
				"com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
				"com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.FooRogueDnsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @DnsAddress\n    int rogueDns()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.DnsAddress"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.BarRogueDnsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @DnsAddress\n    int rogueDns()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.DnsAddress"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.BazRogueDnsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @DnsAddress\n    int rogueDns()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.DnsAddress"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.TopLevelModulePrivatelyBindingDnsAddress",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.PermittedModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.UnpermittedModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "public String foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkProvides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.NetworkModuleWithCustomProvides",
				"com.google.inject.ScannedModuleWithPermit"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Network",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.NetworkProvidesScannerWithPermit",
				"com.google.inject.NetworkProvidesScannerWithoutPermit"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkModuleWithCustomProvides",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@NetworkProvides\n      String provideNetworkString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary",
				"com.google.inject.NetworkProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkProvidesScannerWithPermit",
			"extends": "com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkProvidesScannerWithPermit",
			"extends": "com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
			"Methods": [
				{
					"signature": "@Override\n      public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n          Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.NetworkLibrary",
				"com.google.inject.GatewayIpAdress"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkProvidesScannerWithoutPermit",
			"extends": "com.google.inject.RestrictedBindingSourceTest.NetworkProvidesScanner",
			"Methods": [
				{
					"signature": "@Override\n      public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n          Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.GatewayIpAdress"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScannedModuleWithPermit",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@NetworkProvides\n      String provideNetworkString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary",
				"com.google.inject.NetworkProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NetworkModuleVersion2",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.util.Modules",
				"com.google.inject.NetworkLibrary",
				"com.google.inject.GatewayIpAdress"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.UnrestrictedQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.NetworkModuleThatInstalls",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "NetworkModuleThatInstalls(Module module)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.NetworkLibrary"
			],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.PrivateModuleCreatesUnexposedNetworkBinding",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RestrictedBindingSourceTest.PrivateModuleExposesNetworkBinding",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.RestrictedBindingSourceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.ScopesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testSingletons()",
					"documentation": ""
				},
				{
					"signature": "public void testJustInTimeAnnotatedSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonIsPerInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testOverriddingAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testScopingAnnotationsOnAbstractTypeViaBind()",
					"documentation": ""
				},
				{
					"signature": "public void testScopingAnnotationsOnAbstractTypeIsValidForComponent()",
					"documentation": ""
				},
				{
					"signature": "public void testScopingAnnotationsOnAbstractTypeViaImplementedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testScopingAnnotationsOnAbstractTypeViaProvidedBy()",
					"documentation": ""
				},
				{
					"signature": "public void testScopeUsedButNotBound()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonsInProductionStage()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonsInDevelopmentStage()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonScopeIsNotSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testNoScopeIsNotSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testUnscopedProviderWorksOutsideOfRequestedScope()",
					"documentation": ""
				},
				{
					"signature": "public void testScopeAnnotationWithoutRuntimeRetention()",
					"documentation": ""
				},
				{
					"signature": "public void testBindScopeToAnnotationWithoutScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testBindScopeTooManyTimes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindDuplicateScope()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateScopeAnnotations()",
					"documentation": ""
				},
				{
					"signature": "public void testNullScopedAsASingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonAnnotationOnParameterizedType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "public void testScopeThatGetsAnUnrelatedObject()",
					"documentation": ""
				},
				{
					"signature": "public void testIsSingletonPositive()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"G\")\n          @Singleton\n          String provideG()",
					"documentation": ""
				},
				{
					"signature": "public void testIsSingletonNegative()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"E\")\n          @CustomScoped\n          String provideE()",
					"documentation": ""
				},
				{
					"signature": "public void testIsScopedPositive()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"E\")\n          @CustomScoped\n          String provideE()",
					"documentation": ""
				},
				{
					"signature": "public void testIsScopedNegative()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"E\")\n          @Singleton\n          String provideE()",
					"documentation": ""
				},
				{
					"signature": "private boolean isCustomScoped(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "ImmutableMap\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e indexBindings(Iterable\u003cElement\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonConstructorThrows()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectorsDontDeadlockOnSingletons() throws Exception",
					"documentation": "/**\n   * Tests that different injectors should not affect each other.\n   *\n   * \u003cp\u003eThis creates a second thread to work in parallel, to create two instances of {@link S} as\n   * the same time. If the lock if not granular enough (i.e. JVM-wide) then they would block each\n   * other creating a deadlock and await timeout.\n   */"
				},
				{
					"signature": "public void testSiblingInjectorGettingCircularSingletonsOneCircularProxy() throws Exception",
					"documentation": "/**\n   * Tests that injector can create two singletons with circular dependency in parallel.\n   *\n   * \u003cp\u003eThis creates two threads to work in parallel, to create instances of {@link G} and {@link\n   * H}. Creation is synchronized by injection of {@link S}, first thread would block until second\n   * would be inside a singleton creation as well.\n   *\n   * \u003cp\u003eBoth instances are created by sibling injectors, that share singleton scope. Verifies that\n   * exactly one circular proxy object is created.\n   */"
				},
				{
					"signature": "public void testUnresolvableSingletonCircularDependencyErrorMessage() throws Exception",
					"documentation": "/**\n   * Check that circular dependencies on non-interfaces are correctly resolved in multi-threaded\n   * case. And that an error message constructed is a good one.\n   *\n   * \u003cp\u003eI0 -\u003e I1 -\u003e I2 -\u003e J1 and J0 -\u003e J1 -\u003e J2 -\u003e K1 and K0 -\u003e K1 -\u003e K2, where I1, J1 and K1 are\n   * created in parallel.\n   *\n   * \u003cp\u003eCreation is synchronized by injection of {@link S}, first thread would block until second\n   * would be inside a singleton creation as well.\n   *\n   * \u003cp\u003eVerifies that provision results in an error, that spans two threads and has a dependency\n   * cycle.\n   */"
				},
				{
					"signature": "public void testScopeAppliedByUserInsteadOfScoping() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testForInstanceOfNoScopingReturnsUnscoped()",
					"documentation": ""
				},
				{
					"signature": "public void testScopedLinkedBindingDoesNotPropagateEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n              public T get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.ProvidedBy",
				"com.google.inject.Provides",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.Singleton",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.Asserts",
				"com.google.inject.Component",
				"com.google.inject.ScopesTest.OuterRuntimeModule",
				"com.google.inject.ScopesTest.InnerRuntimeModule",
				"com.google.inject.ScopesTest.OuterDeprecatedModule",
				"com.google.inject.ScopesTest.InnerDeprecatedModule",
				"com.google.inject.ScopesTest.OuterScopeModule",
				"com.google.inject.ScopesTest.CustomNoScopeModule",
				"com.google.inject.ScopesTest.CustomSingletonModule",
				"com.google.inject.RememberProviderScope",
				"com.google.inject.CustomScoped",
				"com.google.inject.ProviderGetScope",
				"com.google.inject.ScopesTest.S",
				"com.google.inject.ScopesTest.SBarrierProvider",
				"com.google.inject.ScopesTest.GImpl",
				"com.google.inject.ScopesTest.HImpl",
				"com.google.inject.ScopesTest.I0",
				"com.google.inject.ScopesTest.J0",
				"com.google.inject.ScopesTest.K0",
				"com.google.inject.ScopesTest.ScopeMutatingProvisionListener"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.A",
				"com.google.inject.ScopesTest.AImpl",
				"com.google.inject.Component",
				"com.google.inject.ComponentAnnotationTest",
				"com.google.inject.ScopesTest.ComponentAnnotationTestImpl",
				"com.google.inject.D",
				"com.google.inject.ScopesTest.DImpl",
				"com.google.inject.E",
				"com.google.inject.ScopesTest.EProvider",
				"com.google.inject.ScopesTest.B",
				"com.google.inject.ScopesTest.C",
				"com.google.inject.ScopesTest.OuterRuntimeModule",
				"com.google.inject.ScopesTest.InnerRuntimeModule",
				"com.google.inject.ScopesTest.OuterDeprecatedModule",
				"com.google.inject.ScopesTest.InnerDeprecatedModule",
				"com.google.inject.ScopesTest.OuterScopeModule",
				"com.google.inject.ScopesTest.CustomNoScopeModule",
				"com.google.inject.ScopesTest.CustomSingletonModule",
				"com.google.inject.RememberProviderScope",
				"com.google.inject.In",
				"com.google.inject.ScopesTest.Injected",
				"com.google.inject.CustomScoped",
				"com.google.inject.NotRuntimeRetainedScoped",
				"com.google.inject.ScopesTest.AnnotatedCustomScoped",
				"com.google.inject.ScopesTest.AnnotatedSingleton",
				"com.google.inject.ScopesTest.BoundAsSingleton",
				"com.google.inject.ScopesTest.EagerSingleton",
				"com.google.inject.LinkedSingleton",
				"com.google.inject.ScopesTest.RealLinkedSingleton",
				"com.google.inject.ScopesTest.DependsOnJustInTimeSingleton",
				"com.google.inject.ScopesTest.JustInTimeSingleton",
				"com.google.inject.ScopesTest.NotASingleton",
				"com.google.inject.ScopesTest.SingletonAndCustomScoped",
				"com.google.inject.ScopesTest.ImplementedBySingleton",
				"com.google.inject.ScopesTest.ProvidedBySingleton",
				"com.google.inject.ScopesTest.Implementation",
				"com.google.inject.ScopesTest.ImplementationProvider",
				"com.google.inject.ProviderGetScope",
				"com.google.inject.ScopesTest.ThrowingSingleton",
				"com.google.inject.ScopesTest.S",
				"com.google.inject.ScopesTest.SBarrierProvider",
				"com.google.inject.G",
				"com.google.inject.ScopesTest.GImpl",
				"com.google.inject.H",
				"com.google.inject.ScopesTest.HImpl",
				"com.google.inject.ScopesTest.I0",
				"com.google.inject.ScopesTest.I1",
				"com.google.inject.ScopesTest.I2",
				"com.google.inject.ScopesTest.J0",
				"com.google.inject.ScopesTest.J1",
				"com.google.inject.ScopesTest.J2",
				"com.google.inject.ScopesTest.K0",
				"com.google.inject.ScopesTest.K1",
				"com.google.inject.ScopesTest.K2",
				"com.google.inject.ScopesTest.SingletonClass",
				"com.google.inject.ScopesTest.ScopeMutatingProvisionListener"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [
				"com.google.inject.BinderTestSuite.PlainA",
				"com.google.inject.CircularDependencyTest.AImpl",
				"com.google.inject.CircularDependencyTest.E",
				"com.google.inject.ScopesTest.AImpl"
			],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.AImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Component",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ScopesTest",
				"com.google.inject.ComponentAnnotationTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ComponentAnnotationTest",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.ScopesTest.ComponentAnnotationTestImpl"
			],
			"uses": [
				"com.google.inject.Singleton",
				"com.google.inject.Component"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.ComponentAnnotationTestImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.ComponentAnnotationTest"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.EagerSingletonTest.C",
				"com.google.inject.ProvisionExceptionTest.RealD",
				"com.google.inject.ScopesTest.DImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.DImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.EProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public E get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.CustomScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.OuterRuntimeModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.InnerRuntimeModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.OuterDeprecatedModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.InnerDeprecatedModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.OuterScopeModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.CustomNoScopeModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.CustomSingletonModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.RememberProviderScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ScopesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.In",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.ScopesTest.Injected"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.Injected",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.In"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.CustomScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ScopesTest",
				"com.google.inject.ScopesTest.C",
				"com.google.inject.ScopesTest.AnnotatedCustomScoped",
				"com.google.inject.ScopesTest.SingletonAndCustomScoped"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.NotRuntimeRetainedScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.AnnotatedCustomScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.CustomScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.AnnotatedSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.BoundAsSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.EagerSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.LinkedSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.ScopesTest.RealLinkedSingleton"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.RealLinkedSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.LinkedSingleton"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.DependsOnJustInTimeSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.JustInTimeSingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.NotASingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.SingletonAndCustomScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton",
				"com.google.inject.CustomScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.ImplementedBySingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.ProvidedBySingleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.Implementation",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"ImplementedBySingleton"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.ImplementationProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public ProvidedBySingleton get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ProviderGetScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, final Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public T get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.ScopesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.ThrowingSingleton",
			"extends": "",
			"Methods": [
				{
					"signature": "ThrowingSingleton()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Should only be created by {@link SBarrierProvider}.\n   *\n   * \u003cp\u003e{@code S} stands for synchronization.\n   *\n   * @see SBarrierProvider\n   */",
			"name": "com.google.inject.ScopesTest.S",
			"extends": "",
			"Methods": [
				{
					"signature": "private S(int preventInjectionWithoutProvider)",
					"documentation": "/**\n   * Should only be created by {@link SBarrierProvider}.\n   *\n   * \u003cp\u003e{@code S} stands for synchronization.\n   *\n   * @see SBarrierProvider\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Provides all the instances of S simultaneously using {@link CyclicBarrier} with {@code\n   * nThreads}. Intended to be used for threads synchronization during injection.\n   */",
			"name": "com.google.inject.ScopesTest.SBarrierProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "SBarrierProvider(int nThreads)",
					"documentation": "/**\n   * Provides all the instances of S simultaneously using {@link CyclicBarrier} with {@code\n   * nThreads}. Intended to be used for threads synchronization during injection.\n   */"
				},
				{
					"signature": "@Override\n    public S get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.G",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.OptionalBindingTest"
			],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.RealG",
				"com.google.inject.ParentInjectorTest.F",
				"com.google.inject.ScopesTest.GImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.GImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    GImpl(S synchronizationBarrier, H h)",
					"documentation": "/** Relies on Guice implementation to inject S first and H later, which provides a barrier . */"
				}
			],
			"interfaces": [
				"com.google.inject.G"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.H",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.CircularDependencyTest.HImpl",
				"com.google.inject.ScopesTest.HImpl"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.HImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    HImpl(S synchronizationBarrier, G g) throws Exception",
					"documentation": "/** Relies on Guice implementation to inject S first and G later, which provides a barrier . */"
				}
			],
			"interfaces": [
				"com.google.inject.H"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.I0",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    I0(I1 i)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.I1",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    I1(S synchronizationBarrier, I2 i)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.I2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    I2(J1 j)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.J0",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    J0(J1 j)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.J1",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    J1(S synchronizationBarrier, J2 j)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.J2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    J2(K1 k)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.K0",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    K0(K1 k)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.K1",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    K1(S synchronizationBarrier, K2 k)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.K2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    K2(I1 i)",
					"documentation": "/** Relies on Guice implementation to inject S first, which provides a barrier . */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ScopesTest.SingletonClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Uses Scope's public API to add a 'marker' into the provisioned instance's scope. */",
			"name": "com.google.inject.ScopesTest.ScopeMutatingProvisionListener",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e void onProvision(final ProvisionInvocation\u003cT\u003e provisionInvocation)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvisionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.DefaultBindingScopingVisitor"
			],
			"usedBy": [
				"com.google.inject.ScopesTest"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.ScopesTest.ScopeMutatingProvisionListener.ScopeMarker"
			]
		},
		{
			"documentation": "/** Uses Scope's public API to add a 'marker' into the provisioned instance's scope. */",
			"name": "com.google.inject.ScopesTest.ScopeMutatingProvisionListener.ScopeMarker",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n            public ScopeMarker get()",
					"documentation": "/** Uses Scope's public API to add a 'marker' into the provisioned instance's scope. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.SerializationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAbstractModuleIsSerializable() throws IOException",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testCreationExceptionIsSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "private CreationException createCreationException()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts",
				"com.google.inject.SerializationTest.MyAbstractModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.SerializationTest.MyAbstractModule",
				"com.google.inject.SerializationTest.A",
				"com.google.inject.SerializationTest.B"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.SerializationTest.MyAbstractModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.SerializationTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SerializationTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SerializationTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SuiteUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "public static TestSuite removeSuppressedTests(TestSuite suite, Set\u003cString\u003e suppressedTestNames)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.SuperclassTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testSuperclassInjection() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.SuperclassTest.Super",
				"com.google.inject.SuperclassTest.Sub",
				"com.google.inject.SuperclassTest.Foo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.SuperclassTest.Super",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setC(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.SuperclassTest.Sub"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SuperclassTest.Sub",
			"extends": "com.google.inject.SuperclassTest.Super",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.SuperclassTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.TypeConversionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testOneConstantInjection() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testConstantInjection() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testConstantInjectionWithExplicitBindingsRequired() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "void checkNumbers(Number... ns)",
					"documentation": ""
				},
				{
					"signature": "public void testInvalidInteger() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInvalidCharacter() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInvalidEnum() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testToInstanceIsTreatedLikeConstant() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testCustomTypeConversion() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testInvalidCustomValue() throws CreationException",
					"documentation": ""
				},
				{
					"signature": "public void testNullCustomValue()",
					"documentation": ""
				},
				{
					"signature": "public void testCustomValueTypeMismatch()",
					"documentation": ""
				},
				{
					"signature": "public void testStringIsConvertedOnlyOnce()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "public void testAmbiguousTypeConversion()",
					"documentation": ""
				},
				{
					"signature": "TypeConverter mockTypeConverter(final Object result)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				},
				{
					"signature": "private static TypeConverter failingTypeConverter()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.spi.TypeConverter",
				"com.google.inject.Asserts",
				"com.google.inject.TypeConversionTest.OuterErrorModule",
				"com.google.inject.TypeConversionTest.InnerErrorModule",
				"com.google.inject.TypeConversionTest.InvalidCustomValueModule",
				"com.google.inject.TypeConversionTest.OuterModule",
				"com.google.inject.TypeConversionTest.InnerModule",
				"com.google.inject.ConverterNullModule",
				"com.google.inject.ConverterCustomModule",
				"com.google.inject.OuterAmbiguousModule",
				"com.google.inject.InnerAmbiguousModule",
				"com.google.inject.Ambiguous1Module",
				"com.google.inject.Ambiguous2Module"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.NumericValue",
				"com.google.inject.BooleanValue",
				"com.google.inject.EnumValue",
				"com.google.inject.ClassName",
				"com.google.inject.TypeConversionTest.Foo",
				"com.google.inject.Bar",
				"com.google.inject.TypeConversionTest.Simple",
				"com.google.inject.TypeConversionTest.OuterErrorModule",
				"com.google.inject.TypeConversionTest.InnerErrorModule",
				"com.google.inject.TypeConversionTest.InvalidInteger",
				"com.google.inject.TypeConversionTest.InvalidCharacter",
				"com.google.inject.TypeConversionTest.InvalidEnum",
				"com.google.inject.TypeConversionTest.LongHolder",
				"com.google.inject.TypeConversionTest.InvalidCustomValueModule",
				"com.google.inject.TypeConversionTest.OuterModule",
				"com.google.inject.TypeConversionTest.InnerModule",
				"com.google.inject.ConverterNullModule",
				"com.google.inject.ConverterCustomModule",
				"com.google.inject.OuterAmbiguousModule",
				"com.google.inject.InnerAmbiguousModule",
				"com.google.inject.Ambiguous1Module",
				"com.google.inject.Ambiguous2Module",
				"com.google.inject.TypeConversionTest.DateHolder"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.NumericValue",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BooleanValue",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.EnumValue",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ClassName",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.ReflectionTest.Bar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.Simple",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.OuterErrorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeConversionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InnerErrorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeConversionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InvalidInteger",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InvalidCharacter",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InvalidEnum",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.LongHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InvalidCustomValueModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeConversionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.OuterModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "OuterModule(Module converterModule)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeConversionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.InnerModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "InnerModule(Module converterModule)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeConversionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ConverterNullModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.ConverterCustomModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.OuterAmbiguousModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InnerAmbiguousModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Ambiguous1Module",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.Ambiguous2Module",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeConversionTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeConversionTest.DateHolder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.TypeListenerTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public \u003cI\u003e void hear(TypeLiteral\u003cI\u003e type, TypeEncounter\u003cI\u003e encounter)",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void afterInjection(Object injectee)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void injectMembers(Object instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeListenersAreFired()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cI\u003e void hear(TypeLiteral\u003cI\u003e type, TypeEncounter\u003cI\u003e encounter)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInstallingInjectionListener()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void afterInjection(Object injectee)",
					"documentation": ""
				},
				{
					"signature": "private static MethodInterceptor prefixInterceptor(final String prefix)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAddingInterceptors() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeListenerThrows()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectionListenerThrows()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectMembersTypeListenerFails()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testConstructedTypeListenerIsTheSameAsMembersInjectorListener()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void afterInjection(A injectee)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testLookupsAtInjectorCreateTime()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void afterInjection(Object injectee)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testLookupsPostCreate()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void injectMembers(D instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void afterInjection(D injectee)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMembersInjectorThrows()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypesWithNoInjectableMembersAreNotified()",
					"documentation": "/**\n   * We had a bug where we weren't notifying of types encountered for member injection when those\n   * types had no members to be injected. Constructed types are always injected because they always\n   * have at least one injection point: the class constructor.\n   */"
				},
				{
					"signature": "@Test\n  public void testEncounterCannotBeUsedAfterHearReturns()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAddErrors()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeDuplicateTypeListeners()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Names",
				"com.google.inject.spi.InjectionListener",
				"com.google.inject.spi.Message",
				"com.google.inject.spi.TypeListener",
				"com.google.inject.Asserts",
				"com.google.inject.OuterThrowsModule",
				"com.google.inject.InnerThrowsModule",
				"com.google.inject.TypeListenerTest.CountingMembersInjector",
				"com.google.inject.TypeListenerTest.CountingInjectionListener",
				"com.google.inject.TypeListenerTest.DuplicatingTypeListener",
				"com.google.inject.TypeListenerTest.A",
				"com.google.inject.TypeListenerTest.C",
				"com.google.inject.TypeListenerTest.D"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.OuterThrowsModule",
				"com.google.inject.InnerThrowsModule",
				"com.google.inject.TypeListenerTest.CountingMembersInjector",
				"com.google.inject.TypeListenerTest.CountingInjectionListener",
				"com.google.inject.TypeListenerTest.DuplicatingTypeListener",
				"com.google.inject.TypeListenerTest.A",
				"com.google.inject.TypeListenerTest.B",
				"com.google.inject.TypeListenerTest.C",
				"com.google.inject.TypeListenerTest.D"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.OuterThrowsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeListenerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.InnerThrowsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.TypeListenerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.CountingMembersInjector",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void injectMembers(D instance)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.MembersInjector"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.CountingInjectionListener",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void afterInjection(D injectee)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.InjectionListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.DuplicatingTypeListener",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    public \u003cI\u003e void hear(TypeLiteral\u003cI\u003e type, TypeEncounter\u003cI\u003e encounter)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.TypeListener"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "public String buzz()",
					"documentation": ""
				},
				{
					"signature": "public String beep()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeListenerTest.D",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void guiceInjected()",
					"documentation": ""
				},
				{
					"signature": "void assertAllCounts(int expected)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.TypeListenerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Demonstrates type reification.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.TypeLiteralInjectionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindingToRawTypeLiteralIsNotAllowed()",
					"documentation": "/**\n * Demonstrates type reification.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public void testBindingToParameterizedTypeLiteralIsNotAllowed()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectTypeLiteralWithRawTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectTypeLiteralWithClassTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectRawTypeLiteral()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.TypeLiteralInjectionTest.A",
				"com.google.inject.TypeLiteralInjectionTest.B",
				"com.google.inject.TypeLiteralInjectionTest.C"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralInjectionTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.DuplicateBindingsTest.RealA",
				"com.google.inject.TypeLiteralInjectionTest.B"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralInjectionTest.B",
			"extends": "com.google.inject.TypeLiteralInjectionTest.A",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralInjectionTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.TypeLiteralTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testWithParameterizedType()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testEquality()",
					"documentation": ""
				},
				{
					"signature": "public void testWithWildcardType() throws NoSuchFieldException, IOException",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testMissingTypeParameter()",
					"documentation": ""
				},
				{
					"signature": "public void testTypesInvolvingArraysForEquality()",
					"documentation": ""
				},
				{
					"signature": "public void testEqualityOfGenericArrayAndClassArray()",
					"documentation": ""
				},
				{
					"signature": "public void testEqualityOfMultidimensionalGenericArrayAndClassArray()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeLiteralsMustHaveRawTypes()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testDifferentiationBetweenWrappersAndPrimitives()",
					"documentation": "/**\n   * Unlike Key, TypeLiteral retains full type information and differentiates between {@code\n   * int.class} and {@code Integer.class}.\n   */"
				},
				{
					"signature": "public void testSerialization() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testTypeVariableWithNoBound()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeVariablesWithSingleBound()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeVariableWithMultipleBounds()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.TypeLiteralTest.HasTypeParameters"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTest.HasTypeParameters",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This test checks that TypeLiteral can perform type resolution on its members.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/**\n * This test checks that TypeLiteral can perform type resolution on its members.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public void testDirectInheritance() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testGenericSupertype()",
					"documentation": ""
				},
				{
					"signature": "public void testRecursiveTypeVariable()",
					"documentation": ""
				},
				{
					"signature": "public void testFields()",
					"documentation": ""
				},
				{
					"signature": "public void testGenericConstructor() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testThrowsExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testArrays()",
					"documentation": ""
				},
				{
					"signature": "public void testRelatedTypeVariables()",
					"documentation": ""
				},
				{
					"signature": "public void testCachingAndReindexing() throws NoSuchMethodException",
					"documentation": "/** Ensure the cache doesn't cache too much */"
				},
				{
					"signature": "public void testUnsupportedQueries() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testResolve()",
					"documentation": ""
				},
				{
					"signature": "public void testOnObject()",
					"documentation": ""
				},
				{
					"signature": "public void testGetSupertype()",
					"documentation": ""
				},
				{
					"signature": "public void testGetSupertypeForArraysAsList()",
					"documentation": ""
				},
				{
					"signature": "public void testWildcards() throws NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsAndHashCode() throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.Types",
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.MyComparable",
				"com.google.inject.TypeLiteralTypeResolutionTest.MyInteger",
				"com.google.inject.TypeLiteralTypeResolutionTest.HasGenericFields",
				"com.google.inject.TypeLiteralTypeResolutionTest.GenericConstructor",
				"com.google.inject.TypeLiteralTypeResolutionTest.Thrower",
				"com.google.inject.TypeLiteralTypeResolutionTest.HasArray",
				"com.google.inject.HasRelated",
				"com.google.inject.HasLists",
				"com.google.inject.StringIntegerMap",
				"com.google.inject.BetterMap",
				"com.google.inject.BestMap",
				"com.google.inject.TypeLiteralTypeResolutionTest.StringIntegerHashMap",
				"com.google.inject.TypeLiteralTypeResolutionTest.Parameterized"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.MyComparable",
			"extends": "Comparable",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.TypeLiteralTypeResolutionTest.MyInteger"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.MyInteger",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public int compareTo(MyInteger o)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.MyComparable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.HasGenericFields",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.GenericConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"UnusedDeclaration\")\n    public \u003cT\u003e GenericConstructor(S s, T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.Thrower",
			"extends": "",
			"Methods": [
				{
					"signature": "public Thrower() throws S",
					"documentation": ""
				},
				{
					"signature": "public void throwS() throws S",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.HasArray",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.HasRelated",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.HasLists",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.StringIntegerMap",
			"extends": "java.util.Map",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BetterMap",
			"extends": "java.util.Map",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.BestMap"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.BestMap",
			"extends": "com.google.inject.BetterMap",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.StringIntegerHashMap",
			"extends": "java.util.HashMap",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.TypeLiteralTypeResolutionTest.Parameterized",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void singleBindingAlreadySetError()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleBindingAlreadySetErrors()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void bindingAlreadySetErrorsWithModuleStack()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.BindingAlreadySetErrorTest.First",
				"com.google.inject.errors.BindingAlreadySetErrorTest.Second",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithProviderMethodModule",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithDslModule",
				"com.google.inject.errors.TestProvides",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithCustomScannerModule",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestProvidesScanner",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestModule1",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestModule2",
				"com.google.inject.errors.ErrorMessageTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.BindingAlreadySetErrorTest.First",
				"com.google.inject.errors.BindingAlreadySetErrorTest.Second",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithProviderMethodModule",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithDslModule",
				"com.google.inject.errors.TestProvides",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithCustomScannerModule",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestProvidesScanner",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestModule1",
				"com.google.inject.errors.BindingAlreadySetErrorTest.TestModule2"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.First",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.Second",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.BindWithProviderMethodModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    First provideFirstClass()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.BindWithDslModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.TestProvides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest",
				"com.google.inject.errors.BindingAlreadySetErrorTest.BindWithCustomScannerModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.BindWithCustomScannerModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n    Second second()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.errors.TestProvides"
			],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.TestProvidesScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.TestModule1",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BindingAlreadySetErrorTest.TestModule2",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule"
			],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childBindingAlreadySetError() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childBindingAlreadySetMultipleTimesError() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleChildBindingAlreadySetErrors() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childBindingAlreadySetByJustInTimeBinding() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.Foo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule2",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.DependsOnFoo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.Bar",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.BarModule",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule3",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule4",
				"com.google.inject.errors.ErrorMessageTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.Foo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule2",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.DependsOnFoo",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.Bar",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.BarModule",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule3",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule4"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo",
			"extends": "com.google.inject.errors.NullInjectedIntoNonNullableTest.Foo",
			"Methods": [
				{
					"signature": "@Inject\n    SubFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule2",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    Foo provideFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.DependsOnFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    DependsOnFoo(Foo foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Bar(Foo foo, DependsOnFoo dependsOnFoo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.BarModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule3",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ChildBindingAlreadySetErrorTest.ChildModule4",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateElementErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void duplicateElementError()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleDuplicatesElementError()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.ProvidesIntoSet",
				"com.google.inject.errors.DuplicateElementErrorTest.DuplicateElementModule",
				"com.google.inject.errors.Foo",
				"com.google.inject.errors.DuplicateElementErrorTest.IntWrapper",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.errors.ErrorMessageTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest.DuplicateElementModule",
				"com.google.inject.errors.Foo",
				"com.google.inject.errors.DuplicateElementErrorTest.IntWrapper",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateElementErrorTest.DuplicateElementModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@ProvidesIntoSet\n    String provideFirst()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoSet\n    String provideSecond()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.ProvidesIntoSet"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateElementErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule"
			],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateElementErrorTest.IntWrapper",
			"extends": "",
			"Methods": [
				{
					"signature": "IntWrapper(int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object other)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.DuplicateElementErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@ProvidesIntoSet\n    @Foo\n    IntWrapper provideFirstIntWrapper0()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoSet\n    @Foo\n    IntWrapper provideSecondIntWrapper0()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoSet\n    @Foo\n    IntWrapper provideFirstIntWrapper1()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoSet\n    @Foo\n    IntWrapper provideSecondIntWrapper1()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.ProvidesIntoSet",
				"com.google.inject.errors.Foo"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateElementErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void duplicateMapKeyError()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleDuplicateMapKeysError()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void duplicateMapKeysError_classKeyIsNotCompressed()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.multibindings.ClassMapKey",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.multibindings.ProvidesIntoMap",
				"com.google.inject.multibindings.StringMapKey",
				"com.google.inject.errors.First",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule",
				"com.google.inject.errors.ErrorMessageTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.First",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.Foo",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.First",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest.MapModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @First\n    String provideFirstString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.errors.First"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest.ContributorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@ProvidesIntoMap\n    @StringMapKey(\"first\")\n    String provideFirstIntoMap()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n    @StringMapKey(\"second\")\n    String provideSecondIntoMap()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.ProvidesIntoMap",
				"com.google.inject.multibindings.StringMapKey"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest.SecondContributorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n    @StringMapKey(\"second\")\n    String provideSecondIntoMap()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.multibindings.ProvidesIntoMap",
				"com.google.inject.multibindings.StringMapKey"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.DuplicateMapKeyErrorTest.ClassKeyMapBinderModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n    @ClassMapKey(Foo.class)\n    String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n    @ClassMapKey(Foo.class)\n    String provideFoo2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.ClassMapKey",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.multibindings.ProvidesIntoMap"
			],
			"usedBy": [
				"com.google.inject.errors.DuplicateMapKeyErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ErrorMessageTestUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "private ErrorMessageTestUtils()",
					"documentation": ""
				},
				{
					"signature": "static void assertGuiceErrorEqualsIgnoreLineNumber(String actual, String expectedFileName)",
					"documentation": "/**\n   * Compare expected error message with the actual error message.\n   *\n   * \u003cp\u003eDifferences in line number are ignored. This make it so that unrelated changes like adding\n   * or removing an import would not break the test because the line numbers would change.\n   */"
				},
				{
					"signature": "private static void assertErrorMessage(String actual, String expected)",
					"documentation": ""
				},
				{
					"signature": "private static String getExpectedError(String fileName) throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.BindingAlreadySetErrorTest",
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateMapKeyErrorTest",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.GenericErrorTest",
				"com.google.inject.errors.MissingConstructorErrorTest",
				"com.google.inject.errors.MissingImplementationErrorTest",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest",
				"com.google.inject.errors.ScopeNotFoundErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ErrorMessagesTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void classNamesAreCompressedInErrorMessage() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.Foo",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.ErrorMessagesTest.Foo",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.ErrorMessagesTest.OuterClass",
				"com.google.inject.errors.UserId",
				"com.google.inject.errors.ErrorMessagesTest.Foo",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ErrorMessagesTest.OuterClass",
			"extends": "",
			"Methods": [
				{
					"signature": "private OuterClass()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.errors.UserId",
				"com.google.inject.errors.Foo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.UserId",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule"
			],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.UserId",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ErrorMessagesTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.ErrorMessagesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    static Foo provideFoo(@UserId String unused)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    static OuterClass.Foo providerAnotherFoo(@OuterClass.UserId Long unused)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.errors.Foo"
			],
			"usedBy": [
				"com.google.inject.errors.ErrorMessagesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.GenericErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void customError()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void errorInCustomProvider()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void errorInjectingConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.GenericErrorTest.ErrorModule",
				"com.google.inject.errors.GenericErrorTest.BadConstructor",
				"com.google.inject.errors.GenericErrorTest.ProvisionErrorModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.GenericErrorTest.ErrorModule",
				"com.google.inject.errors.GenericErrorTest.BadConstructor",
				"com.google.inject.errors.GenericErrorTest.ProvisionErrorModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.GenericErrorTest.ErrorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.GenericErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.GenericErrorTest.BadConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "BadConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.GenericErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.GenericErrorTest.ProvisionErrorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    String provideString()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    Object provideObject(BadConstructor bad)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.GenericErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingConstructorErrors() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingConstructorErrors_atInjectRequired() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingConstructorErrors_merged() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithAtInject",
				"com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithoutAtInject",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingNoArgConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingAtInjectConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.PrivateConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.PrivateClassWithPrivateConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorModule",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorAtInjectRequiredModule",
				"com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructorModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithAtInject",
				"com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithoutAtInject",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingNoArgConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingAtInjectConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.PrivateConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.PrivateClassWithPrivateConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorModule",
				"com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorAtInjectRequiredModule",
				"com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructor",
				"com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructorModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithAtInject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    NoArgConstructorWithAtInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.NoArgConstructorWithoutAtInject",
			"extends": "",
			"Methods": [
				{
					"signature": "NoArgConstructorWithoutAtInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.MissingNoArgConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "MissingNoArgConstructor(int param)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.MissingAtInjectConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "MissingAtInjectConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.PrivateConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "private PrivateConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.PrivateClassWithPrivateConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "private PrivateClassWithPrivateConstructor()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    static Object provideObject(\n        NoArgConstructorWithAtInject noArgConstructorWithAtInject,\n        NoArgConstructorWithoutAtInject noArgConstructorWithoutAtInject,\n        MissingNoArgConstructor missingNoArgConstructor,\n        PrivateConstructor privateConstructor,\n        PrivateClassWithPrivateConstructor privateClassWithPrivateConstructor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.MissingConstructorAtInjectRequiredModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    static Object provideObject(\n        NoArgConstructorWithAtInject noArgConstructorWithAtInject,\n        NoArgConstructorWithoutAtInject noArgConstructorWithoutAtInject,\n        PrivateConstructor privateConstructor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    DependsOnMissingNoArgConstructor(MissingNoArgConstructor noArgConstructor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingConstructorErrorTest.DependsOnMissingNoArgConstructorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    String provideString(PrivateConstructor privateConstructor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.errors.MissingConstructorErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingImplementationErrors() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingImplementationWithModuleStack() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void missingImplementationWithHints() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingConstructor",
				"com.google.inject.errors.MissingImplementationErrorTest.RequestHandler",
				"com.google.inject.errors.MissingImplementationErrorTest.Server",
				"com.google.inject.errors.MissingImplementationErrorTest.DependsOnMissingBindings",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule1",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule2",
				"com.google.inject.errors.A",
				"com.google.inject.errors.MissingImplementationErrorTest.Klass",
				"com.google.inject.errors.MissingImplementationErrorTest.Klass2",
				"com.google.inject.errors.MissingImplementationErrorTest.HintsModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.Foo",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingConstructor",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingField",
				"com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingMethod",
				"com.google.inject.errors.Dao",
				"com.google.inject.errors.MissingImplementationErrorTest.RequestHandler",
				"com.google.inject.errors.MissingImplementationErrorTest.Server",
				"com.google.inject.errors.MissingImplementationErrorTest.DependsOnMissingBindings",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule1",
				"com.google.inject.errors.MissingImplementationErrorTest.TestModule2",
				"com.google.inject.errors.A",
				"com.google.inject.errors.B",
				"com.google.inject.errors.MissingImplementationErrorTest.Klass",
				"com.google.inject.errors.MissingImplementationErrorTest.Klass2",
				"com.google.inject.errors.MissingImplementationErrorTest.HintsModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.DuplicateElementErrorTest",
				"com.google.inject.errors.DuplicateElementErrorTest.MultipleDuplicateElementsModule",
				"com.google.inject.errors.ErrorMessagesTest",
				"com.google.inject.errors.ErrorMessagesTest.MissingBindingsModule"
			],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RequiresFooUsingConstructor(@Foo String ctorParam)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingField",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.RequiresFooUsingMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public void setMyString(@Foo String myString)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.Dao",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.RequestHandler",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    RequestHandler(Dao dao)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.Server",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Server(Provider\u003cRequestHandler\u003e handler)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.DependsOnMissingBindings",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    DependsOnMissingBindings(\n        RequiresFooUsingConstructor ctorInjection,\n        RequiresFooUsingField fieldInjection,\n        RequiresFooUsingMethod methodInjection,\n        Server server)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.TestModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.TestModule1",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.TestModule2",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.MissingImplementationErrorTest",
				"com.google.inject.errors.MissingImplementationErrorTest.HintsModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.Klass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.Klass2",
			"extends": "",
			"Methods": [
				{
					"signature": "Klass2(int i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.MissingImplementationErrorTest.HintsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @A\n    Klass provideKlass()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    String provideString(@B Klass missing)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @A\n    String provideAString(@A Klass2 klass2)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.errors.A"
			],
			"usedBy": [
				"com.google.inject.errors.MissingImplementationErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.NullInjectedIntoNonNullableTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void ensureStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void nullReturnedFromProvidesMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void nullReturnedFromProvider()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void nullReturnedFromProviderWithModuleStack()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.Bar",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.Foo",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProvidesMethodModule",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProviderModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.Bar",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.Foo",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProvidesMethodModule",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProviderModule",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.IntermediateModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.NullInjectedIntoNonNullableTest",
				"com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProvidesMethodModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.NullInjectedIntoNonNullableTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Foo(@Bar String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.errors.ChildBindingAlreadySetErrorTest.SubFoo"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.NullInjectedIntoNonNullableTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProvidesMethodModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Bar\n    String provideString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.errors.Bar"
			],
			"usedBy": [
				"com.google.inject.errors.NullInjectedIntoNonNullableTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.NullInjectedIntoNonNullableTest.FromProviderModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.errors.NullInjectedIntoNonNullableTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.NullInjectedIntoNonNullableTest.IntermediateModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ScopeNotFoundErrorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void checkStackTraceIsIncluded()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scopeNotFoundError()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.errors.ErrorMessageTestUtils",
				"com.google.inject.errors.RequestScoped",
				"com.google.inject.errors.ScopeNotFoundErrorTest.ErrorModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.errors.BatchScoped",
				"com.google.inject.errors.RequestScoped",
				"com.google.inject.errors.ScopeNotFoundErrorTest.RequestHelper",
				"com.google.inject.errors.ScopeNotFoundErrorTest.BatchHelper",
				"com.google.inject.errors.ScopeNotFoundErrorTest.ErrorModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.BatchScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.RequestScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.errors.ScopeNotFoundErrorTest",
				"com.google.inject.errors.ScopeNotFoundErrorTest.RequestHelper",
				"com.google.inject.errors.ScopeNotFoundErrorTest.ErrorModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ScopeNotFoundErrorTest.RequestHelper",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.errors.RequestScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ScopeNotFoundErrorTest.BatchHelper",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.errors.ScopeNotFoundErrorTest.ErrorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @RequestScoped\n    String provideString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.errors.RequestScoped"
			],
			"usedBy": [
				"com.google.inject.errors.ScopeNotFoundErrorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection",
			"extends": "",
			"Methods": [
				{
					"signature": "public void testClient()",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.example.ClientServiceWithDependencyInjection.ServiceImpl",
				"com.google.inject.example.ClientServiceWithDependencyInjection.ServiceFactory",
				"com.google.inject.example.ClientServiceWithDependencyInjection.Client",
				"com.google.inject.example.ClientServiceWithDependencyInjection.ClientFactory",
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.example.Service",
				"com.google.inject.example.ClientServiceWithDependencyInjection.ServiceImpl",
				"com.google.inject.example.ClientServiceWithDependencyInjection.ServiceFactory",
				"com.google.inject.example.ClientServiceWithDependencyInjection.Client",
				"com.google.inject.example.ClientServiceWithDependencyInjection.ClientFactory",
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.Service",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService",
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.MockService",
				"com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuice.MockService",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection.ServiceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"ClientServiceWithDependencyInjection.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection.ServiceFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServiceFactory()",
					"documentation": ""
				},
				{
					"signature": "public static Service getInstance()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection.Client",
			"extends": "",
			"Methods": [
				{
					"signature": "public Client(Service service)",
					"documentation": ""
				},
				{
					"signature": "public void go()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection.ClientFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "private ClientFactory()",
					"documentation": ""
				},
				{
					"signature": "public static Client getInstance()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithDependencyInjection.MockService",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				},
				{
					"signature": "public boolean isGone()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.ClientServiceWithFactories",
			"extends": "",
			"Methods": [
				{
					"signature": "public void testClient()",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.ServiceFactory",
				"com.google.inject.example.ClientServiceWithFactories.Client",
				"com.google.inject.example.ClientServiceWithFactories.MockService"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.example.Service",
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.ServiceFactory",
				"com.google.inject.example.ClientServiceWithFactories.Client",
				"com.google.inject.example.ClientServiceWithFactories.MockService"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.Service",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService",
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.MockService",
				"com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuice.MockService",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithFactories"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithFactories.ServiceFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServiceFactory()",
					"documentation": ""
				},
				{
					"signature": "public static Service getInstance()",
					"documentation": ""
				},
				{
					"signature": "public static void setInstance(Service service)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithFactories"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithFactories.Client",
			"extends": "",
			"Methods": [
				{
					"signature": "public void go()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithFactories"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithFactories.MockService",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				},
				{
					"signature": "public boolean isGone()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithFactories"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.ClientServiceWithGuice",
			"extends": "",
			"Methods": [
				{
					"signature": "public void testClient()",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args) throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.example.ClientServiceWithGuice.MyModule",
				"com.google.inject.example.ClientServiceWithGuice.Client",
				"com.google.inject.example.ClientServiceWithGuice.MockService"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.example.Service",
				"com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuice.MyModule",
				"com.google.inject.example.ClientServiceWithGuice.Client",
				"com.google.inject.example.ClientServiceWithGuice.MockService"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.Service",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService",
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.MockService",
				"com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuice.MockService",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuice.MyModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuice"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuice.Client",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Client(Service service)",
					"documentation": ""
				},
				{
					"signature": "public void go()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuice"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuice.MockService",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				},
				{
					"signature": "public boolean isGone()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuice"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.ClientServiceWithGuiceDefaults",
			"extends": "",
			"Methods": [
				{
					"signature": "public void testClient()",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args) throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.ImplementedBy",
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.Client",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.example.Service",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.Client",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.example.Service",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.example.ClientServiceWithDependencyInjection.MockService",
				"com.google.inject.example.ClientServiceWithFactories.ServiceImpl",
				"com.google.inject.example.ClientServiceWithFactories.MockService",
				"com.google.inject.example.ClientServiceWithGuice.ServiceImpl",
				"com.google.inject.example.ClientServiceWithGuice.MockService",
				"com.google.inject.example.ClientServiceWithGuiceDefaults.MockService"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuiceDefaults.ServiceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				}
			],
			"interfaces": [
				"ClientServiceWithGuiceDefaults.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuiceDefaults.Client",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Client(Service service)",
					"documentation": ""
				},
				{
					"signature": "public void go()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuiceDefaults"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.ClientServiceWithGuiceDefaults.MockService",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void go()",
					"documentation": ""
				},
				{
					"signature": "public boolean isGone()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.example.ClientServiceWithGuiceDefaults"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.JndiProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "JndiProvider(Class\u003cT\u003e type, String name)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get()",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e Provider\u003cT\u003e fromJndi(Class\u003cT\u003e type, String name)",
					"documentation": "/** Creates a JNDI provider for the given type and name. */"
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.example.JndiProviderClient",
			"extends": "",
			"Methods": [
				{
					"signature": "public static void main(String[] args) throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Collector",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n  public Object visit(MapBinderBinding\u003c? extends Object\u003e mapbinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visit(MultibinderBinding\u003c? extends Object\u003e multibinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object visit(OptionalBinderBinding\u003c? extends Object\u003e optionalbinding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.multibindings.MultibindingsTargetVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.CycleDetectingLockTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testSingletonThreadsRuntimeCircularDependency() throws Exception",
					"documentation": "/**\n   * Verifies that graph of threads' dependencies is not static and is calculated in runtime using\n   * information about specific locks.\n   *\n   * \u003cpre\u003e\n   *   T1: Waits on S1\n   *   T2: Locks B, sends S1, waits on S2\n   *   T1: Locks A, start locking B, sends S2, waits on S3\n   *   T2: Unlocks B, start locking A, sends S3, finishes locking A, unlocks A\n   *   T1: Finishes locking B, unlocks B, unlocks A\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003eThis should succeed, even though T1 was locked on T2 and T2 is locked on T1 when T2 locks A.\n   * Incorrect implementation detects a cycle waiting on S3.\n   */"
				},
				{
					"signature": "public void testCycleDetectingLockFactoriesDoNotDeadlock() throws Exception",
					"documentation": "/**\n   * Verifies that factories do not deadlock each other.\n   *\n   * \u003cpre\u003e\n   *   Thread A: lock a lock A (factory A)\n   *   Thread B: lock a lock B (factory B)\n   *   Thread A: lock a lock B (factory B)\n   *   Thread B: lock a lock A (factory A)\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003eThis should succeed even though from the point of view of each individual factory there are\n   * no deadlocks to detect.\n   */"
				},
				{
					"signature": "public void testCycleReporting() throws Exception",
					"documentation": "/**\n   * Verifies that factories deadlocks report the correct cycles.\n   *\n   * \u003cpre\u003e\n   *   Thread 1: takes locks a, b\n   *   Thread 2: takes locks b, c\n   *   Thread 3: takes locks c, a\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003eIn order to ensure a deadlock, each thread will wait on a barrier right after grabbing the\n   * first lock.\n   */"
				},
				{
					"signature": "private static \u003cT\u003e Future\u003cListMultimap\u003cThread, T\u003e\u003e grabLocksInThread(\n      final CycleDetectingLock\u003cT\u003e lock1,\n      final CycleDetectingLock\u003cT\u003e lock2,\n      final CyclicBarrier barrier)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.InternalProvisionExceptionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testSourceFormatting()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author dpb@google.com (David P. Baker) */",
			"name": "com.google.inject.internal.MapBinderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "private Type javaxProviderOf(Type type)",
					"documentation": ""
				},
				{
					"signature": "private Type mapEntryOf(Type keyType, Type valueType)",
					"documentation": ""
				},
				{
					"signature": "private Type collectionOf(Type type)",
					"documentation": ""
				},
				{
					"signature": "public void testAllBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderAggregatesMultipleModules()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderAggregationForAnnotationInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderAggregationForAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderWithMultipleAnnotationValueSets()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderWithMultipleAnnotationTypeSets()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderWithMultipleTypes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderWithEmptyMap()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapIsUnmodifiable()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapIsLazy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapForbidsDuplicateKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testExhaustiveDuplicateErrorMessage() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapPermitDuplicateElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapDoesNotDedupeDuplicateValues()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMultimap()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMultimapWithAnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMultimapIsUnmodifiable()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapForbidsNullKeys()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderMapForbidsNullValues()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderProviderIsScoped()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testSourceLinesInMapBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderDependencies()",
					"documentation": "/** Check that the dependencies are correct. */"
				},
				{
					"signature": "private Set\u003cString\u003e recurseForDependencies(Injector injector, HasDependencies hasDependencies)",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderDependenciesInToolStage()",
					"documentation": "/** Check that the dependencies are correct in the Tool Stage. */"
				},
				{
					"signature": "public void testBindOrderEqualsIterationOrder()",
					"documentation": "/** Our implementation maintains order, but doesn't guarantee it in the API spec. */"
				},
				{
					"signature": "public void testModuleOverrideAndMapBindings()",
					"documentation": "/** With overrides, we should get the union of all map bindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** With overrides, we should get the union of all map bindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDeduplicateMapBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideAndMapBindingsWithPermitDuplicates()",
					"documentation": "/** With overrides, we should get the union of all map bindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** With overrides, we should get the union of all map bindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testBasicMapDependencyInjection()",
					"documentation": "/** Ensure there are no initialization race conditions in basic map injection. */"
				},
				{
					"signature": "@Inject\n          void initialize(Map\u003cString, String\u003e map)",
					"documentation": "/** Ensure there are no initialization race conditions in basic map injection. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMultimapDependencyInjection()",
					"documentation": "/** Ensure there are no initialization race conditions in provider multimap injection. */"
				},
				{
					"signature": "@Inject\n          void initialize(Map\u003cString, Set\u003cProvider\u003cString\u003e\u003e\u003e multimap)",
					"documentation": "/** Ensure there are no initialization race conditions in provider multimap injection. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private \u003cK, V\u003e Map\u003cK, V\u003e mapOf(Object... elements)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private \u003cV\u003e Set\u003cV\u003e setOf(V... elements)",
					"documentation": ""
				},
				{
					"signature": "@Marker\n  public void testMapBinderMatching() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTwoMapBindersAreDistinct()",
					"documentation": ""
				},
				{
					"signature": "public void testWeakKeySet_integration_mapbinder()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  public void testGetEntries()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  public void testGetEntriesWithDuplicateKeys()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  public void testGetEntriesWithDuplicateValues()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  public void testGetEntriesMissingProviderMapEntry()",
					"documentation": ""
				},
				{
					"signature": "private static com.google.inject.spi.Element getProviderMapEntry(\n      Object kToFind, Iterable\u003ccom.google.inject.spi.Element\u003e elements)",
					"documentation": "/**\n   * Will find and return the {@link com.google.inject.spi.Element} that is a {@link\n   * ProviderMapEntry} with a key that matches the one supplied by the user in {@code k}.\n   *\n   * \u003cp\u003eWill return {@code null} if it cannot be found.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  public void testGetEntriesMissingBindingForValue()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderWildcardsAlias()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderConflictsWithExistingWildcard()",
					"documentation": "/**\n   * Injection of {@code Map\u003cK, ? extends V\u003e} wasn't added until 2020-07. It's possible that\n   * applications already have a binding to that type. If they do, confirm that Guice fails fast\n   * with a duplicate binding error.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * Injection of {@code Map\u003cK, ? extends V\u003e} wasn't added until 2020-07. It's possible that\n   * applications already have a binding to that type. If they do, confirm that Guice fails fast\n   * with a duplicate binding error.\n   */"
				},
				{
					"signature": "@Provides\n          protected Map\u003cInteger, ? extends String\u003e provideMap()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBinderConflictsWithExistingMapBinder()",
					"documentation": "/**\n   * This is the same as the previous test, but it gets at the conflicting set through a MapBinder\n   * rather than through a regular binding. It's unlikely that application developers would do this\n   * in practice, but if they do we want to make sure it is detected and fails fast.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * This is the same as the previous test, but it gets at the conflicting set through a MapBinder\n   * rather than through a regular binding. It's unlikely that application developers would do this\n   * in practice, but if they do we want to make sure it is detected and fails fast.\n   */"
				},
				{
					"signature": "private static com.google.inject.spi.Element getInstanceBindingForValue(\n      Object vToFind, Iterable\u003ccom.google.inject.spi.Element\u003e elements)",
					"documentation": "/**\n   * Will find and return the {@link com.google.inject.spi.Element} that is an {@link\n   * InstanceBinding} and binds {@code vToFind}.\n   */"
				},
				{
					"signature": "private static MapBinderBinding\u003c?\u003e getMapBinderBinding(\n      Iterable\u003ccom.google.inject.spi.Element\u003e elements)",
					"documentation": "/**\n   * Given an {@link Iterable} of elements, return the one that is a {@link MapBinderBinding}, or\n   * {@code null} if it cannot be found.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Provider",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Modules",
				"com.google.inject.util.Types",
				"com.google.inject.Asserts",
				"com.google.inject.internal.Module1",
				"com.google.inject.internal.Module2",
				"com.google.inject.internal.Module3",
				"com.google.inject.internal.Main",
				"com.google.inject.internal.MapBinderTest.MapBinderWithTwoEntriesModule",
				"com.google.inject.internal.SpiUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.Module1",
				"com.google.inject.internal.Module2",
				"com.google.inject.internal.Module3",
				"com.google.inject.internal.Main",
				"com.google.inject.internal.ValueType",
				"com.google.inject.internal.Abc",
				"com.google.inject.internal.De",
				"com.google.inject.internal.MapBinderTest.Marker",
				"com.google.inject.internal.MapBinderTest.MapBinderWithTwoEntriesModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Module1",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Module2",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Module3",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Main",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n      String provideString()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n      Integer provideInt()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ValueType",
			"extends": "",
			"Methods": [
				{
					"signature": "private ValueType(int keyPart, int dataPart)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Abc",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.De",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MapBinderTest.Marker",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** A simple module with a MapBinder with two entries. */",
			"name": "com.google.inject.internal.MapBinderTest.MapBinderWithTwoEntriesModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": "/** A simple module with a MapBinder with two entries. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [
				"com.google.inject.internal.MapBinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MessagesTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void customErrorMessage()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void provisionExceptionWithCustomErrorMessageIsSerializable()",
					"documentation": ""
				},
				{
					"signature": "private static Message exampleError(String message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ProvisionException",
				"com.google.inject.spi.Message",
				"com.google.inject.internal.MessagesTest.ExampleErrorDetail"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.MessagesTest.ExampleErrorDetail"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MessagesTest.ExampleErrorDetail",
			"extends": "com.google.inject.spi.ErrorDetail",
			"Methods": [
				{
					"signature": "ExampleErrorDetail(String message)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void formatDetail(List\u003cErrorDetail\u003c?\u003e\u003e mergeableErrors, Formatter formatter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean isMergeable(ErrorDetail\u003c?\u003e otherError)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ExampleErrorDetail withSources(List\u003cObject\u003e unused)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.MessagesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author schmitt@google.com (Peter Schmitt) */",
			"name": "com.google.inject.internal.MoreTypesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testParameterizedTypeToString()",
					"documentation": "/** @author schmitt@google.com (Peter Schmitt) */"
				},
				{
					"signature": "public void testParameterizedType_lessArgs()",
					"documentation": ""
				},
				{
					"signature": "public void testParameterizedType_correctArgs()",
					"documentation": ""
				},
				{
					"signature": "public void testParameterizedType_moreArgs()",
					"documentation": ""
				},
				{
					"signature": "public \u003cT\u003e void testEquals_typeVariable() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public \u003cT\u003e void testGetRawType_wildcard() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.MoreTypes.ParameterizedTypeImpl",
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.MoreTypesTest.Inner",
				"com.google.inject.internal.MoreTypesTest.D",
				"com.google.inject.internal.MoreTypesTest.E"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MoreTypesTest.Inner",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MoreTypesTest.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.internal.MoreTypesTest.E"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MoreTypesTest.E",
			"extends": "com.google.inject.internal.MoreTypesTest.D",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.MultibinderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testMultibinderAggregatesMultipleModules()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderAggregationForAnnotationInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderAggregationForAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderWithMultipleAnnotationValueSets()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderWithMultipleAnnotationTypeSets()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderWithMultipleSetTypes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderWithEmptySet()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetIsUnmodifiable()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetIsSerializable() throws IOException, ClassNotFoundException",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetIsLazy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetForbidsDuplicateElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetShowsBothElementsIfToStringDifferent()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetPermitDuplicateElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetPermitDuplicateElementsFromOtherModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetPermitDuplicateCallsToPermitDuplicates()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderSetForbidsNullElements()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testSourceLinesInMultibindings()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderDependencies()",
					"documentation": "/**\n   * We just want to make sure that multibinder's binding depends on each of its values. We don't\n   * really care about the underlying structure of those bindings, which are implementation details.\n   */"
				},
				{
					"signature": "public void testMultibinderDependenciesInToolStage()",
					"documentation": "/**\n   * We just want to make sure that multibinder's binding depends on each of its values. We don't\n   * really care about the underlying structure of those bindings, which are implementation details.\n   */"
				},
				{
					"signature": "public void testBindOrderEqualsIterationOrder()",
					"documentation": "/**\n   * Our implementation maintains order, but doesn't guarantee it in the API spec. TODO: specify the\n   * iteration order?\n   */"
				},
				{
					"signature": "private \u003cT\u003e Set\u003cT\u003e setOf(T... elements)",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideAndMultibindings()",
					"documentation": "/** With overrides, we should get the union of all multibindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** With overrides, we should get the union of all multibindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideAndMultibindingsWithPermitDuplicates()",
					"documentation": "/** With overrides, we should get the union of all multibindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** With overrides, we should get the union of all multibindings. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstallsAndMultibindings_toInstance()",
					"documentation": "/** Doubly-installed modules should not conflict, even when one is overridden. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Doubly-installed modules should not conflict, even when one is overridden. */"
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstallsAndMultibindings_toKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstallsAndMultibindings_toProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstallsAndMultibindings_toProviderKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstallsAndMultibindings_toConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateUnscopedBindings()",
					"documentation": "/**\n   * Unscoped bindings should not conflict, whether they were bound with no explicit scope, or\n   * explicitly bound in {@link Scopes#NO_SCOPE}.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * Unscoped bindings should not conflict, whether they were bound with no explicit scope, or\n   * explicitly bound in {@link Scopes#NO_SCOPE}.\n   */"
				},
				{
					"signature": "@Provides\n          @Named(\"A\")\n          int provideInteger()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testKeyHashCodesFixedAtInjectionTime()",
					"documentation": "/** Ensure key hash codes are fixed at injection time, not binding time. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Ensure key hash codes are fixed at injection time, not binding time. */"
				},
				{
					"signature": "public void testBindingKeysFixedOnReturnFromGetElements()",
					"documentation": "/** Ensure bindings do not rehash their keys once returned from {@link Elements#getElements}. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Ensure bindings do not rehash their keys once returned from {@link Elements#getElements}. */"
				},
				{
					"signature": "public void testConcurrentMutation_bindingsDiffentAtInjectorCreation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testConcurrentMutation_bindingsSameAtInjectorCreation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Marker\n  public void testMultibinderMatching() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testSetAndMapValueAreDistinct()",
					"documentation": ""
				},
				{
					"signature": "public void testSetAndMapValueAreDistinctInSpi()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderCanInjectCollectionOfProviders()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderCanInjectCollectionOfProvidersWithAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibindingProviderDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testEmptyMultibinder()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderDependsOnInstanceBindingWithInjectionPoints()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderWithWildcard()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderConflictsWithExistingWildcard()",
					"documentation": "/**\n   * Injection of {@code Set\u003c? extends T\u003e} wasn't added until 2020-07. It's possible that\n   * applications already have a binding to that type. If they do, confirm that Guice fails fast\n   * with a duplicate binding error.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * Injection of {@code Set\u003c? extends T\u003e} wasn't added until 2020-07. It's possible that\n   * applications already have a binding to that type. If they do, confirm that Guice fails fast\n   * with a duplicate binding error.\n   */"
				},
				{
					"signature": "@Provides\n          public Set\u003c? extends String\u003e provideStrings()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibinderConflictsWithExistingMultibinder()",
					"documentation": "/**\n   * This is the same as the previous test, but it gets at the conflicting set through a multibinder\n   * rather than through a regular binding. It's unlikely that application developers would do this\n   * in practice, but if they do we want to make sure it is detected and fails fast.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * This is the same as the previous test, but it gets at the conflicting set through a multibinder\n   * rather than through a regular binding. It's unlikely that application developers would do this\n   * in practice, but if they do we want to make sure it is detected and fails fast.\n   */"
				},
				{
					"signature": "private \u003cT\u003e Collection\u003cT\u003e collectValues(\n      Collection\u003c? extends javax.inject.Provider\u003cT\u003e\u003e providers)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Provider",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.OptionalBinder",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Dependency",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Modules",
				"com.google.inject.Asserts",
				"com.google.inject.internal.MultibinderTest.StringGrabber",
				"com.google.inject.internal.SpiUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.ValueType",
				"com.google.inject.internal.Abc",
				"com.google.inject.internal.De",
				"com.google.inject.internal.MultibinderTest.AStringProvider",
				"com.google.inject.internal.MultibinderTest.BStringProvider",
				"com.google.inject.internal.MultibinderTest.StringGrabber",
				"com.google.inject.internal.MultibinderTest.Marker",
				"com.google.inject.internal.MultibinderTest.ObjectWithInjectionPoint"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ValueType",
			"extends": "",
			"Methods": [
				{
					"signature": "ValueType(int a, int b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Abc",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.De",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MultibinderTest.AStringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MultibinderTest.BStringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MultibinderTest.StringGrabber",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\") \n    public StringGrabber(@Named(\"A_string\") String string)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\") \n    public StringGrabber(@Named(\"B_string\") String string, int unused)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "static Set\u003cString\u003e values(Iterable\u003cStringGrabber\u003e grabbers)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.MultibinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MultibinderTest.Marker",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.MultibinderTest.ObjectWithInjectionPoint",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setter(String dummy)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author sameb@google.com (Sam Berlin) */",
			"name": "com.google.inject.internal.OptionalBinderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testTypeNotBoundByDefault()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedTypeSameAsBaseType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedAndBaseTypeHaveDifferentAnnotations()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"moo\")\n          MyClass provideString()",
					"documentation": ""
				},
				{
					"signature": "public void testOptionalIsAbsentByDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testUsesUserBoundValue() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          String provideString()",
					"documentation": ""
				},
				{
					"signature": "public void testUsesUserBoundValueNullProvidersMakeAbsent() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          String provideString()",
					"documentation": ""
				},
				{
					"signature": "public void testOptionalBinderDependsOnJitBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public \u003cT\u003e Key\u003cOptional\u003cT\u003e\u003e optionalKey(Class\u003cT\u003e type)",
					"documentation": ""
				},
				{
					"signature": "public void testSetDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testSetBinding() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testSetBindingOverridesDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testSpreadAcrossModules() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testExactSameBindingCollapses_defaults() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testExactSameBindingCollapses_actual() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDifferentBindingsFail_defaults()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDifferentBindingsFail_actual()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDifferentBindingsFail_both()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testQualifiedAggregatesTogether() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleDifferentOptionals()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOptionalIsAppropriatelyLazy() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"foo\")\n          int provideInt()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedToNullProvidersMakeAbsentValuesAndPresentProviders_default()\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedToNullProvidersMakeAbsentValuesAndPresentProviders_actual()\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedToNullActualDoesntFallbackToDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testSourceLinesInException()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_both()",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_actual()",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_default()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\")\n  private Set\u003cString\u003e recurseForDependencies(Injector injector, HasDependencies hasDependencies)",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstalls_toInstance()",
					"documentation": "/** Doubly-installed modules should not conflict, even when one is overridden. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Doubly-installed modules should not conflict, even when one is overridden. */"
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstalls_toKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstalls_toProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstalls_toProviderKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleOverrideRepeatedInstalls_toConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateUnscopedBindings()",
					"documentation": "/**\n   * Unscoped bindings should not conflict, whether they were bound with no explicit scope, or\n   * explicitly bound in {@link Scopes#NO_SCOPE}.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * Unscoped bindings should not conflict, whether they were bound with no explicit scope, or\n   * explicitly bound in {@link Scopes#NO_SCOPE}.\n   */"
				},
				{
					"signature": "@Provides\n          @Named(\"foo\")\n          int provideInt()",
					"documentation": ""
				},
				{
					"signature": "public void testKeyHashCodesFixedAtInjectionTime()",
					"documentation": "/** Ensure key hash codes are fixed at injection time, not binding time. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Ensure key hash codes are fixed at injection time, not binding time. */"
				},
				{
					"signature": "public void testBindingKeysFixedOnReturnFromGetElements()",
					"documentation": "/** Ensure bindings do not rehash their keys once returned from {@link Elements#getElements}. */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** Ensure bindings do not rehash their keys once returned from {@link Elements#getElements}. */"
				},
				{
					"signature": "@Marker\n  public void testMatchingMarkerAnnotations() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testWeakKeySet_integration()",
					"documentation": ""
				},
				{
					"signature": "public void testCompareEqualsAgainstOtherAnnotation()",
					"documentation": ""
				},
				{
					"signature": "private static String getShortName(Module module)",
					"documentation": "/**\n   * Returns the short name for a module instance. Used to get the name of the anoymous class that\n   * can change depending on the order the module intance is created.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private \u003cV\u003e Set\u003cV\u003e setOf(V... elements)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.OptionalBinder",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.util.Modules",
				"com.google.inject.util.Providers",
				"com.google.inject.Asserts",
				"com.google.inject.internal.OptionalBinderTest.DependsOnJitBinding",
				"com.google.inject.internal.SpiUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.OptionalBinderTest.JitBinding",
				"com.google.inject.internal.OptionalBinderTest.DependsOnJitBinding",
				"com.google.inject.internal.OptionalBinderTest.AStringProvider",
				"com.google.inject.internal.OptionalBinderTest.BStringProvider",
				"com.google.inject.internal.OptionalBinderTest.StringGrabber",
				"com.google.inject.internal.OptionalBinderTest.Marker",
				"com.google.inject.internal.OptionalBinderTest.Dummy",
				"com.google.inject.internal.OptionalBinderTest.MyClass"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.JitBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    JitBinding()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.DependsOnJitBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    DependsOnJitBinding(JitBinding jitBinding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.internal.OptionalBinderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.AStringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.BStringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.StringGrabber",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\") \n    public StringGrabber(@Named(\"A_string\") String string)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\") \n    public StringGrabber(@Named(\"B_string\") String string, int unused)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.Marker",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.Dummy",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.OptionalBinderTest.MyClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link PackageNameCompressor}. */",
			"name": "com.google.inject.internal.PackageNameCompressorTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testEmptyInput()",
					"documentation": "/** Tests for {@link PackageNameCompressor}. */"
				},
				{
					"signature": "@Test\n  public void testSimple()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSingleLetterClassName()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSameSimpleNames()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMethodNames()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMultipleLevelsOfConflicts()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInnerClassesKeepOuterClassNameToo()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testThreeMultiLevelConflicts()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSingleGeneric()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMultipleGeneric()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNestedGeneric()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testQuotedStringShouldNotBeCompressed()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testEmptyQuotedString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testUnbalancedQuotedString()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testQuotedStringSpanMultipleLines()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDoesNotCompressSubstringsOfClasses()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDoesNotCompressShortPackageNames()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNoClassNamesDoNotPutInLegend()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFullConflictsDoNotPutInLegend()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testLegendDoesNotIncludeJavaLang()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOnlyExcludedPrefixesDoesNotPutInLegend()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testWrappedErrorMessageRemovesEmbeddedLegend()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void wrappedErrorMessageRemovesEmbeddedLegend_differentCompressionNames()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.internal.ProxyFactoryTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testSimpleCase()\n      throws NoSuchMethodException, InvocationTargetException, ErrorsException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Test\n  public void testInterceptOneMethod()\n      throws NoSuchMethodException, InvocationTargetException, ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testWithConstructorArguments()\n      throws InvocationTargetException, NoSuchMethodException, ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNotProxied()\n      throws NoSuchMethodException, InvocationTargetException, ErrorsException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMultipleInterceptors()\n      throws NoSuchMethodException, InvocationTargetException, ErrorsException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.internal.ProxyFactoryTest.SimpleInterceptor",
				"com.google.inject.internal.Intercept",
				"com.google.inject.internal.ProxyFactoryTest.A",
				"com.google.inject.internal.ProxyFactoryTest.CountingInterceptor",
				"com.google.inject.internal.ProxyFactoryTest.DoubleInterceptor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.ProxyFactoryTest.Simple",
				"com.google.inject.internal.ProxyFactoryTest.SimpleInterceptor",
				"com.google.inject.internal.ProxyFactoryTest.Foo",
				"com.google.inject.internal.ProxyFactoryTest.Bar",
				"com.google.inject.internal.Intercept",
				"com.google.inject.internal.ProxyFactoryTest.A",
				"com.google.inject.internal.ProxyFactoryTest.CountingInterceptor",
				"com.google.inject.internal.ProxyFactoryTest.DoubleInterceptor",
				"com.google.inject.internal.ProxyFactoryTest.Counter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.Simple",
			"extends": "",
			"Methods": [
				{
					"signature": "public void invoke()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.SimpleInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProxyFactoryTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Intercept\n    protected void foo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Intercept"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "protected void bar()",
					"documentation": ""
				},
				{
					"signature": "@Intercept\n    protected void intercepted()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Intercept"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.Intercept",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.ProxyFactoryTest",
				"com.google.inject.internal.ProxyFactoryTest.Foo",
				"com.google.inject.internal.ProxyFactoryTest.Bar"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public A(int i)",
					"documentation": ""
				},
				{
					"signature": "public void a()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.internal.ProxyFactoryTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.CountingInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProxyFactoryTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.DoubleInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.ProxyFactoryTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.ProxyFactoryTest.Counter",
			"extends": "",
			"Methods": [
				{
					"signature": "protected void inc()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link com.google.inject.internal.RealElement}. */",
			"name": "com.google.inject.internal.RealElementTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/** Tests for {@link com.google.inject.internal.RealElement}. */"
				},
				{
					"signature": "public void testEquals()",
					"documentation": ""
				},
				{
					"signature": "public void testHashCode()",
					"documentation": ""
				},
				{
					"signature": "public void testProperties()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Element"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.RealElementTest.Holder"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.RealElementTest.Holder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Element"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utilities for testing the Multibinder and MapBinder extension SPI.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.internal.SpiUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "static \u003cT\u003e void assertMapVisitor(\n      Key\u003cT\u003e mapKey,\n      TypeLiteral\u003c?\u003e keyType,\n      TypeLiteral\u003c?\u003e valueType,\n      Iterable\u003c? extends Module\u003e modules,\n      VisitType visitType,\n      boolean allowDuplicates,\n      int expectedMapBindings,\n      MapResult\u003c?, ?\u003e... results)",
					"documentation": "/**\n   * Asserts that MapBinderBinding visitors for work correctly.\n   *\n   * @param \u003cT\u003e The type of the binding\n   * @param mapKey The key the map belongs to.\n   * @param keyType the TypeLiteral of the key of the map\n   * @param valueType the TypeLiteral of the value of the map\n   * @param modules The modules that define the mapbindings\n   * @param visitType The kind of test we should perform. A live Injector, a raw Elements (Module)\n   *     test, or both.\n   * @param allowDuplicates If duplicates are allowed.\n   * @param expectedMapBindings The number of other mapbinders we expect to see.\n   * @param results The kind of bindings contained in the mapbinder.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cT\u003e void mapInjectorTest(\n      Key\u003cT\u003e mapKey,\n      TypeLiteral\u003c?\u003e keyType,\n      TypeLiteral\u003c?\u003e valueType,\n      Iterable\u003c? extends Module\u003e modules,\n      boolean allowDuplicates,\n      int expectedMapBindings,\n      MapResult\u003c?, ?\u003e... results)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cT\u003e void mapModuleTest(\n      Key\u003cT\u003e mapKey,\n      TypeLiteral\u003c?\u003e keyType,\n      TypeLiteral\u003c?\u003e valueType,\n      Iterable\u003c? extends Module\u003e modules,\n      boolean allowDuplicates,\n      int expectedMapBindings,\n      MapResult\u003c?, ?\u003e... results)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e void assertSetVisitor(\n      Key\u003cSet\u003cT\u003e\u003e setKey,\n      TypeLiteral\u003c?\u003e elementType,\n      Iterable\u003c? extends Module\u003e modules,\n      VisitType visitType,\n      boolean allowDuplicates,\n      int expectedMultibindings,\n      BindResult\u003cT\u003e... results)",
					"documentation": "/**\n   * Asserts that MultibinderBinding visitors work correctly.\n   *\n   * @param \u003cT\u003e The type of the binding\n   * @param setKey The key the set belongs to.\n   * @param elementType the TypeLiteral of the element\n   * @param modules The modules that define the multibindings\n   * @param visitType The kind of test we should perform. A live Injector, a raw Elements (Module)\n   *     test, or both.\n   * @param allowDuplicates If duplicates are allowed.\n   * @param expectedMultibindings The number of other multibinders we expect to see.\n   * @param results The kind of bindings contained in the multibinder.\n   */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cT\u003e void setInjectorTest(\n      Key\u003cSet\u003cT\u003e\u003e setKey,\n      TypeLiteral\u003c?\u003e elementType,\n      Iterable\u003c? extends Module\u003e modules,\n      boolean allowDuplicates,\n      int otherMultibindings,\n      BindResult\u003cT\u003e... results)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  private static \u003cT\u003e void setModuleTest(\n      Key\u003cSet\u003cT\u003e\u003e setKey,\n      TypeLiteral\u003c?\u003e elementType,\n      Iterable\u003c? extends Module\u003e modules,\n      boolean allowDuplicates,\n      int otherMultibindings,\n      BindResult\u003c?\u003e... results)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e void assertOptionalVisitor(\n      Key\u003cT\u003e keyType,\n      Iterable\u003c? extends Module\u003e modules,\n      VisitType visitType,\n      int expectedOtherOptionalBindings,\n      BindResult\u003c?\u003e expectedDefault,\n      BindResult\u003c?\u003e expectedActual,\n      BindResult\u003c?\u003e expectedUserLinkedActual)",
					"documentation": "/**\n   * Asserts that OptionalBinderBinding visitors for work correctly.\n   *\n   * @param \u003cT\u003e The type of the binding\n   * @param keyType The key OptionalBinder is binding\n   * @param modules The modules that define the bindings\n   * @param visitType The kind of test we should perform. A live Injector, a raw Elements (Module)\n   *     test, or both.\n   * @param expectedOtherOptionalBindings the # of other optional bindings we expect to see.\n   * @param expectedDefault the expected default binding, or null if none\n   * @param expectedActual the expected actual binding, or null if none\n   * @param expectedUserLinkedActual the user binding that is the actual binding, used if neither\n   *     the default nor actual are set and a user binding existed for the type.\n   */"
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static \u003cT\u003e void optionalInjectorTest(\n      Key\u003cT\u003e keyType,\n      Iterable\u003c? extends Module\u003e modules,\n      int expectedOtherOptionalBindings,\n      BindResult\u003c?\u003e expectedDefault,\n      BindResult\u003c?\u003e expectedActual,\n      BindResult\u003c?\u003e expectedUserLinkedActual)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static \u003cT\u003e void optionalModuleTest(\n      Key\u003cT\u003e keyType,\n      Iterable\u003c? extends Module\u003e modules,\n      int expectedOtherOptionalBindings,\n      BindResult\u003c?\u003e expectedDefault,\n      BindResult\u003c?\u003e expectedActual,\n      BindResult\u003c?\u003e expectedUserLinkedActual)",
					"documentation": ""
				},
				{
					"signature": "private static boolean isSourceEntry(Binding\u003c?\u003e b, RealOptionalBinder.Source type)",
					"documentation": ""
				},
				{
					"signature": "private static Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e index(Iterable\u003cElement\u003e elements)",
					"documentation": "/** Returns the subset of elements that have keys, indexed by them. */"
				},
				{
					"signature": "static \u003cK, V\u003e MapResult\u003cK, V\u003e instance(K k, V v)",
					"documentation": ""
				},
				{
					"signature": "static \u003cK, V\u003e MapResult\u003cK, V\u003e linked(K k, Class\u003c? extends V\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "static \u003cK, V\u003e MapResult\u003cK, V\u003e linked(K k, Key\u003c? extends V\u003e key)",
					"documentation": ""
				},
				{
					"signature": "static \u003cK, V\u003e MapResult\u003cK, V\u003e providerInstance(K k, V v)",
					"documentation": ""
				},
				{
					"signature": "private static boolean matches(Binding\u003c?\u003e item, BindResult\u003c?\u003e result)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e BindResult\u003cT\u003e instance(T t)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e BindResult\u003cT\u003e linked(Class\u003c? extends T\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e BindResult\u003cT\u003e linked(Key\u003c? extends T\u003e key)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e BindResult\u003cT\u003e providerInstance(T t)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e BindResult\u003cT\u003e providerKey(Key\u003cT\u003e key)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.MapBinderTest",
				"com.google.inject.internal.MultibinderTest",
				"com.google.inject.internal.OptionalBinderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.spi.Elements",
				"com.google.inject.internal.SpiUtils.Visitor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.VisitType",
				"com.google.inject.internal.SpiUtils.MapResult",
				"com.google.inject.internal.SpiUtils.BindType",
				"com.google.inject.internal.SpiUtils.BindResult",
				"com.google.inject.internal.SpiUtils.Visitor"
			]
		},
		{
			"documentation": "/** The kind of test we should perform. A live Injector, a raw Elements (Module) test, or both. */",
			"name": "com.google.inject.internal.VisitType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.SpiUtils.MapResult",
			"extends": "",
			"Methods": [
				{
					"signature": "MapResult(K k, BindResult\u003cV\u003e v)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** The kind of binding. */",
			"name": "com.google.inject.internal.SpiUtils.BindType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** The result of the binding. */",
			"name": "com.google.inject.internal.SpiUtils.BindResult",
			"extends": "",
			"Methods": [
				{
					"signature": "private BindResult(BindType type, T instance, Key\u003c?\u003e key)",
					"documentation": "/** The result of the binding. */"
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.SpiUtils.Visitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n    public Object visit(MultibinderBinding\u003c? extends T\u003e multibinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object visit(MapBinderBinding\u003c? extends T\u003e mapbinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object visit(OptionalBinderBinding\u003c? extends T\u003e optionalbinding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.multibindings.MultibindingsTargetVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.SpiUtils"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.UniqueAnnotationsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testEqualsHashCodeToString()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link WeakKeySet}.\n *\n * \u003cp\u003eMultibinding specific tests can be found in MultibinderTest and MapBinderTest.\n *\n * @author dweis@google.com (Daniel Weis)\n */",
			"name": "com.google.inject.internal.WeakKeySetTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/**\n * Tests for {@link WeakKeySet}.\n *\n * \u003cp\u003eMultibinding specific tests can be found in MultibinderTest and MapBinderTest.\n *\n * @author dweis@google.com (Daniel Weis)\n */"
				},
				{
					"signature": "public void testEviction()",
					"documentation": ""
				},
				{
					"signature": "public void testEviction_nullSource()",
					"documentation": ""
				},
				{
					"signature": "public void testEviction_keyOverlap_2x()",
					"documentation": ""
				},
				{
					"signature": "public void testNoEviction_keyOverlap_2x()",
					"documentation": ""
				},
				{
					"signature": "public void testEviction_keyAndSourceOverlap_null()",
					"documentation": ""
				},
				{
					"signature": "public void testEviction_keyAndSourceOverlap_nonNull()",
					"documentation": ""
				},
				{
					"signature": "public void testEviction_keyOverlap_3x()",
					"documentation": ""
				},
				{
					"signature": "public void testWeakKeySet_integration()",
					"documentation": ""
				},
				{
					"signature": "public void testWeakKeySet_integration_multipleChildren()",
					"documentation": ""
				},
				{
					"signature": "public void testWeakKeySet_integration_multipleChildren_overlappingKeys()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Asserts",
				"com.google.inject.internal.WeakKeySetTest.TestInjectorBindingData",
				"com.google.inject.internal.WeakKeySetUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.WeakKeySetTest.TestInjectorBindingData"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.WeakKeySetTest.TestInjectorBindingData",
			"extends": "com.google.inject.internal.InjectorBindingData",
			"Methods": [
				{
					"signature": "TestInjectorBindingData()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Optional\u003cInjectorBindingData\u003e parent()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e BindingImpl\u003cT\u003e getExplicitBinding(Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e getExplicitBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putBinding(Key\u003c?\u003e key, BindingImpl\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putProviderLookup(ProviderLookup\u003c?\u003e lookup)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cProviderLookup\u003c?\u003e\u003e getProviderLookupsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putStaticInjectionRequest(StaticInjectionRequest staticInjectionRequest)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cStaticInjectionRequest\u003e getStaticInjectionRequestsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cInjectionRequest\u003c?\u003e\u003e getInjectionRequestsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cMembersInjectorLookup\u003c?\u003e\u003e getMembersInjectorLookupsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putInjectionRequest(InjectionRequest\u003c?\u003e injectionRequest)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putMembersInjectorLookup(MembersInjectorLookup\u003c?\u003e membersInjectorLookup)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ScopeBinding getScopeBinding(Class\u003c? extends Annotation\u003e scopingAnnotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void putScopeBinding(Class\u003c? extends Annotation\u003e annotationType, ScopeBinding scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addConverter(TypeConverterBinding typeConverterBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeConverterBinding getConverter(\n        String stringValue, TypeLiteral\u003c?\u003e type, Errors errors, Object source)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Iterable\u003cTypeConverterBinding\u003e getConvertersThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addInterceptorBinding(InterceptorBinding interceptorBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cInterceptorBinding\u003e getInterceptorBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addTypeListener(TypeListenerBinding typeListenerBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cTypeListenerBinding\u003e getTypeListenerBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addProvisionListener(ProvisionListenerBinding provisionListenerBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cProvisionListenerBinding\u003e getProvisionListenerBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void addScanner(ModuleAnnotatedMethodScannerBinding scanner)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cModuleAnnotatedMethodScannerBinding\u003e getScannerBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Map\u003cClass\u003c? extends Annotation\u003e, Scope\u003e getScopes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public List\u003cScopeBinding\u003e getScopeBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cTypeListenerBinding\u003e getTypeListenerBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cProvisionListenerBinding\u003e getProvisionListenerBindingsThisLevel()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ImmutableList\u003cModuleAnnotatedMethodScannerBinding\u003e getScannerBindingsThisLevel()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.WeakKeySetTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utilities for verifying com.google.inject.internal.WeakKeySet is not leaking memory.\n *\n * @author dweis@google.com (Daniel Weis)\n */",
			"name": "com.google.inject.internal.WeakKeySetUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "private WeakKeySetUtils()",
					"documentation": "/**\n * Utilities for verifying com.google.inject.internal.WeakKeySet is not leaking memory.\n *\n * @author dweis@google.com (Daniel Weis)\n */"
				},
				{
					"signature": "public static void assertBanned(Injector injector, Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public static void assertNotBanned(Injector injector, Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public static void assertNotInSet(WeakKeySet set, Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public static void assertInSet(\n      WeakKeySet set, Key\u003c?\u003e key, int expectedSources, Object... sources)",
					"documentation": ""
				},
				{
					"signature": "public static void assertSourceNotInSet(WeakKeySet set, Key\u003c?\u003e key, Object source)",
					"documentation": ""
				},
				{
					"signature": "private static void assertBannedState(Injector injector, Key\u003c?\u003e key, boolean isBanned)",
					"documentation": ""
				},
				{
					"signature": "private static void sleep()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.WeakKeySetTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link ImmutableStringTrie}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.google.inject.internal.aop.ImmutableStringTrieTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testSingletonTrie()",
					"documentation": "/**\n * Tests for {@link ImmutableStringTrie}.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "public void testMethodStrings()",
					"documentation": ""
				},
				{
					"signature": "public void testRandomStrings()",
					"documentation": ""
				},
				{
					"signature": "private static void randomize(Random random, StringBuilder buf)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.ContinuousStopwatchTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void addLogHandler()",
					"documentation": ""
				},
				{
					"signature": "@After\n  public void removeLogHandler()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleReset() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleResetAndLog() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.internal.util.LineNumbersTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testLineNumbers()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "@Test\n  public void testCanHandleLineNumbersForGuiceGeneratedClasses()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testUnavailableByteCodeShowsUnknownSource()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGeneratedClassesCanSucceed()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.Asserts",
				"com.google.inject.internal.util.LineNumbersTest.A",
				"com.google.inject.internal.util.B",
				"com.google.inject.internal.util.LineNumbersTest.GeneratingClassLoader"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.internal.util.LineNumbersTest.A",
				"com.google.inject.internal.util.B",
				"com.google.inject.internal.util.LineNumbersTest.GeneratingClassLoader"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.LineNumbersTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    A(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.util.LineNumbersTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.internal.util.LineNumbersTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.internal.util.LineNumbersTest.GeneratingClassLoader",
			"extends": "ClassLoader",
			"Methods": [
				{
					"signature": "GeneratingClassLoader()",
					"documentation": ""
				},
				{
					"signature": "Class\u003c?\u003e generate()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.internal.util.LineNumbersTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.matcher.MatcherTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAny()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testNot()",
					"documentation": ""
				},
				{
					"signature": "public void testAnd()",
					"documentation": ""
				},
				{
					"signature": "public void testOr()",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotatedWith()",
					"documentation": ""
				},
				{
					"signature": "public void testSubclassesOf()",
					"documentation": ""
				},
				{
					"signature": "public void testOnly()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"UnnecessaryBoxing\")\n  public void testIdenticalTo()",
					"documentation": ""
				},
				{
					"signature": "public void testInPackage()",
					"documentation": ""
				},
				{
					"signature": "public void testInSubpackage()",
					"documentation": ""
				},
				{
					"signature": "public void testReturns() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testSerialization() throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Matchers",
				"com.google.inject.Asserts",
				"com.google.inject.matcher.Foo",
				"com.google.inject.matcher.Baz"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.matcher.MatcherTest.MyRunnable",
				"com.google.inject.matcher.Foo",
				"com.google.inject.matcher.MatcherTest.Bar",
				"com.google.inject.matcher.Baz",
				"com.google.inject.matcher.MatcherTest.Car"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.MatcherTest.MyRunnable",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"Runnable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.matcher.MatcherTest",
				"com.google.inject.matcher.MatcherTest.Bar"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.MatcherTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Foo"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.Baz",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.matcher.MatcherTest",
				"com.google.inject.matcher.MatcherTest.Car"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.matcher.MatcherTest.Car",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Baz"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests the various @ProvidesInto annotations.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.multibindings.ProvidesIntoTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAnnotation() throws Exception",
					"documentation": "/**\n * Tests the various @ProvidesInto annotations.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "WrappedKey wrappedKeyFor(int number) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testDoubleScannerIsIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testArrayKeys_unwrapValuesTrue()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          @ArrayUnwrappedKey({1, 2})\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "ArrayWrappedKey arrayWrappedKeyFor(int number) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testArrayKeys_unwrapValuesFalse() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          @ArrayWrappedKey(number = {1, 2})\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          @ArrayWrappedKey(number = {3, 4})\n          String provideBar()",
					"documentation": ""
				},
				{
					"signature": "public void testProvidesIntoSetWithMapKey()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoSet\n          @TestEnumKey(TestEnum.A)\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "public void testProvidesIntoOptionalWithMapKey()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoOptional(Type.ACTUAL)\n          @TestEnumKey(TestEnum.A)\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "public void testProvidesIntoMapWithoutMapKey()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "public void testMoreThanOneMapKeyAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          @TestEnumKey(TestEnum.A)\n          @TestEnumKey2(TestEnum.B)\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "public void testMapKeyMissingValueMethod()",
					"documentation": ""
				},
				{
					"signature": "@ProvidesIntoMap\n          @MissingValueMethod\n          String provideFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.multibindings.ClassMapKey",
				"com.google.inject.multibindings.MapKey",
				"com.google.inject.multibindings.ProvidesIntoMap",
				"com.google.inject.multibindings.ProvidesIntoOptional",
				"com.google.inject.multibindings.ProvidesIntoSet",
				"com.google.inject.multibindings.StringMapKey",
				"com.google.inject.name.Named",
				"com.google.inject.Asserts",
				"com.google.inject.multibindings.TestEnumKey",
				"com.google.inject.multibindings.WrappedKey",
				"com.google.inject.multibindings.ArrayUnwrappedKey",
				"com.google.inject.multibindings.ArrayWrappedKey",
				"com.google.inject.multibindings.TestEnumKey2",
				"com.google.inject.multibindings.MissingValueMethod"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.multibindings.TestEnum",
				"com.google.inject.multibindings.TestEnumKey",
				"com.google.inject.multibindings.WrappedKey",
				"com.google.inject.multibindings.ArrayUnwrappedKey",
				"com.google.inject.multibindings.ArrayWrappedKey",
				"com.google.inject.multibindings.TestEnumKey2",
				"com.google.inject.multibindings.MissingValueMethod"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.TestEnum",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.TestEnumKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.WrappedKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.ArrayUnwrappedKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.ArrayWrappedKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.TestEnumKey2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.multibindings.MissingValueMethod",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.multibindings.ProvidesIntoTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapKey"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests that {@code javax.inject.Named} and {@code com.google.inject.name.Named} are completely\n * interchangeable: bindings for one can be used to inject the other.\n *\n * @author cgdecker@gmail.com (Colin Decker)\n */",
			"name": "com.google.inject.name.NamedEquivalanceTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testKeysCreatedWithDifferentTypesAreEqual()",
					"documentation": "/**\n * Tests that {@code javax.inject.Named} and {@code com.google.inject.name.Named} are completely\n * interchangeable: bindings for one can be used to inject the other.\n *\n * @author cgdecker@gmail.com (Colin Decker)\n */"
				},
				{
					"signature": "private static Key\u003cString\u003e keyForAnnotation(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "private static Key\u003cString\u003e keyForAnnotationType(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithNamesCanInjectBothTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithJsr330AnnotationCanInjectBothTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithGuiceNamedAnnotatedProviderMethodCanInjectBothTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithJsr330NamedAnnotatedProviderMethodCanInjectBothTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingDifferentTypesWithSameValueIsIgnored()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingDifferentTypesWithSameValueIsAnErrorWithProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingDifferentTypesWithSameValueIsAnErrorMixed()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingBindingForGuiceNamedUsesSameTypeInErrorMessage()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingBindingForJsr330NamedUsesSameTypeInErrorMessage()",
					"documentation": ""
				},
				{
					"signature": "public void testBindPropertiesWorksWithJsr330()",
					"documentation": ""
				},
				{
					"signature": "private static void assertMissingBindingErrorMessageUsesType(Class\u003c?\u003e clientType)",
					"documentation": ""
				},
				{
					"signature": "private static void assertDuplicateBinding(Module a, Module b, boolean fails)",
					"documentation": ""
				},
				{
					"signature": "private static Module moduleWithAnnotation(final Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				},
				{
					"signature": "private static void assertInjectionsSucceed(Module module)",
					"documentation": ""
				},
				{
					"signature": "private static void assertInjected(GuiceNamedClient guiceClient, Jsr330NamedClient jsr330Client)",
					"documentation": ""
				},
				{
					"signature": "private static Module getJsr330BindingProviderMethodModule()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n      @Provides\n      @javax.inject.Named(\"foo\")\n      String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "private static Module getGuiceBindingProviderMethodModule()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n      @Provides\n      @Named(\"foo\")\n      String provideFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Named",
				"com.google.inject.Asserts",
				"com.google.inject.name.NamedEquivalanceTest.JsrNamed",
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamed"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamedClient",
				"com.google.inject.name.NamedEquivalanceTest.Jsr330NamedClient",
				"com.google.inject.name.NamedEquivalanceTest.JsrNamed",
				"com.google.inject.name.NamedEquivalanceTest.GuiceNamed"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.name.NamedEquivalanceTest.GuiceNamedClient",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.name.NamedEquivalanceTest.Jsr330NamedClient",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.name.NamedEquivalanceTest.JsrNamed",
			"extends": "",
			"Methods": [
				{
					"signature": "public JsrNamed(String value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.inject.Named",
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations"
			],
			"usedBy": [
				"com.google.inject.name.NamedEquivalanceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.name.NamedEquivalanceTest.GuiceNamed",
			"extends": "",
			"Methods": [
				{
					"signature": "public GuiceNamed(String value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String value()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.name.Named",
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations"
			],
			"usedBy": [
				"com.google.inject.name.NamedEquivalanceTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.name.NamesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testConsistentEqualsAndHashcode()",
					"documentation": ""
				},
				{
					"signature": "public void testNamedIsSerializable() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testBindPropertiesUsingProperties()",
					"documentation": ""
				},
				{
					"signature": "public void testBindPropertiesUsingMap()",
					"documentation": ""
				},
				{
					"signature": "public void testBindPropertiesIncludesInheritedProperties()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.name.Named",
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for the cleanup of {@link BindingSourceRestriction} data after enforcement.\n *\n * \u003cp\u003eThe rest of this class is tested through the public {@code RestrictedBindingSource} API it's\n * implementing.\n *\n * @author vzm@google.com (Vladimir Makaric)\n */",
			"name": "com.google.inject.spi.BindingSourceRestrictionTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void singleBinder() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void multipleNestedBinders() throws Exception",
					"documentation": ""
				},
				{
					"signature": "void assertThatInjectorIsWiped(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "void assertThatTheElementSourceChainIsWiped(ElementSource elementSource)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.util.Modules",
				"com.google.inject.spi.Permit1",
				"com.google.inject.spi.Permit2",
				"com.google.inject.spi.Permit3",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module1",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module2",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module3"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.Permit1",
				"com.google.inject.spi.Permit2",
				"com.google.inject.spi.Permit3",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module1",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module2",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module3"
			]
		},
		{
			"documentation": "/**\n * Tests for the cleanup of {@link BindingSourceRestriction} data after enforcement.\n *\n * \u003cp\u003eThe rest of this class is tested through the public {@code RestrictedBindingSource} API it's\n * implementing.\n *\n * @author vzm@google.com (Vladimir Makaric)\n */",
			"name": "com.google.inject.spi.Permit1",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module1"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Permit2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module2"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Permit3",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.BindingSourceRestrictionTest",
				"com.google.inject.spi.BindingSourceRestrictionTest.Module3"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.BindingSourceRestrictionTest.Module1",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Named(\"1\")\n    String provideFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.spi.Permit1"
			],
			"usedBy": [
				"com.google.inject.spi.BindingSourceRestrictionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.BindingSourceRestrictionTest.Module2",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Named(\"2\")\n    String provideFoo2()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.spi.Permit2"
			],
			"usedBy": [
				"com.google.inject.spi.BindingSourceRestrictionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.BindingSourceRestrictionTest.Module3",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.Permit3"
			],
			"usedBy": [
				"com.google.inject.spi.BindingSourceRestrictionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Simple little test that should compile. Ensures that wildcards on the generics are correct.\n *\n * @author phopkins@gmail.com\n */",
			"name": "com.google.inject.spi.BindingTargetVisitorTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindingTargetVisitorTypeTest() throws Exception",
					"documentation": "/**\n * Simple little test that should compile. Ensures that wildcards on the generics are correct.\n *\n * @author phopkins@gmail.com\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.ElementApplyToTest",
			"extends": "com.google.inject.spi.ElementsTest",
			"Methods": [
				{
					"signature": "@Override\n  protected void checkModule(Module module, ElementVisitor\u003c?\u003e... visitors)",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link ElementSource}. */",
			"name": "com.google.inject.spi.ElementSourceTest",
			"extends": "junit.framework.TestCase",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.FailingBindingScopingVisitor",
				"com.google.inject.spi.FailingElementVisitor",
				"com.google.inject.spi.FailingTargetVisitor",
				"com.google.inject.spi.HasDependenciesTest",
				"com.google.inject.spi.InjectionPointTest",
				"com.google.inject.spi.InjectorSpiTest",
				"com.google.inject.spi.MessageTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ModuleRewriterTest",
				"com.google.inject.spi.ModuleSourceTest"
			]
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.ElementsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAddMessageErrorCommand()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testAddThrowableErrorCommand()",
					"documentation": ""
				},
				{
					"signature": "public void testErrorsAddedWhenExceptionsAreThrown()",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e T getInstance(Binding\u003cT\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "public void testBindConstantAnnotations()",
					"documentation": ""
				},
				{
					"signature": "public void testBindConstantTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindKeysNoAnnotations()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Void visit(Binding\u003cT\u003e command)",
					"documentation": ""
				},
				{
					"signature": "public void testBindKeysWithAnnotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Void visit(Binding\u003cT\u003e command)",
					"documentation": ""
				},
				{
					"signature": "public void testBindKeysWithAnnotationInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Void visit(Binding\u003cT\u003e command)",
					"documentation": ""
				},
				{
					"signature": "public void testBindToProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Integer get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Double get()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToLinkedBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testBindInScopes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToInstanceInScope()",
					"documentation": ""
				},
				{
					"signature": "public void testBindToInstanceScope()",
					"documentation": ""
				},
				{
					"signature": "public void testBindIntercepor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(MethodInvocation methodInvocation)",
					"documentation": ""
				},
				{
					"signature": "public void testBindScope()",
					"documentation": ""
				},
				{
					"signature": "public void testBindListener()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cI\u003e void hear(TypeLiteral\u003cI\u003e type, TypeEncounter\u003cI\u003e encounter)",
					"documentation": ""
				},
				{
					"signature": "public void testConvertToTypes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object convert(String value, TypeLiteral\u003c?\u003e toType)",
					"documentation": ""
				},
				{
					"signature": "public void testGetProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testElementInitialization()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void injectMembers(String instance)",
					"documentation": ""
				},
				{
					"signature": "public void testGetMembersInjector()",
					"documentation": ""
				},
				{
					"signature": "public void testRequestInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testRequestStaticInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testNewPrivateBinder()",
					"documentation": ""
				},
				{
					"signature": "public void testBindWithMultipleAnnotationsAddsError()",
					"documentation": ""
				},
				{
					"signature": "public void testBindWithMultipleTargetsAddsError()",
					"documentation": ""
				},
				{
					"signature": "public void testBindWithMultipleScopesAddsError()",
					"documentation": ""
				},
				{
					"signature": "public void testBindConstantWithMultipleAnnotationsAddsError()",
					"documentation": ""
				},
				{
					"signature": "public void testBindConstantWithMultipleTargetsAddsError()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testBindToConstructor() throws NoSuchMethodException, NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testBindToMalformedConstructor() throws NoSuchMethodException, NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testModulesAreInstalledAtMostOnce()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "protected void checkModule(Module module, ElementVisitor\u003c?\u003e... visitors)",
					"documentation": "/** Ensures the module performs the commands consistent with {@code visitors}. */"
				},
				{
					"signature": "protected void checkElements(List\u003cElement\u003e elements, ElementVisitor\u003c?\u003e... visitors)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ElementApplyToTest"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.MembersInjector",
				"com.google.inject.Provider",
				"com.google.inject.TypeLiteral",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.spi.ElementsTest.ExternalFailureVisitor",
				"com.google.inject.spi.SampleAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.ElementsTest.ListProvider",
				"com.google.inject.spi.ElementsTest.TProvider",
				"com.google.inject.spi.ElementsTest.ExternalFailureVisitor",
				"com.google.inject.spi.SampleAnnotation",
				"com.google.inject.spi.CoinSide",
				"com.google.inject.spi.ElementsTest.A",
				"com.google.inject.spi.ElementsTest.B",
				"com.google.inject.spi.ElementsTest.C"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ElementsTest.ListProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public List\u003cObject\u003e get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ElementsTest.TProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * By extending this interface rather than FailingElementVisitor, the source of the error doesn't\n   * need to contain the string {@code ElementsTest.java}.\n   */",
			"name": "com.google.inject.spi.ElementsTest.ExternalFailureVisitor",
			"extends": "com.google.inject.spi.FailingElementVisitor",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ElementsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SampleAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ElementsTest",
				"com.google.inject.spi.ElementsTest.C"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.CoinSide",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ElementsTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.HasDependenciesTest.AWithDependencies"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ElementsTest.B",
			"extends": "",
			"Methods": [
				{
					"signature": "B(T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ElementsTest.C",
			"extends": "",
			"Methods": [
				{
					"signature": "C(@Named(\"bar\") @SampleAnnotation Integer b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.SpiBindingsTest.D"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named",
				"com.google.inject.spi.SampleAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.FailingBindingScopingVisitor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Void visitEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Void visitScope(Scope scope)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Void visitScopeAnnotation(Class\u003c? extends Annotation\u003e scopeAnnotation)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Void visitNoScoping()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.BindingScopingVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.FailingElementVisitor",
			"extends": "com.google.inject.spi.DefaultElementVisitor",
			"Methods": [
				{
					"signature": "@Override\n  protected Void visitOther(Element element)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ElementsTest.ExternalFailureVisitor"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.FailingTargetVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n  protected Void visitOther(Binding\u003c? extends T\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.HasDependenciesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testInstanceWithDependencies()",
					"documentation": "/** When an instance implements HasDependencies, the injected dependencies aren't used. */"
				},
				{
					"signature": "public void testInstanceWithoutDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testProvider()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.spi.HasDependenciesTest.A",
				"com.google.inject.spi.HasDependenciesTest.ProviderOfA",
				"com.google.inject.spi.HasDependenciesTest.AWithDependencies"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.HasDependenciesTest.A",
				"com.google.inject.spi.HasDependenciesTest.ProviderOfA",
				"com.google.inject.spi.HasDependenciesTest.AWithDependencies",
				"com.google.inject.spi.HasDependenciesTest.ProviderOfAWithDependencies"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.HasDependenciesTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void injectUnusedDependencies(String unused)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.HasDependenciesTest.AWithDependencies"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spi.HasDependenciesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.HasDependenciesTest.ProviderOfA",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void injectUnusedDependencies(String unused)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public A get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.HasDependenciesTest.ProviderOfAWithDependencies"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spi.HasDependenciesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.HasDependenciesTest.AWithDependencies",
			"extends": "com.google.inject.spi.HasDependenciesTest.A",
			"Methods": [
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.HasDependenciesTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.HasDependenciesTest.ProviderOfAWithDependencies",
			"extends": "com.google.inject.spi.HasDependenciesTest.ProviderOfA",
			"Methods": [
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithDependencies"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.InjectionPointTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public @Inject void bar(@Named(\"b\") String param)",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testFieldInjectionPoint() throws NoSuchFieldException, IOException, ErrorsException",
					"documentation": ""
				},
				{
					"signature": "public void testMethodInjectionPoint() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testConstructorInjectionPoint()\n      throws NoSuchMethodException, IOException, ErrorsException",
					"documentation": ""
				},
				{
					"signature": "public void testUnattachedDependency() throws IOException",
					"documentation": ""
				},
				{
					"signature": "public void testForConstructor() throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testForConstructorOf()",
					"documentation": ""
				},
				{
					"signature": "public void testForConstructorOfRequireAtInject_success()",
					"documentation": ""
				},
				{
					"signature": "public void testForConstructorOfRequireAtInject_fail()",
					"documentation": ""
				},
				{
					"signature": "public void testTooManyConstructors()",
					"documentation": ""
				},
				{
					"signature": "public void testTooManyConstructors_withOptionalConstructorError()",
					"documentation": ""
				},
				{
					"signature": "public void testAddForInstanceMethodsAndFields() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testAddForStaticMethodsAndFields() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testAddForParameterizedInjections()",
					"documentation": ""
				},
				{
					"signature": "public void testSignature() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideBehavior()",
					"documentation": ""
				},
				{
					"signature": "public void testSyntheticBridgeMethodsInSubclasses()",
					"documentation": "/**\n   * This test serves two purposes: 1) It makes sure that the bridge methods javax generates don't\n   * stop us from injecting superclass methods in the case of javax.inject.Inject. This would happen\n   * prior to java8 (where javac didn't copy annotations from the superclass into the subclass\n   * method when it generated the bridge methods).\n   *\n   * \u003cp\u003e2) It makes sure that the methods we're going to inject have the correct generic types.\n   * Java8 copies the annotations from super to subclasses, but it doesn't copy the generic type\n   * information. Guice would naively consider the subclass an injectable method and eject the\n   * superclass from the 'overrideIndex', leaving only a class with improper generic types.\n   */"
				},
				{
					"signature": "private void assertPoints(\n      Iterable\u003cInjectionPoint\u003e points, Class\u003c?\u003e clazz, String... methodNames)",
					"documentation": ""
				},
				{
					"signature": "private void assertPointDependencies(\n      Iterable\u003cInjectionPoint\u003e points, TypeLiteral\u003c?\u003e... literals)",
					"documentation": "/** Asserts that each injection point has the specified dependencies, in the given order. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.TypeLiteral",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.InjectionPoint.Signature",
				"com.google.inject.Asserts",
				"com.google.inject.spi.InjectionPointTest.NoArgNonConstructable",
				"com.google.inject.spi.InjectionPointTest.ParameterizedInjections"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.InjectionPointTest.Constructable",
				"com.google.inject.spi.InjectionPointTest.NoArgNonConstructable",
				"com.google.inject.spi.InjectionPointTest.TooManyConstructors",
				"com.google.inject.spi.InjectionPointTest.TooManyConstructorsWithOptional",
				"com.google.inject.spi.InjectionPointTest.HasInjections",
				"com.google.inject.spi.InjectionPointTest.ParameterizedInjections",
				"com.google.inject.spi.InjectionPointTest.Foo",
				"com.google.inject.spi.InjectionPointTest.Bar",
				"com.google.inject.spi.InjectionPointTest.Super",
				"com.google.inject.spi.InjectionPointTest.Sub",
				"com.google.inject.spi.InjectionPointTest.SubSub",
				"com.google.inject.spi.InjectionPointTest.RestrictedSuper",
				"com.google.inject.spi.InjectionPointTest.ExposedSub"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.Constructable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Constructable(@Named(\"c\") String param)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.NoArgNonConstructable",
			"extends": "",
			"Methods": [
				{
					"signature": "NoArgNonConstructable()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.InjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.TooManyConstructors",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    TooManyConstructors()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    TooManyConstructors(String str)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.TooManyConstructorsWithOptional",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject(optional = true)\n    TooManyConstructorsWithOptional()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    TooManyConstructorsWithOptional(String str)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.HasInjections",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public static void staticMethod(@Named(\"a\") String a)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void instanceMethod(@Named(\"d\") String d)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.ParameterizedInjections",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public ParameterizedInjections(Map\u003cT, T\u003e map)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spi.InjectionPointTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "void a(String s, int i)",
					"documentation": ""
				},
				{
					"signature": "int b()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "public void a(String s, int i)",
					"documentation": ""
				},
				{
					"signature": "void b()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.Super",
			"extends": "",
			"Methods": [
				{
					"signature": "@javax.inject.Inject\n    public void atInject()",
					"documentation": ""
				},
				{
					"signature": "@com.google.inject.Inject\n    public void gInject()",
					"documentation": ""
				},
				{
					"signature": "@javax.inject.Inject\n    private void privateAtAndPublicG()",
					"documentation": ""
				},
				{
					"signature": "@com.google.inject.Inject\n    private void privateGAndPublicAt()",
					"documentation": ""
				},
				{
					"signature": "@javax.inject.Inject\n    public void atFirstThenG()",
					"documentation": ""
				},
				{
					"signature": "@com.google.inject.Inject\n    public void gFirstThenAt()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectionPointTest.Sub"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.Sub",
			"extends": "com.google.inject.spi.InjectionPointTest.Super",
			"Methods": [
				{
					"signature": "@Override\n    @SuppressWarnings(\"OverridesJavaxInjectableMethod\")\n    public void atInject()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"OverridesGuiceInjectableMethod\")\n    public void gInject()",
					"documentation": ""
				},
				{
					"signature": "@com.google.inject.Inject\n    public void privateAtAndPublicG()",
					"documentation": ""
				},
				{
					"signature": "@javax.inject.Inject\n    public void privateGAndPublicAt()",
					"documentation": ""
				},
				{
					"signature": "@com.google.inject.Inject\n    @Override\n    public void atFirstThenG()",
					"documentation": ""
				},
				{
					"signature": "@javax.inject.Inject\n    @Override\n    public void gFirstThenAt()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectionPointTest.SubSub"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.SubSub",
			"extends": "com.google.inject.spi.InjectionPointTest.Sub",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"OverridesGuiceInjectableMethod\")\n    @Override\n    public void privateAtAndPublicG()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"OverridesJavaxInjectableMethod\")\n    @Override\n    public void privateGAndPublicAt()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"OverridesGuiceInjectableMethod\")\n    @Override\n    public void atFirstThenG()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"OverridesGuiceInjectableMethod\")\n    @Override\n    public void gFirstThenAt()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.RestrictedSuper",
			"extends": "",
			"Methods": [
				{
					"signature": "@com.google.inject.Inject\n    public void gInject(Provider\u003cString\u003e p)",
					"documentation": ""
				},
				{
					"signature": "@javax.inject.Inject\n    public void jInject(Provider\u003cString\u003e p)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectionPointTest.ExposedSub",
				"com.google.inject.spi.ProviderMethodsTest.ExposedSub"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectionPointTest.ExposedSub",
			"extends": "com.google.inject.spi.ProviderMethodsTest.RestrictedSuper",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author sberlin@gmail.com (Sam Berlin) */",
			"name": "com.google.inject.spi.InjectorSpiTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testExistingBinding()",
					"documentation": "/** @author sberlin@gmail.com (Sam Berlin) */"
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n  private static void customMethod(Foo foo, Bar bar)",
					"documentation": ""
				},
				{
					"signature": "public void testGetElements_standardItems()",
					"documentation": ""
				},
				{
					"signature": "public void testGetElements_providerLookups()",
					"documentation": ""
				},
				{
					"signature": "public void testGetElements_staticInjectionRequests() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetElements_injectionRequest() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetElements_membersInjectorLookup() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetAllMembersInjectorInjectionPoints_injectMembers_returned()",
					"documentation": ""
				},
				{
					"signature": "public void testGetAllMembersInjectorInjectionPoints_getInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testGetAllMembersInjectorInjectionPoints_getInstanceAndInjectMembers()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.Asserts",
				"com.google.inject.spi.InjectorSpiTest.ClassWithInjectableField"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.InjectorSpiTest.StaticallyInject",
				"com.google.inject.spi.InjectorSpiTest.SuperStatic",
				"com.google.inject.spi.InjectorSpiTest.Foo",
				"com.google.inject.spi.InjectorSpiTest.Bar",
				"com.google.inject.spi.InjectorSpiTest.Baz",
				"com.google.inject.spi.InjectorSpiTest.ClassWithInjectableField"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.StaticallyInject",
			"extends": "com.google.inject.spi.InjectorSpiTest.SuperStatic",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.SuperStatic",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectorSpiTest.StaticallyInject"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.Baz",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.InjectorSpiTest.ClassWithInjectableField",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    ClassWithInjectableField(String name)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spi.InjectorSpiTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link Message}. */",
			"name": "com.google.inject.spi.MessageTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testMessageHashCodeVariesWithSource()",
					"documentation": "/** Tests for {@link Message}. */"
				},
				{
					"signature": "public void testMessageHashCodeVariesWithCause()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link ModuleAnnotatedMethodScanner} usage. */",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void scanning() throws Exception",
					"documentation": "/** Tests for {@link ModuleAnnotatedMethodScanner} usage. */"
				},
				{
					"signature": "@TestProvides\n          @Named(\"foo\")\n          String foo()",
					"documentation": "/** Tests for {@link ModuleAnnotatedMethodScanner} usage. */"
				},
				{
					"signature": "@TestProvides\n          @Named(\"foo2\")\n          String foo2()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void skipSources() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void withSource() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void moreThanOneClaimedAnnotationFails() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n          @TestProvides2\n          String foo()",
					"documentation": ""
				},
				{
					"signature": "private String methodName(Class\u003c? extends Annotation\u003e annotation, String method, Object container)\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void assertMungedBinding(\n      Injector injector, Class\u003c?\u003e clazz, String originalName, Object expectedValue)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void failingScanner()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void sannerFailureDoesNotPropagateDownstream()",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n          @Named(\"foo\")\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"bar\")\n          String providesBar(@Named(\"foo\") String foo)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childInjectorInheritsScanner()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void childInjectorScannersDontImpactSiblings()",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n          @Named(\"foo\")\n          String foo()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleInheritScanner_usingPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleInheritsScanner_scannerInstalledAfterPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModule_skipSourcesWithinPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModule_skipSourcesForPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleInheritScanner_usingPrivateBinder()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleInheritScanner_skipSourcesFromPrivateBinder()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleInheritScanner_skipSourcesFromPrivateBinder2()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleScannersDontImpactSiblings_usingPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleScannersDontImpactSiblings_usingPrivateBinder()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleWithinPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void privateModuleWithinPrivateModule_parentScannerInheritedIfInstalledAfter()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void abstractMethodsAreScannedForOverrides()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void ignoreMethodsScannedForOverridesSubclass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void ignoreMethodsScannedForOverridesSuperclass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void ignoreMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerCantRegisterScanner()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerCantInstallModuleWithCustomProvidesMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerCantInstallPrivateModuleWithCustomProvidesMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerCanInstallModuleWithRegularProvidesMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "CreationException assertThatInjectorCreationFails(Module... modules)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerSourceCorrectForNonGuiceModule()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerSourceCorrectForGuiceModule()",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n          @Foo\n          boolean booleanTest()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          String stringTest()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerSourceCorrectForBindingsCreatedByTheScannerDirectly()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerSourceOfProvidesMethodBindingInsideCustomScannerIsCustomScanner()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n              Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void scannerSourceForPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "ModuleAnnotatedMethodScanner getSourceScanner(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private static Module scannerModule(ModuleAnnotatedMethodScanner scanner)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Exposed",
				"com.google.inject.Guice",
				"com.google.inject.PrivateModule",
				"com.google.inject.Provides",
				"com.google.inject.internal.ProviderMethodsModule",
				"com.google.inject.internal.util.StackTraceElements",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.TestProvides",
				"com.google.inject.spi.TestProvides2",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.NamedMunger",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.FailingScanner",
				"com.google.inject.spi.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.IgnoringScanner",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.TestScanner",
				"com.google.inject.spi.ModuleWithMethodsToIgnore",
				"com.google.inject.spi.NonGuiceModule",
				"com.google.inject.spi.Foo"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.TestProvides",
				"com.google.inject.spi.TestProvides2",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.NamedMunger",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.FailingScanner",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.SomeModule",
				"com.google.inject.spi.Superclass",
				"com.google.inject.spi.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Superclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.IgnoringScanner",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.TestScanner",
				"com.google.inject.spi.ModuleWithMethodsToIgnore",
				"com.google.inject.spi.NonGuiceModule",
				"com.google.inject.spi.Foo"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.TestProvides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.SomeModule",
				"com.google.inject.spi.Superclass",
				"com.google.inject.spi.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Superclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass",
				"com.google.inject.spi.ModuleWithMethodsToIgnore",
				"com.google.inject.spi.NonGuiceModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.TestProvides2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.NamedMunger",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.FailingScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation rawAnnotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.SomeModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@TestProvides\n    String aString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Superclass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Subclass",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Superclass",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Superclass",
			"extends": "",
			"Methods": [
				{
					"signature": "@TestProvides\n    boolean booleanTest()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.Subclass",
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Subclass",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.Superclass",
			"Methods": [
				{
					"signature": "@TestProvides\n    @Override\n    boolean booleanTest()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.IgnoringScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "IgnoringScanner(Class\u003c?\u003e classToIgnore)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "int ignoredCounter()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleAnnotatedMethodScannerTest.TestScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "TestScanner(Class\u003c? extends Annotation\u003e... annotations)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ModuleWithMethodsToIgnore",
			"extends": "",
			"Methods": [
				{
					"signature": "@TestProvides\n      boolean booleanTest()",
					"documentation": ""
				},
				{
					"signature": "@TestProvides\n      int ignore()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.NonGuiceModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@TestProvides\n      boolean booleanTest()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.spi.TestProvides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.ModuleRewriterTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testRewriteBindings()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testGetProviderAvailableAtInjectMembersTime()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Provider",
				"com.google.inject.name.Names"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@link ModuleSource}. */",
			"name": "com.google.inject.spi.ModuleSourceTest",
			"extends": "junit.framework.TestCase",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.ProviderMethodsTest",
				"com.google.inject.spi.SourcesTest",
				"com.google.inject.spi.SpiBindingsTest",
				"com.google.inject.spi.ToolStageInjectorTest",
				"com.google.inject.util.NoopOverrideTest",
				"com.google.inject.util.OverrideModuleTest",
				"com.google.inject.util.ProvidersTest",
				"com.google.inject.util.TypesTest",
				"com.googlecode.guice.BytecodeGenTest",
				"com.googlecode.guice.GuiceTck",
				"com.googlecode.guice.Jsr330Test",
				"com.googlecode.guice.OSGiContainerTest",
				"com.googlecode.guice.PackageVisibilityTestModule",
				"com.googlecode.guice.bundle.OSGiTestActivator",
				"com.example.App",
				"com.example.Printer",
				"com.example.AppTest",
				"com.google.inject.assistedinject.Assisted",
				"com.google.inject.assistedinject.AssistedConstructor",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.AssistedInjectBinding",
				"com.google.inject.assistedinject.AssistedInjectTargetVisitor",
				"com.google.inject.assistedinject.AssistedMethod",
				"com.google.inject.assistedinject.BindingCollector",
				"com.google.inject.assistedinject.FactoryModuleBuilder",
				"com.google.inject.assistedinject.FactoryProvider",
				"com.google.inject.assistedinject.FactoryProvider2",
				"com.google.inject.assistedinject.Parameter",
				"com.google.inject.assistedinject.ParameterListKey",
				"com.google.inject.assistedinject.internal.LookupTester",
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.ManyConstructorsTest",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest",
				"com.google.inject.assistedinject.subpkg.SubpackageTest",
				"com.google.inject.daggeradapter.Annotations",
				"com.google.inject.daggeradapter.DaggerAdapter",
				"com.google.inject.daggeradapter.DaggerMethodScanner",
				"com.google.inject.daggeradapter.Keys",
				"com.google.inject.daggeradapter.SupportedAnnotations",
				"com.google.inject.daggeradapter.BindingSubject",
				"com.google.inject.daggeradapter.BindsTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.ModuleIncludesTest",
				"com.google.inject.daggeradapter.ModuleSubcomponentsTest",
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.OptionalBindingsTest",
				"com.google.inject.grapher.AbstractInjectorGrapher",
				"com.google.inject.grapher.Alias",
				"com.google.inject.grapher.AliasCreator",
				"com.google.inject.grapher.BindingEdge",
				"com.google.inject.grapher.DefaultEdgeCreator",
				"com.google.inject.grapher.DefaultNodeCreator",
				"com.google.inject.grapher.DefaultRootKeySetCreator",
				"com.google.inject.grapher.DependencyEdge",
				"com.google.inject.grapher.Edge",
				"com.google.inject.grapher.EdgeCreator",
				"com.google.inject.grapher.ImplementationNode",
				"com.google.inject.grapher.InjectorGrapher",
				"com.google.inject.grapher.InstanceNode",
				"com.google.inject.grapher.InterfaceNode",
				"com.google.inject.grapher.NameFactory",
				"com.google.inject.grapher.Node",
				"com.google.inject.grapher.NodeCreator",
				"com.google.inject.grapher.NodeId",
				"com.google.inject.grapher.ProviderAliasCreator",
				"com.google.inject.grapher.RootKeySetCreator",
				"com.google.inject.grapher.ShortNameFactory",
				"com.google.inject.grapher.TransitiveDependencyVisitor",
				"com.google.inject.grapher.graphviz.ArrowType",
				"com.google.inject.grapher.graphviz.CompassPoint",
				"com.google.inject.grapher.graphviz.EdgeStyle",
				"com.google.inject.grapher.graphviz.Graphviz",
				"com.google.inject.grapher.graphviz.GraphvizEdge",
				"com.google.inject.grapher.graphviz.GraphvizGrapher",
				"com.google.inject.grapher.graphviz.GraphvizModule",
				"com.google.inject.grapher.graphviz.GraphvizNode",
				"com.google.inject.grapher.graphviz.NodeShape",
				"com.google.inject.grapher.graphviz.NodeStyle",
				"com.google.inject.grapher.graphviz.PortIdFactory",
				"com.google.inject.grapher.graphviz.PortIdFactoryImpl",
				"com.google.inject.grapher.AbstractInjectorGrapherTest",
				"com.google.inject.grapher.AllTests",
				"com.google.inject.grapher.ShortNameFactoryTest",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest",
				"com.google.inject.grapher.demo.AssistedInjectModule",
				"com.google.inject.grapher.demo.BackToTheFutureModule",
				"com.google.inject.grapher.demo.DanceParty",
				"com.google.inject.grapher.demo.DancePartyFactory",
				"com.google.inject.grapher.demo.DancePartyImpl",
				"com.google.inject.grapher.demo.DeLorian",
				"com.google.inject.grapher.demo.DocBrown",
				"com.google.inject.grapher.demo.Driver",
				"com.google.inject.grapher.demo.EnergySource",
				"com.google.inject.grapher.demo.EnergySourceProvider",
				"com.google.inject.grapher.demo.FluxCapacitor",
				"com.google.inject.grapher.demo.InjectorGrapherDemo",
				"com.google.inject.grapher.demo.Inventor",
				"com.google.inject.grapher.demo.Lightning",
				"com.google.inject.grapher.demo.MartyMcFly",
				"com.google.inject.grapher.demo.MultibinderModule",
				"com.google.inject.grapher.demo.Nuclear",
				"com.google.inject.grapher.demo.Person",
				"com.google.inject.grapher.demo.PinballParts",
				"com.google.inject.grapher.demo.Plutonium",
				"com.google.inject.grapher.demo.PlutoniumProvider",
				"com.google.inject.grapher.demo.PrivateTestModule",
				"com.google.inject.grapher.demo.Renewable",
				"com.google.inject.grapher.demo.Used",
				"com.google.inject.tools.jmx.ManagedBinding",
				"com.google.inject.tools.jmx.ManagedBindingMBean",
				"com.google.inject.tools.jmx.Manager",
				"com.google.inject.tools.jmx.JmxTest",
				"com.google.inject.jndi.JndiIntegration",
				"com.google.inject.persist.PersistFilter",
				"com.google.inject.persist.PersistModule",
				"com.google.inject.persist.PersistService",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.UnitOfWork",
				"com.google.inject.persist.finder.DynamicFinder",
				"com.google.inject.persist.finder.Finder",
				"com.google.inject.persist.finder.FirstResult",
				"com.google.inject.persist.finder.MaxResults",
				"com.google.inject.persist.jpa.Jpa",
				"com.google.inject.persist.jpa.JpaFinderProxy",
				"com.google.inject.persist.jpa.JpaLocalTxnInterceptor",
				"com.google.inject.persist.jpa.JpaPersistModule",
				"com.google.inject.persist.jpa.JpaPersistService",
				"com.google.inject.persist.AllTests",
				"com.google.inject.persist.EdslTest",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.CustomPropsEntityManagerFactoryProvisionTest",
				"com.google.inject.persist.jpa.DynamicFinderTest",
				"com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest",
				"com.google.inject.persist.jpa.EntityManagerFactoryProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest",
				"com.google.inject.persist.jpa.JpaParentTestEntity",
				"com.google.inject.persist.jpa.JpaPersistServiceTest",
				"com.google.inject.persist.jpa.JpaTestEntity",
				"com.google.inject.persist.jpa.JpaWorkManagerTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest",
				"com.google.inject.servlet.AbstractServletModuleBinding",
				"com.google.inject.servlet.ContinuingHttpServletRequest",
				"com.google.inject.servlet.DefaultFilterPipeline",
				"com.google.inject.servlet.FilterChainInvocation",
				"com.google.inject.servlet.FilterDefinition",
				"com.google.inject.servlet.FilterPipeline",
				"com.google.inject.servlet.FiltersModuleBuilder",
				"com.google.inject.servlet.GuiceFilter",
				"com.google.inject.servlet.GuiceServletContextListener",
				"com.google.inject.servlet.InstanceFilterBinding",
				"com.google.inject.servlet.InstanceFilterBindingImpl",
				"com.google.inject.servlet.InstanceServletBinding",
				"com.google.inject.servlet.InstanceServletBindingImpl",
				"com.google.inject.servlet.InternalServletModule",
				"com.google.inject.servlet.LinkedFilterBinding",
				"com.google.inject.servlet.LinkedFilterBindingImpl",
				"com.google.inject.servlet.LinkedServletBinding",
				"com.google.inject.servlet.LinkedServletBindingImpl",
				"com.google.inject.servlet.ManagedFilterPipeline",
				"com.google.inject.servlet.ManagedServletPipeline",
				"com.google.inject.servlet.RequestParameters",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.RequestScoper",
				"com.google.inject.servlet.ScopingException",
				"com.google.inject.servlet.ScopingOnly",
				"com.google.inject.servlet.ServletDefinition",
				"com.google.inject.servlet.ServletModule",
				"com.google.inject.servlet.ServletModuleBinding",
				"com.google.inject.servlet.ServletModuleTargetVisitor",
				"com.google.inject.servlet.ServletScopes",
				"com.google.inject.servlet.ServletUtils",
				"com.google.inject.servlet.ServletsModuleBuilder",
				"com.google.inject.servlet.SessionScoped",
				"com.google.inject.servlet.UriPatternMatcher",
				"com.google.inject.servlet.UriPatternType",
				"com.google.inject.servlet.AllTests",
				"com.google.inject.servlet.ContextPathTest",
				"com.google.inject.servlet.ContinuingHttpServletRequestTest",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest",
				"com.google.inject.servlet.DummyFilterImpl",
				"com.google.inject.servlet.DummyServlet",
				"com.google.inject.servlet.EdslTest",
				"com.google.inject.servlet.ExtensionSpiTest",
				"com.google.inject.servlet.FilterDefinitionTest",
				"com.google.inject.servlet.FilterDispatchIntegrationTest",
				"com.google.inject.servlet.FilterPipelineTest",
				"com.google.inject.servlet.InjectedFilterPipelineTest",
				"com.google.inject.servlet.InvalidScopeBindingTest",
				"com.google.inject.servlet.MultiModuleDispatchIntegrationTest",
				"com.google.inject.servlet.MultipleServletInjectorsTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ServletDefinitionPathsTest",
				"com.google.inject.servlet.ServletDefinitionTest",
				"com.google.inject.servlet.ServletDispatchIntegrationTest",
				"com.google.inject.servlet.ServletModuleTest",
				"com.google.inject.servlet.ServletPipelineRequestDispatcherTest",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletSpiVisitor",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.ServletTestUtils",
				"com.google.inject.servlet.ServletUtilsTest",
				"com.google.inject.servlet.TransferRequestIntegrationTest",
				"com.google.inject.servlet.UriPatternTypeTest",
				"com.google.inject.servlet.VarargsFilterDispatchIntegrationTest",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest",
				"com.google.inject.spring.SpringIntegration",
				"com.google.inject.spring.SpringIntegrationTest",
				"com.google.inject.struts2.example.Count",
				"com.google.inject.struts2.example.Counter",
				"com.google.inject.struts2.example.ExampleListener",
				"com.google.inject.struts2.example.Main",
				"com.google.inject.struts2.example.Service",
				"com.google.inject.struts2.example.ServiceImpl",
				"com.google.inject.struts2.GuiceObjectFactory",
				"com.google.inject.struts2.Struts2Factory",
				"com.google.inject.struts2.Struts2GuicePluginModule",
				"com.google.inject.struts2.Struts2FactoryTest",
				"com.google.inject.testing.fieldbinder.Bind",
				"com.google.inject.testing.fieldbinder.BoundFieldModule",
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.TestPermit",
				"com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest",
				"com.google.inject.throwingproviders.CheckedProvideUtils",
				"com.google.inject.throwingproviders.CheckedProvider",
				"com.google.inject.throwingproviders.CheckedProviderMethod",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule",
				"com.google.inject.throwingproviders.CheckedProviderWithDependencies",
				"com.google.inject.throwingproviders.CheckedProviders",
				"com.google.inject.throwingproviders.CheckedProvides",
				"com.google.inject.throwingproviders.ProviderChecker",
				"com.google.inject.throwingproviders.ThrowingInject",
				"com.google.inject.throwingproviders.ThrowingProvider",
				"com.google.inject.throwingproviders.ThrowingProviderBinder",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.CheckedProvidersTest",
				"com.google.inject.throwingproviders.TestScope",
				"com.google.inject.throwingproviders.ThrowingProviderTest",
				"com.google.inject.tools.OsgiWrapper"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.spi.ProviderMethodsTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\")\n  @Test\n  public void testProviderMethods()",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  Bob provideBob(final Dagny dagny)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String getName()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Dagny getDaughter()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @Singleton\n  @Sole\n  Bob provideSoleBob(final Dagny dagny)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String getName()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Dagny getDaughter()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @Singleton\n  Dagny provideDagny()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public int getAge()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testCircularDependency()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMultipleBindingAnnotations()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGenericProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAutomaticProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAutomaticProviderMethodsDoNotCauseDoubleBinding()",
					"documentation": "/**\n   * If the user installs provider methods for the module manually, that shouldn't cause a double\n   * binding of the provider methods' types.\n   */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n   * If the user installs provider methods for the module manually, that shouldn't cause a double\n   * binding of the provider methods' types.\n   */"
				},
				{
					"signature": "@Provides\n          public String provideString(Integer count)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testWildcardProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodDependenciesAreExposed() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"weight\")\n          String provideWeight(Integer count, @Named(\"units\") String units)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNonModuleProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"foo\")\n          String provideFoo()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testVoidProviderMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectsJustOneLogger()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSpi() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"foo\")\n          String provideFoo(Integer dep)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          Integer provideInt(@Named(\"foo\") String dep)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProvidesMethodVisibility()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProvidesMethodInheritenceHierarchy()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProvidesMethodsDefinedInSuperClass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testShareFastClass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testShareFastClassWithSuperClass()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_overrideHasProvides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_overrideHasProvides_withNewAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_overrideDoesntHaveProvides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_overrideDoesntHaveProvides_withNewAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_covariantOverrideDoesntHaveProvides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_covariantOverrideHasProvides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_fakeOverridePrivateMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_subclassRawTypes_returnType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_subclassRawTypes_parameterType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_superclassRawTypes_returnType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_erasureBasedOverrides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOverrideProviderMethod_increasedVisibility()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testIgnoreSyntheticBridgeMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testScopedProviderMethodThrowsException()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNullability() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n          @Provides\n          Integer fail(String foo)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n          @Provides\n          Long succeed(@Nullable String foo)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testModuleBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          Integer fail()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeduplicateProviderMethodsBindings_sameInstance()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeduplicateProviderMethodsBindings_differentInstances()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeduplicateProviderMethodsBindings_sameInstance_staticMethod()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDeduplicateProviderMethodsBindings_differentInstances_staticMethod()",
					"documentation": ""
				},
				{
					"signature": "private void runNullableTest(Injector injector, Dependency\u003c?\u003e dependency, Module module)",
					"documentation": ""
				},
				{
					"signature": "private void validateNullableFails(Injector injector, Module module)",
					"documentation": ""
				},
				{
					"signature": "private void validateNullableIgnored(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "private void validateNullableWarns(Injector injector, Dependency\u003c?\u003e dependency)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void publish(LogRecord logRecord)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void flush()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void close() throws SecurityException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.InternalFlags",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.spi.Foo",
				"com.google.inject.spi.Bob",
				"com.google.inject.spi.Dagny",
				"com.google.inject.spi.Sole",
				"com.google.inject.spi.Bar",
				"com.google.inject.spi.Blue",
				"com.google.inject.spi.ProvideTs",
				"com.google.inject.spi.ProviderMethodsTest.FooModule",
				"com.google.inject.spi.ProviderMethodsTest.BindingCapturer",
				"com.google.inject.spi.ProviderMethodsTest.VisibilityModule",
				"com.google.inject.spi.ProviderMethodsTest.Sub1Module",
				"com.google.inject.spi.ProviderMethodsTest.Sub2Module",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.ProviderMethodsTest.ExposedSub",
				"com.google.inject.spi.ProviderMethodsTest.ModuleImpl",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateModule",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateStaticModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.Bob",
				"com.google.inject.spi.Dagny",
				"com.google.inject.spi.Sole",
				"com.google.inject.spi.Foo",
				"com.google.inject.spi.Bar",
				"com.google.inject.spi.Blue",
				"com.google.inject.spi.ProvideTs",
				"com.google.inject.spi.ProviderMethodsTest.HasWildcardInjection",
				"com.google.inject.spi.ProviderMethodsTest.FooModule",
				"com.google.inject.spi.ProviderMethodsTest.BindingCapturer",
				"com.google.inject.spi.ProviderMethodsTest.VisibilityModule",
				"com.google.inject.spi.ProviderMethodsTest.BaseModule",
				"com.google.inject.spi.ProviderMethodsTest.Sub1Module",
				"com.google.inject.spi.ProviderMethodsTest.Sub2Module",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule",
				"com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.ProviderMethodsTest.GenericSuperModule",
				"com.google.inject.spi.SubClassModule",
				"com.google.inject.spi.ProviderMethodsTest.RestrictedSuper",
				"com.google.inject.spi.ProviderMethodsTest.ExposedSub",
				"com.google.inject.spi.ProviderInterface",
				"com.google.inject.spi.ProviderMethodsTest.ModuleImpl",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateModule",
				"com.google.inject.spi.ProviderMethodsTest.DeduplicateStaticModule",
				"com.google.inject.spi.Nullable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Bob",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Dagny",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Sole",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ModuleAnnotatedMethodScannerTest",
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Blue",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProvideTs",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "protected ProvideTs(T first, T second)",
					"documentation": ""
				},
				{
					"signature": "@Named(\"First\")\n    @Provides\n    T provideFirst()",
					"documentation": ""
				},
				{
					"signature": "@Named(\"Second\")\n    @Provides\n    T provideSecond()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    Set\u003cT\u003e provideBoth(@Named(\"First\") T first, @Named(\"Second\") T second)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.HasWildcardInjection",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.FooModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "public FooModule(AtomicReference\u003cLogger\u003e loggerRef)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Provides\n    Integer foo(Logger logger)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.BindingCapturer",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public ProvidesMethodBinding\u003cT\u003e visit(\n        ProvidesMethodBinding\u003c? extends T\u003e providesMethodBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected ProvidesMethodBinding\u003cT\u003e visitOther(Binding\u003c? extends T\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProvidesMethodTargetVisitor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.VisibilityModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Provides\n    Integer foo()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Provides\n    private Long bar()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Provides\n    protected Double baz()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Provides\n    public Float quux()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.BaseModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    Integer foo()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    Long bar()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ProviderMethodsTest.Sub1Module",
				"com.google.inject.spi.ProviderMethodsTest.Sub2Module"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.Sub1Module",
			"extends": "com.google.inject.spi.ProviderMethodsTest.BaseModule",
			"Methods": [
				{
					"signature": "@Provides\n    Double baz()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.Sub2Module",
			"extends": "com.google.inject.spi.ProviderMethodsTest.BaseModule",
			"Methods": [
				{
					"signature": "@Provides\n    Float quux()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Singleton\n    Integer foo()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Singleton\n    Long bar()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.CallerInspecterSubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.CallerInspecterModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Singleton\n    Double baz()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    Number providerMethod()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Named(\"rawlist\")\n    @SuppressWarnings(\"rawtypes\") \n    List rawProvider(@Named(\"list\") List\u003cString\u003e f)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Named(\"unrawlist\")\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n    List\u003cString\u003e rawParameterProvider(@Named(\"rawlist\") List f)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Named(\"list\")\n    List\u003cString\u003e annotatedGenericProviderMethod()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Named(\"collection\")\n    Collection\u003cString\u003e annotatedGenericParameterProviderMethod(@Named(\"list\") List\u003cString\u003e foo)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    private String privateProviderMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.SubClassModule"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      @Provides\n      Number providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      @Provides\n      @Named(\"foo\")\n      Number providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      Number providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      @Named(\"foo\")\n      Number providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      Double providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      @Provides\n      Double providerMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "String privateProviderMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n      List annotatedGenericProviderMethod()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n      @Override\n      Collection\u003cString\u003e annotatedGenericParameterProviderMethod(List foo)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.SuperClassModule",
			"Methods": [
				{
					"signature": "@Override\n      List\u003cString\u003e rawProvider(List\u003cString\u003e f)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.GenericSuperModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    String provide(T thing)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.SubClassModule"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SubClassModule",
			"extends": "com.google.inject.spi.ProviderMethodsTest.GenericSuperModule",
			"Methods": [
				{
					"signature": "@Override\n      String provide(Integer thing)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.RestrictedSuper",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    public String provideFoo()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.InjectionPointTest.ExposedSub",
				"com.google.inject.spi.ProviderMethodsTest.ExposedSub"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.ExposedSub",
			"extends": "com.google.inject.spi.ProviderMethodsTest.RestrictedSuper",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderInterface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.spi.ProviderMethodsTest.ModuleImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.ModuleImpl",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    @Provides\n    public String getT()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    public Object getObject()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderInterface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.DeduplicateModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    String provideString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ProviderMethodsTest.DeduplicateStaticModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    static String provideString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.spi.ProviderMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests sources are set correctly in elements. */",
			"name": "com.google.inject.spi.SourcesTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void entirelyFilteredSourceShowsAsUnknown()",
					"documentation": "/** Tests sources are set correctly in elements. */"
				},
				{
					"signature": "@Test\n  public void unfilteredShowsCorrectly()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.spi.SpiBindingsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindConstant()",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testToInstanceBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testToProviderBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testToProviderKeyBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testToKeyBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testToConstructorBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testConstantBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testConvertedConstantBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testScopes()",
					"documentation": ""
				},
				{
					"signature": "public void testExtensionSpi()",
					"documentation": ""
				},
				{
					"signature": "public void checkBindingSource(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "public void checkInjector(Module module, ElementVisitor\u003c?\u003e... visitors)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.spi.SpiBindingsTest.FailingSpiTargetVisitor",
				"com.google.inject.spi.SpiBindingsTest.StringProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.SpiBindingsTest.FailingSpiTargetVisitor",
				"com.google.inject.spi.SpiBindingsTest.StringProvider",
				"com.google.inject.spi.SpiBindingsTest.C",
				"com.google.inject.spi.SpiBindingsTest.D"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SpiBindingsTest.FailingSpiTargetVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n    protected String visitOther(Binding\u003c? extends T\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.SpiBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SpiBindingsTest.StringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spi.SpiBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SpiBindingsTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spi.SpiBindingsTest.D"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.SpiBindingsTest.D",
			"extends": "com.google.inject.spi.SpiBindingsTest.C",
			"Methods": [
				{
					"signature": "@Inject\n    public D(Injector unused)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testToolStageInjectorRestrictions()",
					"documentation": ""
				},
				{
					"signature": "public void testToolStageDoesntInjectInstances()",
					"documentation": ""
				},
				{
					"signature": "public void testToolStageDoesntInjectProviders()",
					"documentation": ""
				},
				{
					"signature": "public void testToolStageWarnsOfMissingObjectGraph()",
					"documentation": ""
				},
				{
					"signature": "public void testToolStageInjectsTooledMethods()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.spi.Toolable",
				"com.google.inject.Asserts",
				"com.google.inject.spi.ToolStageInjectorTest.Bar"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spi.ToolStageInjectorTest.Bar",
				"com.google.inject.spi.ToolStageInjectorTest.Foo",
				"com.google.inject.spi.ToolStageInjectorTest.Tooled",
				"com.google.inject.spi.ToolStageInjectorTest.S",
				"com.google.inject.spi.ToolStageInjectorTest.F",
				"com.google.inject.spi.ToolStageInjectorTest.M",
				"com.google.inject.spi.ToolStageInjectorTest.SM"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.Bar",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    void method(Collection\u003cString\u003e c)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    static void staticMethod(Map\u003cString, String\u003e map)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spi.ToolStageInjectorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    void method(M m)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    static void staticMethod(SM sm)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.Tooled",
			"extends": "",
			"Methods": [
				{
					"signature": "@Toolable\n    @SuppressWarnings(\"unused\")\n    @Inject\n    void method(M m)",
					"documentation": ""
				},
				{
					"signature": "@Toolable\n    @SuppressWarnings(\"unused\")\n    @Inject\n    static void staticMethod(SM sm)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.spi.Toolable"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.S",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.F",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.M",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spi.ToolStageInjectorTest.SM",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.util.NoopOverrideTest",
			"extends": "com.google.inject.spi.ElementsTest",
			"Methods": [
				{
					"signature": "@Override\n  protected void checkModule(Module module, ElementVisitor\u003c?\u003e... visitors)",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author sberlin@gmail.com (Sam Berlin) */",
			"name": "com.google.inject.util.OverrideModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n        public void configure(Binder binder)",
					"documentation": "/** @author sberlin@gmail.com (Sam Berlin) */"
				},
				{
					"signature": "public void testOverride()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideMultiple()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideUnmatchedTolerated()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideConstant()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testGetProviderInModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideWhatGetProviderProvided()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideUsingOriginalsGetProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideOfOverride()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverridesTwiceFails()",
					"documentation": ""
				},
				{
					"signature": "public void testOverridesDoesntFixTwiceBoundInOriginal()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testStandardScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideUntargettedBinding()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testFailsIfOverridenScopeInstanceHasBeenUsed()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideIsLazy()",
					"documentation": ""
				},
				{
					"signature": "public void testOverridePrivateModuleOverPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideModuleAndPrivateModule()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "public void testOverrideDeepExpose()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Module newModule(final T bound)",
					"documentation": ""
				},
				{
					"signature": "public void testExposedBindingOverride() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testPrivateBindingOverride() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsNotCalledByDefaultOnInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsNotCalledByDefaultOnProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testHashcodeNeverCalledOnInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testHashcodeNeverCalledOnProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testCorrectStage()",
					"documentation": ""
				},
				{
					"signature": "public void testOverridesApplyOriginalScanners()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Exposed",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Module",
				"com.google.inject.PrivateModule",
				"com.google.inject.Provides",
				"com.google.inject.Scope",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.util.OverrideModuleTest.OuterReplacementsModule",
				"com.google.inject.util.OverrideModuleTest.InnerReplacementsModule",
				"com.google.inject.util.OverrideModuleTest.SingleUseScope",
				"com.google.inject.util.OverrideModuleTest.NewModule",
				"com.google.inject.util.OverrideModuleTest.ExampleModule",
				"com.google.inject.util.OverrideModuleTest.HashEqualsTester",
				"com.google.inject.util.TestProvides",
				"com.google.inject.util.OverrideModuleTest.NamedMunger"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.util.OverrideModuleTest.OuterReplacementsModule",
				"com.google.inject.util.OverrideModuleTest.InnerReplacementsModule",
				"com.google.inject.util.OverrideModuleTest.TestScopeAnnotation",
				"com.google.inject.util.OverrideModuleTest.SingleUseScope",
				"com.google.inject.util.OverrideModuleTest.NewModule",
				"com.google.inject.util.OverrideModuleTest.ExampleModule",
				"com.google.inject.util.OverrideModuleTest.HashEqualsTester",
				"com.google.inject.util.TestProvides",
				"com.google.inject.util.OverrideModuleTest.NamedMunger"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.OuterReplacementsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.InnerReplacementsModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.TestScopeAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.SingleUseScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(Key\u003cT\u003e key, Provider\u003cT\u003e unscoped)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.NewModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "NewModule(T bound)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.ExampleModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Exposed\n    @Named(RESULT)\n    public String provideResult(@Named(PRIVATE_INPUT) String input)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    @Named(PRIVATE_INPUT)\n    public String provideInput()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Exposed",
				"com.google.inject.Provides",
				"com.google.inject.name.Named"
			],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.HashEqualsTester",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Object get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.TestProvides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.OverrideModuleTest.NamedMunger",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "static Module module()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003c? extends Class\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n        Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule"
			],
			"usedBy": [
				"com.google.inject.util.OverrideModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Unit tests for {@link Providers}.\n *\n * @author Kevin Bourrillion (kevinb9n@gmail.com)\n */",
			"name": "com.google.inject.util.ProvidersTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testOfInstance()",
					"documentation": "/**\n * Unit tests for {@link Providers}.\n *\n * @author Kevin Bourrillion (kevinb9n@gmail.com)\n */"
				},
				{
					"signature": "public void testOfNull()",
					"documentation": ""
				},
				{
					"signature": "public void testOfEquality()",
					"documentation": ""
				},
				{
					"signature": "public void testGuicifyEquality()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.ProvidersTest.JavaxProvider",
				"com.google.inject.util.ProvidersTest.JavaxProviderWithDependencies"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.util.ProvidersTest.JavaxProvider",
				"com.google.inject.util.ProvidersTest.JavaxProviderWithDependencies"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.ProvidersTest.JavaxProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public JavaxProvider(int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Integer get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.ProvidersTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.ProvidersTest.JavaxProviderWithDependencies",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    void setValue(int value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Integer get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.util.ProvidersTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */",
			"name": "com.google.inject.util.TypesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/** @author jessewilson@google.com (Jesse Wilson) */"
				},
				{
					"signature": "public void testListSetMap()",
					"documentation": ""
				},
				{
					"signature": "public void testDefensiveCopies()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeWithOwnerType()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeParametersMustNotBePrimitives()",
					"documentation": ""
				},
				{
					"signature": "public void testWildcardTypes() throws NoSuchFieldException, IOException",
					"documentation": ""
				},
				{
					"signature": "public void testWildcardBoundsMustNotBePrimitives()",
					"documentation": ""
				},
				{
					"signature": "private WildcardType getWildcard(String fieldName) throws NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "public void testEqualsAndHashcode()",
					"documentation": ""
				},
				{
					"signature": "public void testToString()",
					"documentation": ""
				},
				{
					"signature": "public void testCanonicalizeRequiresOwnerTypes()",
					"documentation": "/** Ensure that owning types are required when necessary, and forbidden otherwise. */"
				},
				{
					"signature": "public void testInnerParameterizedEvenWithZeroArgs()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.util.Types",
				"com.google.inject.Asserts"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.util.TypesTest.Owning",
				"com.google.inject.util.Inner",
				"com.google.inject.util.TypesTest.Outer"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.TypesTest.Owning",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Inner",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.TypesTest.Outer",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.util.Inner"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.util.Inner",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This test is in a separate package so we can test package-level visibility with confidence.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.googlecode.guice.BytecodeGenTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": "/**\n * This test is in a separate package so we can test package-level visibility with confidence.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "@Override\n        protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testPackageVisibility()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInterceptedPackageVisibility()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testEnhancerNaming()",
					"documentation": ""
				},
				{
					"signature": "@Before\n  public void setUp() throws Exception",
					"documentation": "/** as loaded by another class loader */"
				},
				{
					"signature": "@Override\n          public void configure()",
					"documentation": "/** as loaded by another class loader */"
				},
				{
					"signature": "@Test\n  public void testProxyClassLoading() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testSystemClassLoaderIsUsedIfProxiedClassUsesIt()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProxyClassUnloading()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProxyingPackagePrivateMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testClassLoaderBridging() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFastClassWithDifferentVersionsOfGuice() throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Module",
				"com.googlecode.guice.BytecodeGenTest.TestVisibilityClassLoader",
				"com.googlecode.guice.BytecodeGenTest.Hidden",
				"com.googlecode.guice.BytecodeGenTest.MultipleVersionsOfGuiceClassLoader",
				"com.googlecode.guice.BytecodeGenTest.LogCreator",
				"com.googlecode.guice.BytecodeGenTest.PublicInject",
				"com.googlecode.guice.BytecodeGenTest.PackagePrivateInject",
				"com.googlecode.guice.BytecodeGenTest.ProtectedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.googlecode.guice.BytecodeGenTest.TestVisibilityClassLoader",
				"com.googlecode.guice.ProxyTest",
				"com.googlecode.guice.BytecodeGenTest.ProxyTestImpl",
				"com.googlecode.guice.BytecodeGenTest.PackageClassPackageMethod",
				"com.googlecode.guice.BytecodeGenTest.PublicClassPackageMethod",
				"com.googlecode.guice.BytecodeGenTest.ProtectedClassProtectedMethod",
				"com.googlecode.guice.BytecodeGenTest.Hidden",
				"com.googlecode.guice.BytecodeGenTest.HiddenMethodReturn",
				"com.googlecode.guice.BytecodeGenTest.HiddenMethodParameter",
				"com.googlecode.guice.BytecodeGenTest.MultipleVersionsOfGuiceClassLoader",
				"com.googlecode.guice.BytecodeGenTest.LogCreator",
				"com.googlecode.guice.BytecodeGenTest.PublicInject",
				"com.googlecode.guice.BytecodeGenTest.PackagePrivateInject",
				"com.googlecode.guice.BytecodeGenTest.ProtectedInject",
				"com.googlecode.guice.BytecodeGenTest.PrivateInject"
			]
		},
		{
			"documentation": "/** Custom URL classloader with basic visibility rules */",
			"name": "com.googlecode.guice.BytecodeGenTest.TestVisibilityClassLoader",
			"extends": "java.net.URLClassLoader",
			"Methods": [
				{
					"signature": "TestVisibilityClassLoader(boolean hideInternals)",
					"documentation": "/** Custom URL classloader with basic visibility rules */"
				},
				{
					"signature": "TestVisibilityClassLoader(ClassLoader classloader, boolean hideInternals)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Class\u003c?\u003e loadClass(final String name, final boolean resolve)\n        throws ClassNotFoundException",
					"documentation": "/**\n     * Classic parent-delegating classloaders are meant to override findClass. However,\n     * non-delegating classloaders (as used in OSGi) instead override loadClass to provide support\n     * for \"class-space\" separation.\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.ProxyTest",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.BytecodeGenTest.ProxyTestImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Note: this class must be marked as public or protected so that the Guice custom classloader\n   * will intercept it. Private and implementation classes are not intercepted by the custom\n   * classloader.\n   */",
			"name": "com.googlecode.guice.BytecodeGenTest.ProxyTestImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "static",
					"documentation": "/**\n   * Note: this class must be marked as public or protected so that the Guice custom classloader\n   * will intercept it. Private and implementation classes are not intercepted by the custom\n   * classloader.\n   */"
				},
				{
					"signature": "@Override\n    public String sayHello()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.ProxyTest"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.PackageClassPackageMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "String sayHi()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.PublicClassPackageMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "String sayHi()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.ProtectedClassProtectedMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "protected String sayHi()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.Hidden",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.HiddenMethodReturn",
			"extends": "",
			"Methods": [
				{
					"signature": "public Hidden method()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.HiddenMethodParameter",
			"extends": "",
			"Methods": [
				{
					"signature": "public void method(Hidden h)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.MultipleVersionsOfGuiceClassLoader",
			"extends": "java.net.URLClassLoader",
			"Methods": [
				{
					"signature": "MultipleVersionsOfGuiceClassLoader()",
					"documentation": ""
				},
				{
					"signature": "MultipleVersionsOfGuiceClassLoader(ClassLoader classloader)",
					"documentation": ""
				},
				{
					"signature": "public Class\u003c? extends LogCreator\u003e loadLogCreatorType(Class\u003c? extends LogCreator\u003e cls)\n        throws ClassNotFoundException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Class\u003c?\u003e loadClass(final String name, final boolean resolve)\n        throws ClassNotFoundException",
					"documentation": "/**\n     * Classic parent-delegating classloaders are meant to override findClass. However,\n     * non-delegating classloaders (as used in OSGi) instead override loadClass to provide support\n     * for \"class-space\" separation.\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.LogCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "public LogCreator()",
					"documentation": ""
				},
				{
					"signature": "void assertIsFastClassInvoked() throws Throwable",
					"documentation": ""
				},
				{
					"signature": "void assertIsReflectionInvoked() throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.googlecode.guice.BytecodeGenTest.PublicInject",
				"com.googlecode.guice.BytecodeGenTest.PackagePrivateInject",
				"com.googlecode.guice.BytecodeGenTest.ProtectedInject",
				"com.googlecode.guice.BytecodeGenTest.PrivateInject"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.PublicInject",
			"extends": "com.googlecode.guice.BytecodeGenTest.LogCreator",
			"Methods": [
				{
					"signature": "@Inject\n    public PublicInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.PackagePrivateInject",
			"extends": "com.googlecode.guice.BytecodeGenTest.LogCreator",
			"Methods": [
				{
					"signature": "@Inject\n    PackagePrivateInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.ProtectedInject",
			"extends": "com.googlecode.guice.BytecodeGenTest.LogCreator",
			"Methods": [
				{
					"signature": "@Inject\n    protected ProtectedInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.BytecodeGenTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.BytecodeGenTest.PrivateInject",
			"extends": "com.googlecode.guice.BytecodeGenTest.LogCreator",
			"Methods": [
				{
					"signature": "@Inject\n    private PrivateInject()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.GuiceTck",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testInject()",
					"documentation": ""
				},
				{
					"signature": "public void testQualifiedInject()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderInject()",
					"documentation": ""
				},
				{
					"signature": "public void testScopeAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testEagerSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testScopesIsSingleton()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingFinalFieldsIsForbidden()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingAbstractMethodsIsForbidden()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingMethodsWithTypeParametersIsForbidden()",
					"documentation": ""
				},
				{
					"signature": "public void testInjectingMethodsWithNonVoidReturnTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testBindProviderClass()",
					"documentation": "/**\n   * This test verifies that we can compile bindings to provider instances whose compile-time type\n   * implements javax.inject.Provider but not com.google.inject.Provider. For binary compatibility,\n   * we don't (and won't) support binding to instances of javax.inject.Provider.\n   */"
				},
				{
					"signature": "public void testGuicify330Provider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String toString()",
					"documentation": ""
				},
				{
					"signature": "public void testGuicifyWithDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n          void injectMe(int i)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String get()",
					"documentation": ""
				},
				{
					"signature": "private void validateDependencies(Set\u003cDependency\u003c?\u003e\u003e actual, Class\u003c?\u003e owner)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.name.Names",
				"com.google.inject.util.Providers",
				"com.google.inject.Asserts",
				"com.googlecode.guice.Jsr330Test.A",
				"com.googlecode.guice.Jsr330Test.B",
				"com.googlecode.guice.Jsr330Test.C",
				"com.googlecode.guice.Jsr330Test.D",
				"com.googlecode.guice.Jsr330Test.E",
				"com.googlecode.guice.Jsr330Test.F",
				"com.googlecode.guice.Jsr330Test.G",
				"com.googlecode.guice.TestScoped",
				"com.googlecode.guice.Jsr330Test.TestScope"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.googlecode.guice.Jsr330Test.A",
				"com.googlecode.guice.Jsr330Test.B",
				"com.googlecode.guice.Jsr330Test.C",
				"com.googlecode.guice.Jsr330Test.D",
				"com.googlecode.guice.Jsr330Test.E",
				"com.googlecode.guice.Jsr330Test.F",
				"com.googlecode.guice.Red",
				"com.googlecode.guice.Jsr330Test.G",
				"com.googlecode.guice.TestScoped",
				"com.googlecode.guice.Jsr330Test.TestScope",
				"com.googlecode.guice.Jsr330Test.H",
				"com.googlecode.guice.Jsr330Test.J",
				"com.googlecode.guice.Jsr330Test.K",
				"com.googlecode.guice.Jsr330Test.L",
				"com.googlecode.guice.Jsr330Test.AbstractM",
				"com.googlecode.guice.Jsr330Test.M",
				"com.googlecode.guice.Jsr330Test.N",
				"com.googlecode.guice.Jsr330Test.P",
				"com.googlecode.guice.Jsr330Test.BProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    A(B b)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void injectD(D d, E e)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.F",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    F(@Named(\"jodie\") B b)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void injectD(@Red D d, @Named(\"jesse\") E e)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Red",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.G",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    G(@Named(\"jodie\") Provider\u003cB\u003e bProvider)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void injectD(@Red Provider\u003cD\u003e dProvider, Provider\u003cE\u003e eProvider)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.TestScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test",
				"com.googlecode.guice.Jsr330Test.H"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.TestScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e com.google.inject.Provider\u003cT\u003e scope(\n        Key\u003cT\u003e key, final com.google.inject.Provider\u003cT\u003e unscoped)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public T get()",
					"documentation": ""
				},
				{
					"signature": "public void reset()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.Jsr330Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.H",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.googlecode.guice.TestScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.J",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.K",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.L",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.AbstractM",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.googlecode.guice.Jsr330Test.M"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.M",
			"extends": "com.googlecode.guice.Jsr330Test.AbstractM",
			"Methods": [
				{
					"signature": "@Override\n    @SuppressWarnings(\"OverridesJavaxInjectableMethod\")\n    void setB(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.N",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    \u003cT\u003e void setB(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.P",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    B setB(B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.Jsr330Test.BProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public B get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Run various tests inside one or more OSGi containers.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.googlecode.guice.OSGiContainerTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Before\n  public void setUp() throws Exception",
					"documentation": "/**\n * Run various tests inside one or more OSGi containers.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */"
				},
				{
					"signature": "private static void buildBundle(String name, Properties instructions, String classpath)\n      throws IOException",
					"documentation": ""
				},
				{
					"signature": "private String failMsg()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGuiceWorksInOSGiContainer() throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.PackageVisibilityTestModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.googlecode.guice.PackageVisibilityTestModule.PublicUserOfPackagePrivate"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.googlecode.guice.PackageVisibilityTestModule.PublicUserOfPackagePrivate",
				"com.googlecode.guice.PackagePrivateInterface",
				"com.googlecode.guice.PackageVisibilityTestModule.PackagePrivateImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.PackageVisibilityTestModule.PublicUserOfPackagePrivate",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public PublicUserOfPackagePrivate(PackagePrivateInterface ppi)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void acceptPackagePrivateParameter(PackagePrivateInterface ppi)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.PackageVisibilityTestModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.PackagePrivateInterface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.PackageVisibilityTestModule.PackagePrivateImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.PackageVisibilityTestModule.PackagePrivateImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.googlecode.guice.PackagePrivateInterface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test Guice from inside an OSGi bundle activator.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator",
			"extends": "",
			"Methods": [
				{
					"signature": "static final Class\u003c?\u003e[] TEST_CLAZZES =",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void start(BundleContext context) throws BundleException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void stop(BundleContext context)",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.osgi.framework.BundleActivator"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.matcher.AbstractMatcher",
				"com.google.inject.name.Names",
				"com.googlecode.guice.bundle.OSGiTestActivator.AA",
				"com.googlecode.guice.bundle.OSGiTestActivator.AB",
				"com.googlecode.guice.bundle.OSGiTestActivator.AC",
				"com.googlecode.guice.bundle.OSGiTestActivator.AD",
				"com.googlecode.guice.bundle.OSGiTestActivator.BA",
				"com.googlecode.guice.bundle.OSGiTestActivator.BB",
				"com.googlecode.guice.bundle.OSGiTestActivator.BC",
				"com.googlecode.guice.bundle.OSGiTestActivator.BD",
				"com.googlecode.guice.bundle.OSGiTestActivator.CA",
				"com.googlecode.guice.bundle.OSGiTestActivator.CB",
				"com.googlecode.guice.bundle.OSGiTestActivator.CC",
				"com.googlecode.guice.bundle.OSGiTestActivator.CD",
				"com.googlecode.guice.bundle.OSGiTestActivator.DA",
				"com.googlecode.guice.bundle.OSGiTestActivator.DB",
				"com.googlecode.guice.bundle.OSGiTestActivator.DC",
				"com.googlecode.guice.bundle.OSGiTestActivator.DD",
				"com.googlecode.guice.bundle.OSGiTestActivator.TestModule",
				"com.googlecode.guice.bundle.OSGiTestActivator.InterceptorModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.googlecode.guice.bundle.OSGiTestActivator.Undefined",
				"com.googlecode.guice.bundle.A",
				"com.googlecode.guice.bundle.B",
				"com.googlecode.guice.bundle.C",
				"com.googlecode.guice.bundle.D",
				"com.googlecode.guice.bundle.OSGiTestActivator.AA",
				"com.googlecode.guice.bundle.OSGiTestActivator.AB",
				"com.googlecode.guice.bundle.OSGiTestActivator.AC",
				"com.googlecode.guice.bundle.OSGiTestActivator.AD",
				"com.googlecode.guice.bundle.OSGiTestActivator.BA",
				"com.googlecode.guice.bundle.OSGiTestActivator.BB",
				"com.googlecode.guice.bundle.OSGiTestActivator.BC",
				"com.googlecode.guice.bundle.OSGiTestActivator.BD",
				"com.googlecode.guice.bundle.OSGiTestActivator.CA",
				"com.googlecode.guice.bundle.OSGiTestActivator.CB",
				"com.googlecode.guice.bundle.OSGiTestActivator.CC",
				"com.googlecode.guice.bundle.OSGiTestActivator.CD",
				"com.googlecode.guice.bundle.OSGiTestActivator.DA",
				"com.googlecode.guice.bundle.OSGiTestActivator.DB",
				"com.googlecode.guice.bundle.OSGiTestActivator.DC",
				"com.googlecode.guice.bundle.OSGiTestActivator.DD",
				"com.googlecode.guice.bundle.Visibility",
				"com.googlecode.guice.bundle.OSGiTestActivator.TestModule",
				"com.googlecode.guice.bundle.OSGiTestActivator.InterceptorModule"
			]
		},
		{
			"documentation": "/**\n * Test Guice from inside an OSGi bundle activator.\n *\n * @author mcculls@gmail.com (Stuart McCulloch)\n */",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.Undefined",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator.AA",
				"com.googlecode.guice.bundle.OSGiTestActivator.AB",
				"com.googlecode.guice.bundle.OSGiTestActivator.AC",
				"com.googlecode.guice.bundle.OSGiTestActivator.AD"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator.BA",
				"com.googlecode.guice.bundle.OSGiTestActivator.BB",
				"com.googlecode.guice.bundle.OSGiTestActivator.BC",
				"com.googlecode.guice.bundle.OSGiTestActivator.BD"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator.CA",
				"com.googlecode.guice.bundle.OSGiTestActivator.CB",
				"com.googlecode.guice.bundle.OSGiTestActivator.CC",
				"com.googlecode.guice.bundle.OSGiTestActivator.CD"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator.DA",
				"com.googlecode.guice.bundle.OSGiTestActivator.DB",
				"com.googlecode.guice.bundle.OSGiTestActivator.DC",
				"com.googlecode.guice.bundle.OSGiTestActivator.DD"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.AA",
			"extends": "",
			"Methods": [
				{
					"signature": "public AA()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.AB",
			"extends": "",
			"Methods": [
				{
					"signature": "public AB()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.AC",
			"extends": "",
			"Methods": [
				{
					"signature": "public AC()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.AD",
			"extends": "",
			"Methods": [
				{
					"signature": "public AD()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.A"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.BA",
			"extends": "",
			"Methods": [
				{
					"signature": "protected BA()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.BB",
			"extends": "",
			"Methods": [
				{
					"signature": "protected BB()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.BC",
			"extends": "",
			"Methods": [
				{
					"signature": "protected BC()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.BD",
			"extends": "",
			"Methods": [
				{
					"signature": "protected BD()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.B"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.CA",
			"extends": "",
			"Methods": [
				{
					"signature": "CA()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.C"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.CB",
			"extends": "",
			"Methods": [
				{
					"signature": "CB()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.C"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.CC",
			"extends": "",
			"Methods": [
				{
					"signature": "CC()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.C"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.CD",
			"extends": "",
			"Methods": [
				{
					"signature": "CD()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.C"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.DA",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    private DA()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.DB",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    private DB()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.DC",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    private DC()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.DD",
			"extends": "",
			"Methods": [
				{
					"signature": "private DD()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public void setA(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    protected void setB(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setC(Undefined undefined)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    private void setD(Undefined undefined)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.googlecode.guice.bundle.D"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.Visibility",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.TestModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "TestModule(Bundle bundle)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.googlecode.guice.bundle.OSGiTestActivator.InterceptorModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.AbstractMatcher"
			],
			"usedBy": [
				"com.googlecode.guice.bundle.OSGiTestActivator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Hello world, Guice! */",
			"name": "com.example.App",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  App(Printer printer, @Message String message)",
					"documentation": ""
				},
				{
					"signature": "public void run()",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void printMessage(String message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.example.Message",
				"com.example.App.MessageModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.example.Message",
				"com.example.App.MessageModule"
			]
		},
		{
			"documentation": "/** Hello world, Guice! */",
			"name": "com.example.Message",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.example.App",
				"com.example.App.MessageModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.example.App.MessageModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    @Message\n    String provideMessage()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.example.Message"
			],
			"usedBy": [
				"com.example.App"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Interface for printing messages. */",
			"name": "com.example.Printer",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Unit test for simple App. */",
			"name": "com.example.AppTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public void printMessage(String message)",
					"documentation": "/** Unit test for simple App. */"
				},
				{
					"signature": "@Before\n  public void setUp()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void run_printsMessage()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.testing.fieldbinder.Bind"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates an injected parameter or field whose value comes from an argument to a factory method.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.Assisted",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Internal respresentation of a constructor annotated with {@link AssistedInject}\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.AssistedConstructor",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cT\u003e AssistedConstructor\u003cT\u003e create(\n      Constructor\u003cT\u003e constructor, List\u003cTypeLiteral\u003c?\u003e\u003e parameterTypes)",
					"documentation": "/**\n * Internal respresentation of a constructor annotated with {@link AssistedInject}\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "private AssistedConstructor(Constructor\u003cT\u003e constructor, List\u003cTypeLiteral\u003c?\u003e\u003e parameterTypes)",
					"documentation": ""
				},
				{
					"signature": "public ParameterListKey getAssistedParameters()",
					"documentation": "/**\n   * Returns the {@link ParameterListKey} for this constructor. The {@link ParameterListKey} is\n   * created from the ordered list of {@link Assisted} constructor parameters.\n   */"
				},
				{
					"signature": "public List\u003cParameter\u003e getAllParameters()",
					"documentation": "/**\n   * Returns an ordered list of all constructor parameters (both {@link Assisted} and {@link\n   * Inject}ed).\n   */"
				},
				{
					"signature": "public Set\u003cClass\u003c?\u003e\u003e getDeclaredExceptions()",
					"documentation": ""
				},
				{
					"signature": "public T newInstance(Object[] args) throws Throwable",
					"documentation": "/** Returns an instance of T, constructed using this constructor, with the supplied arguments. */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * When used in tandem with {@link FactoryModuleBuilder}, constructors annotated with\n * {@code @AssistedInject} indicate that multiple constructors can be injected, each with different\n * parameters. AssistedInject annotations should not be mixed with {@literal @}{@link Inject}\n * annotations. The assisted parameters must exactly match one corresponding factory method within\n * the factory interface, but the parameters do not need to be in the same order. Constructors\n * annotated with AssistedInject \u003cb\u003eare\u003c/b\u003e created by Guice and receive all the benefits (such as\n * AOP).\n *\n * \u003cp\u003e\u003cstrong\u003eObsolete Usage:\u003c/strong\u003e When used in tandem with {@link FactoryProvider},\n * constructors annotated with {@code @AssistedInject} trigger a \"backwards compatibility mode\". The\n * assisted parameters must exactly match one corresponding factory method within the factory\n * interface and all must be in the same order as listed in the factory. In this backwards\n * compatable mode, constructors annotated with AssistedInject \u003cb\u003eare not\u003c/b\u003e created by Guice and\n * thus receive none of the benefits.\n *\n * \u003cp\u003eConstructor parameters must be either supplied by the factory interface and marked with \u003ccode\u003e\n * {@literal @}Assisted\u003c/code\u003e, or they must be injectable.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.AssistedInject",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.assistedinject.ExtensionSpiTest",
				"com.google.inject.assistedinject.ExtensionSpiTest.StrangeCat",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat",
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.FactoryProvider2Test.Public",
				"com.google.inject.assistedinject.FactoryProviderTest",
				"com.google.inject.assistedinject.FactoryProviderTest.Mustang",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.FactoryProviderTest.Corvette",
				"com.google.inject.assistedinject.FactoryProviderTest.Beetle",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.FactoryProviderTest.Firebird",
				"com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
				"com.google.inject.assistedinject.FactoryProviderTest.Z",
				"com.google.inject.assistedinject.FactoryProviderTest.Prius",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.WildcardCollection",
				"com.google.inject.assistedinject.FactoryProviderTest.Fiat",
				"com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance",
				"com.google.inject.assistedinject.ManyConstructorsTest",
				"com.google.inject.assistedinject.ManyConstructorsTest.TooManyMatches",
				"com.google.inject.assistedinject.ManyConstructorsTest.Foo",
				"com.google.inject.assistedinject.ManyConstructorsTest.Farm",
				"com.google.inject.assistedinject.subpkg.SubpackageTest",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.Public"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.Equals",
				"com.google.inject.assistedinject.Equals.Impl"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding for a factory created by FactoryModuleBuilder.\n *\n * @param \u003cT\u003e The fully qualified type of the factory.\n * @since 3.0\n * @author ramakrishna@google.com (Ramakrishna Rajanna)\n */",
			"name": "com.google.inject.assistedinject.AssistedInjectBinding",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A visitor for the AssistedInject extension.\n *\n * \u003cp\u003eIf your {@link BindingTargetVisitor} implements this interface, bindings created by using\n * {@link FactoryModuleBuilder} will be visited through this interface.\n *\n * @since 3.0\n * @author ramakrishna@google.com (Ramakrishna Rajanna)\n */",
			"name": "com.google.inject.assistedinject.AssistedInjectTargetVisitor",
			"extends": "com.google.inject.spi.BindingTargetVisitor",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.ExtensionSpiTest.AssistedInjectSpiVisitor"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Details about how a method in an assisted inject factory will be assisted.\n *\n * @since 3.0\n * @author ramakrishna@google.com (Ramakrishna Rajanna)\n */",
			"name": "com.google.inject.assistedinject.AssistedMethod",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryProvider2.AssistData"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility class for collecting factory bindings. Used for configuring {@link FactoryProvider2}.\n *\n * @author schmitt@google.com (Peter Schmitt)\n */",
			"name": "com.google.inject.assistedinject.BindingCollector",
			"extends": "",
			"Methods": [
				{
					"signature": "public BindingCollector addBinding(Key\u003c?\u003e key, TypeLiteral\u003c?\u003e target)",
					"documentation": "/**\n * Utility class for collecting factory bindings. Used for configuring {@link FactoryProvider2}.\n *\n * @author schmitt@google.com (Peter Schmitt)\n */"
				},
				{
					"signature": "public Map\u003cKey\u003c?\u003e, TypeLiteral\u003c?\u003e\u003e getBindings()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.spi.Message"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Provides a factory that combines the caller's arguments with injector-supplied values to\n * construct objects.\n *\n * \u003ch3\u003eDefining a factory\u003c/h3\u003e\n *\n * Create an interface whose methods return the constructed type, or any of its supertypes. The\n * method's parameters are the arguments required to build the constructed type.\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(Date startDate, Money amount);\n * }\u003c/pre\u003e\n *\n * You can name your factory methods whatever you like, such as \u003ci\u003ecreate\u003c/i\u003e, \u003ci\u003ecreatePayment\u003c/i\u003e\n * or \u003ci\u003enewPayment\u003c/i\u003e.\n *\n * \u003ch3\u003eCreating a type that accepts factory parameters\u003c/h3\u003e\n *\n * {@code constructedType} is a concrete class with an {@literal @}{@link com.google.inject.Inject\n * Inject}-annotated constructor. In addition to injector-supplied parameters, the constructor\n * should have parameters that match each of the factory method's parameters. Each factory-supplied\n * parameter requires an {@literal @}{@link Assisted} annotation. This serves to document that the\n * parameter is not bound by your application's modules.\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted Date startDate\u003c/strong\u003e,\n *      \u003cstrong\u003e{@literal @}Assisted Money amount\u003c/strong\u003e) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eMultiple factory methods for the same type\u003c/h3\u003e\n *\n * If the factory contains many methods that return the same type, you can create multiple\n * constructors in your concrete class, each constructor marked with with {@literal @}{@link\n * AssistedInject}, in order to match the different parameters types of the factory methods.\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *    Payment create(Date startDate, Money amount);\n *    Payment createWithoutDate(Money amount);\n * }\n *\n * public class RealPayment implements Payment {\n *  {@literal @}AssistedInject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *     \u003cstrong\u003e{@literal @}Assisted Date startDate\u003c/strong\u003e,\n *     \u003cstrong\u003e{@literal @}Assisted Money amount\u003c/strong\u003e) {\n *     ...\n *   }\n *\n *  {@literal @}AssistedInject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *     \u003cstrong\u003e{@literal @}Assisted Money amount\u003c/strong\u003e) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eConfiguring simple factories\u003c/h3\u003e\n *\n * In your {@link Module module}, install a {@code FactoryModuleBuilder} that creates the factory:\n *\n * \u003cpre\u003einstall(new FactoryModuleBuilder()\n *     .implement(Payment.class, RealPayment.class)\n *     .build(PaymentFactory.class));\u003c/pre\u003e\n *\n * As a side-effect of this binding, Guice will inject the factory to initialize it for use. The\n * factory cannot be used until the injector has been initialized.\n *\n * \u003ch3\u003eConfiguring complex factories\u003c/h3\u003e\n *\n * Factories can create an arbitrary number of objects, one per each method. Each factory method can\n * be configured using \u003ccode\u003e.implement\u003c/code\u003e.\n *\n * \u003cpre\u003epublic interface OrderFactory {\n *    Payment create(Date startDate, Money amount);\n *    Shipment create(Customer customer, Item item);\n *    Receipt create(Payment payment, Shipment shipment);\n * }\n *\n * [...]\n *\n * install(new FactoryModuleBuilder()\n *     .implement(Payment.class, RealPayment.class)\n *     // excluding .implement for Shipment means the implementation class\n *     // will be 'Shipment' itself, which is legal if it's not an interface.\n *     .implement(Receipt.class, RealReceipt.class)\n *     .build(OrderFactory.class));\n *\n * \u003c/pre\u003e\n *\n * \u003ch3\u003eUsing the factory\u003c/h3\u003e\n *\n * Inject your factory into your application classes. When you use the factory, your arguments will\n * be combined with values from the injector to construct an instance.\n *\n * \u003cpre\u003epublic class PaymentAction {\n *   {@literal @}Inject private PaymentFactory paymentFactory;\n *\n *   public void doPayment(Money amount) {\n *     Payment payment = paymentFactory.create(new Date(), amount);\n *     payment.apply();\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eMaking parameter types distinct\u003c/h3\u003e\n *\n * The types of the factory method's parameters must be distinct. To use multiple parameters of the\n * same type, use a named {@literal @}{@link Assisted} annotation to disambiguate the parameters.\n * The names must be applied to the factory method's parameters:\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(\n *       \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *       \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *       Money amount);\n * } \u003c/pre\u003e\n *\n * ...and to the concrete type's constructor parameters:\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *      \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *      \u003cstrong\u003e{@literal @}Assisted\u003c/strong\u003e Money amount) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eValues are created by Guice\u003c/h3\u003e\n *\n * Returned factories use child injectors to create values. The values are eligible for method\n * interception. In addition, {@literal @}{@literal Inject} members will be injected before they are\n * returned.\n *\n * \u003ch3\u003eMore configuration options\u003c/h3\u003e\n *\n * In addition to simply specifying an implementation class for any returned type, factories' return\n * values can be automatic or can be configured to use annotations:\n *\n * \u003cp\u003eIf you just want to return the types specified in the factory, do not configure any\n * implementations:\n *\n * \u003cpre\u003epublic interface FruitFactory {\n *   Apple getApple(Color color);\n * }\n * ...\n * protected void configure() {\n *   install(new FactoryModuleBuilder().build(FruitFactory.class));\n * }\u003c/pre\u003e\n *\n * Note that any type returned by the factory in this manner needs to be an implementation class.\n *\n * \u003cp\u003eTo return two different implementations for the same interface from your factory, use binding\n * annotations on your return types:\n *\n * \u003cpre\u003einterface CarFactory {\n *   {@literal @}Named(\"fast\") Car getFastCar(Color color);\n *   {@literal @}Named(\"clean\") Car getCleanCar(Color color);\n * }\n * ...\n * protected void configure() {\n *   install(new FactoryModuleBuilder()\n *       .implement(Car.class, Names.named(\"fast\"), Porsche.class)\n *       .implement(Car.class, Names.named(\"clean\"), Prius.class)\n *       .build(CarFactory.class));\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eImplementation limitations\u003c/h3\u003e\n *\n * As a limitation of the implementation, it is prohibited to declare a factory method that accepts\n * a {@code Provider} as one of its arguments.\n *\n * @since 3.0\n * @author schmitt@google.com (Peter Schmitt)\n */",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(Class\u003cT\u003e source, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(Class\u003cT\u003e source, TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(TypeLiteral\u003cT\u003e source, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      TypeLiteral\u003cT\u003e source, TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      Class\u003cT\u003e source, Annotation annotation, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      Class\u003cT\u003e source, Annotation annotation, TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      TypeLiteral\u003cT\u003e source, Annotation annotation, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      TypeLiteral\u003cT\u003e source, Annotation annotation, TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      Class\u003cT\u003e source, Class\u003c? extends Annotation\u003e annotationType, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      Class\u003cT\u003e source,\n      Class\u003c? extends Annotation\u003e annotationType,\n      TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      TypeLiteral\u003cT\u003e source,\n      Class\u003c? extends Annotation\u003e annotationType,\n      Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(\n      TypeLiteral\u003cT\u003e source,\n      Class\u003c? extends Annotation\u003e annotationType,\n      TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(Key\u003cT\u003e source, Class\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder implement(Key\u003cT\u003e source, TypeLiteral\u003c? extends T\u003e target)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cT\u003e FactoryModuleBuilder withLookups(MethodHandles.Lookup lookups)",
					"documentation": "/**\n   * Typically called via {@code withLookups(MethodHandles.lookup())}. Sets the MethodHandles.Lookup\n   * that the factory implementation will use to call default methods on the factory interface.\n   * While this is not always required, it is always OK to set it. It is required if the factory\n   * passed to {@link #build} is non-public and javac generated default methods while compiling it\n   * (which javac can sometimes do if the factory uses generic types).\n   *\n   * \u003cp\u003eGuice will try to work properly even if this method is not called (or called with a lookups\n   * that doesn't have access to the factory), but doing so requires reflection into the JDK, which\n   * may break at any time (and trigger unsafe access warnings).\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "public \u003cF\u003e Module build(Class\u003cF\u003e factoryInterface)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cF\u003e Module build(TypeLiteral\u003cF\u003e factoryInterface)",
					"documentation": "/** See the factory configuration examples at {@link FactoryModuleBuilder}. */"
				},
				{
					"signature": "public \u003cF\u003e Module build(final Key\u003cF\u003e factoryInterface)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.TypeLiteral"
			],
			"usedBy": [
				"com.google.inject.grapher.demo.AssistedInjectModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * \u003cstrong\u003eObsolete.\u003c/strong\u003e Prefer {@link FactoryModuleBuilder} for its more concise API and\n * additional capability.\n *\n * \u003cp\u003eProvides a factory that combines the caller's arguments with injector-supplied values to\n * construct objects.\n *\n * \u003ch3\u003eDefining a factory\u003c/h3\u003e\n *\n * Create an interface whose methods return the constructed type, or any of its supertypes. The\n * method's parameters are the arguments required to build the constructed type.\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(Date startDate, Money amount);\n * }\u003c/pre\u003e\n *\n * You can name your factory methods whatever you like, such as \u003ci\u003ecreate\u003c/i\u003e, \u003ci\u003ecreatePayment\u003c/i\u003e\n * or \u003ci\u003enewPayment\u003c/i\u003e.\n *\n * \u003ch3\u003eCreating a type that accepts factory parameters\u003c/h3\u003e\n *\n * {@code constructedType} is a concrete class with an {@literal @}{@link Inject}-annotated\n * constructor. In addition to injector-supplied parameters, the constructor should have parameters\n * that match each of the factory method's parameters. Each factory-supplied parameter requires an\n * {@literal @}{@link Assisted} annotation. This serves to document that the parameter is not bound\n * by your application's modules.\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted Date startDate\u003c/strong\u003e,\n *      \u003cstrong\u003e{@literal @}Assisted Money amount\u003c/strong\u003e) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * Any parameter that permits a null value should also be annotated {@code @Nullable}.\n *\n * \u003ch3\u003eConfiguring factories\u003c/h3\u003e\n *\n * In your {@link com.google.inject.Module module}, bind the factory interface to the returned\n * factory:\n *\n * \u003cpre\u003ebind(PaymentFactory.class).toProvider(\n *     FactoryProvider.newFactory(PaymentFactory.class, RealPayment.class));\u003c/pre\u003e\n *\n * As a side-effect of this binding, Guice will inject the factory to initialize it for use. The\n * factory cannot be used until the injector has been initialized.\n *\n * \u003ch3\u003eUsing the factory\u003c/h3\u003e\n *\n * Inject your factory into your application classes. When you use the factory, your arguments will\n * be combined with values from the injector to construct an instance.\n *\n * \u003cpre\u003epublic class PaymentAction {\n *   {@literal @}Inject private PaymentFactory paymentFactory;\n *\n *   public void doPayment(Money amount) {\n *     Payment payment = paymentFactory.create(new Date(), amount);\n *     payment.apply();\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eMaking parameter types distinct\u003c/h3\u003e\n *\n * The types of the factory method's parameters must be distinct. To use multiple parameters of the\n * same type, use a named {@literal @}{@link Assisted} annotation to disambiguate the parameters.\n * The names must be applied to the factory method's parameters:\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(\n *       \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *       \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *       Money amount);\n * } \u003c/pre\u003e\n *\n * ...and to the concrete type's constructor parameters:\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *      \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *      \u003cstrong\u003e{@literal @}Assisted\u003c/strong\u003e Money amount) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eValues are created by Guice\u003c/h3\u003e\n *\n * Returned factories use child injectors to create values. The values are eligible for method\n * interception. In addition, {@literal @}{@literal Inject} members will be injected before they are\n * returned.\n *\n * \u003ch3\u003eBackwards compatibility using {@literal @}AssistedInject\u003c/h3\u003e\n *\n * Instead of the {@literal @}Inject annotation, you may annotate the constructed classes with\n * {@literal @}{@link AssistedInject}. This triggers a limited backwards-compatability mode.\n *\n * \u003cp\u003eInstead of matching factory method arguments to constructor parameters using their names, the\n * \u003cstrong\u003eparameters are matched by their order\u003c/strong\u003e. The first factory method argument is used\n * for the first {@literal @}Assisted constructor parameter, etc.. Annotation names have no effect.\n *\n * \u003cp\u003eReturned values are \u003cstrong\u003enot created by Guice\u003c/strong\u003e. These types are not eligible for\n * method interception. They do receive post-construction member injection.\n *\n * @param \u003cF\u003e The factory interface\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author dtm@google.com (Daniel Martin)\n * @deprecated use {@link FactoryModuleBuilder} instead.\n */",
			"name": "com.google.inject.assistedinject.FactoryProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public static \u003cF\u003e Provider\u003cF\u003e newFactory(Class\u003cF\u003e factoryType, Class\u003c?\u003e implementationType)",
					"documentation": "/**\n * \u003cstrong\u003eObsolete.\u003c/strong\u003e Prefer {@link FactoryModuleBuilder} for its more concise API and\n * additional capability.\n *\n * \u003cp\u003eProvides a factory that combines the caller's arguments with injector-supplied values to\n * construct objects.\n *\n * \u003ch3\u003eDefining a factory\u003c/h3\u003e\n *\n * Create an interface whose methods return the constructed type, or any of its supertypes. The\n * method's parameters are the arguments required to build the constructed type.\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(Date startDate, Money amount);\n * }\u003c/pre\u003e\n *\n * You can name your factory methods whatever you like, such as \u003ci\u003ecreate\u003c/i\u003e, \u003ci\u003ecreatePayment\u003c/i\u003e\n * or \u003ci\u003enewPayment\u003c/i\u003e.\n *\n * \u003ch3\u003eCreating a type that accepts factory parameters\u003c/h3\u003e\n *\n * {@code constructedType} is a concrete class with an {@literal @}{@link Inject}-annotated\n * constructor. In addition to injector-supplied parameters, the constructor should have parameters\n * that match each of the factory method's parameters. Each factory-supplied parameter requires an\n * {@literal @}{@link Assisted} annotation. This serves to document that the parameter is not bound\n * by your application's modules.\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted Date startDate\u003c/strong\u003e,\n *      \u003cstrong\u003e{@literal @}Assisted Money amount\u003c/strong\u003e) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * Any parameter that permits a null value should also be annotated {@code @Nullable}.\n *\n * \u003ch3\u003eConfiguring factories\u003c/h3\u003e\n *\n * In your {@link com.google.inject.Module module}, bind the factory interface to the returned\n * factory:\n *\n * \u003cpre\u003ebind(PaymentFactory.class).toProvider(\n *     FactoryProvider.newFactory(PaymentFactory.class, RealPayment.class));\u003c/pre\u003e\n *\n * As a side-effect of this binding, Guice will inject the factory to initialize it for use. The\n * factory cannot be used until the injector has been initialized.\n *\n * \u003ch3\u003eUsing the factory\u003c/h3\u003e\n *\n * Inject your factory into your application classes. When you use the factory, your arguments will\n * be combined with values from the injector to construct an instance.\n *\n * \u003cpre\u003epublic class PaymentAction {\n *   {@literal @}Inject private PaymentFactory paymentFactory;\n *\n *   public void doPayment(Money amount) {\n *     Payment payment = paymentFactory.create(new Date(), amount);\n *     payment.apply();\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eMaking parameter types distinct\u003c/h3\u003e\n *\n * The types of the factory method's parameters must be distinct. To use multiple parameters of the\n * same type, use a named {@literal @}{@link Assisted} annotation to disambiguate the parameters.\n * The names must be applied to the factory method's parameters:\n *\n * \u003cpre\u003epublic interface PaymentFactory {\n *   Payment create(\n *       \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *       \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *       Money amount);\n * } \u003c/pre\u003e\n *\n * ...and to the concrete type's constructor parameters:\n *\n * \u003cpre\u003epublic class RealPayment implements Payment {\n *   {@literal @}Inject\n *   public RealPayment(\n *      CreditService creditService,\n *      AuthService authService,\n *      \u003cstrong\u003e{@literal @}Assisted(\"startDate\")\u003c/strong\u003e Date startDate,\n *      \u003cstrong\u003e{@literal @}Assisted(\"dueDate\")\u003c/strong\u003e Date dueDate,\n *      \u003cstrong\u003e{@literal @}Assisted\u003c/strong\u003e Money amount) {\n *     ...\n *   }\n * }\u003c/pre\u003e\n *\n * \u003ch3\u003eValues are created by Guice\u003c/h3\u003e\n *\n * Returned factories use child injectors to create values. The values are eligible for method\n * interception. In addition, {@literal @}{@literal Inject} members will be injected before they are\n * returned.\n *\n * \u003ch3\u003eBackwards compatibility using {@literal @}AssistedInject\u003c/h3\u003e\n *\n * Instead of the {@literal @}Inject annotation, you may annotate the constructed classes with\n * {@literal @}{@link AssistedInject}. This triggers a limited backwards-compatability mode.\n *\n * \u003cp\u003eInstead of matching factory method arguments to constructor parameters using their names, the\n * \u003cstrong\u003eparameters are matched by their order\u003c/strong\u003e. The first factory method argument is used\n * for the first {@literal @}Assisted constructor parameter, etc.. Annotation names have no effect.\n *\n * \u003cp\u003eReturned values are \u003cstrong\u003enot created by Guice\u003c/strong\u003e. These types are not eligible for\n * method interception. They do receive post-construction member injection.\n *\n * @param \u003cF\u003e The factory interface\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author dtm@google.com (Daniel Martin)\n * @deprecated use {@link FactoryModuleBuilder} instead.\n */"
				},
				{
					"signature": "public static \u003cF\u003e Provider\u003cF\u003e newFactory(\n      TypeLiteral\u003cF\u003e factoryType, TypeLiteral\u003c?\u003e implementationType)",
					"documentation": ""
				},
				{
					"signature": "private FactoryProvider(\n      TypeLiteral\u003cF\u003e factoryType,\n      TypeLiteral\u003c?\u003e implementationType,\n      Map\u003cMethod, AssistedConstructor\u003c?\u003e\u003e factoryMethodToConstructor)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n  void setInjectorAndCheckUnboundParametersAreInjectable(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "private void checkDeclaredExceptionsMatch()",
					"documentation": ""
				},
				{
					"signature": "private boolean isConstructorExceptionCompatibleWithFactoryExeception(\n      Class\u003c?\u003e constructorException, Class\u003c?\u003e[] factoryExceptions)",
					"documentation": ""
				},
				{
					"signature": "private boolean paramCanBeInjected(Parameter parameter, Injector injector)",
					"documentation": ""
				},
				{
					"signature": "private static Map\u003cMethod, AssistedConstructor\u003c?\u003e\u003e createMethodMapping(\n      TypeLiteral\u003c?\u003e factoryType, TypeLiteral\u003c?\u003e implementationType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public F get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(Object proxy, Method method, Object[] creationArgs)\n              throws Throwable",
					"documentation": ""
				},
				{
					"signature": "public Object[] gatherArgsForConstructor(\n              AssistedConstructor\u003c?\u003e constructor, Object[] factoryArgs)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "private static ConfigurationException newConfigurationException(String format, Object... args)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ConfigurationException",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.Message"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * The newer implementation of factory provider. This implementation uses a child injector to create\n * values.\n *\n * @author jessewilson@google.com (Jesse Wilson)\n * @author dtm@google.com (Daniel Martin)\n * @author schmitt@google.com (Peter Schmitt)\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.assistedinject.FactoryProvider2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public String value()",
					"documentation": "/** if a factory method parameter isn't annotated, it gets this annotation. */"
				},
				{
					"signature": "@Override\n        public Class\u003c? extends Annotation\u003e annotationType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "FactoryProvider2(\n      Key\u003cF\u003e factoryKey, BindingCollector collector, MethodHandles.Lookup userLookups)",
					"documentation": "/**\n   * @param factoryKey a key for a Java interface that defines one or more create methods.\n   * @param collector binding configuration that maps method return types to implementation types.\n   * @param userLookups user provided lookups, optional.\n   */"
				},
				{
					"signature": "static boolean isDefault(Method method)",
					"documentation": ""
				},
				{
					"signature": "private boolean isCompatible(Method src, Method dst)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public F get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Key\u003cF\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public Collection\u003cAssistedMethod\u003e getAssistedMethods()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public \u003cT, V\u003e V acceptExtensionVisitor(\n      BindingTargetVisitor\u003cT, V\u003e visitor, ProviderInstanceBinding\u003c? extends T\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private void validateFactoryReturnType(Errors errors, Class\u003c?\u003e returnType, Class\u003c?\u003e factoryType)",
					"documentation": ""
				},
				{
					"signature": "private boolean isTypeNotSpecified(TypeLiteral\u003c?\u003e typeLiteral, ConfigurationException ce)",
					"documentation": "/**\n   * Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\n   * specified.\n   */"
				},
				{
					"signature": "private \u003cT\u003e InjectionPoint findMatchingConstructorInjectionPoint(\n      Method method, Key\u003c?\u003e returnType, TypeLiteral\u003cT\u003e implementation, List\u003cKey\u003c?\u003e\u003e paramList)\n      throws ErrorsException",
					"documentation": "/**\n   * Finds a constructor suitable for the method. If the implementation contained any constructors\n   * marked with {@link AssistedInject}, this requires all {@link Assisted} parameters to exactly\n   * match the parameters (in any order) listed in the method. Otherwise, if no {@link\n   * AssistedInject} constructors exist, this will default to looking for an {@literal @}{@link\n   * Inject} constructor.\n   */"
				},
				{
					"signature": "private boolean constructorHasMatchingParams(\n      TypeLiteral\u003c?\u003e type, Constructor\u003c?\u003e constructor, List\u003cKey\u003c?\u003e\u003e paramList, Errors errors)\n      throws ErrorsException",
					"documentation": "/**\n   * Matching logic for constructors annotated with AssistedInject. This returns true if and only if\n   * all @Assisted parameters in the constructor exactly match (in any order) all @Assisted\n   * parameters the method's parameter.\n   */"
				},
				{
					"signature": "private Set\u003cDependency\u003c?\u003e\u003e getDependencies(\n      InjectionPoint ctorPoint, TypeLiteral\u003c?\u003e implementation)",
					"documentation": "/** Calculates all dependencies required by the implementation and constructor. */"
				},
				{
					"signature": "private Set\u003cDependency\u003c?\u003e\u003e removeAssistedDeps(Set\u003cDependency\u003c?\u003e\u003e deps)",
					"documentation": "/** Return all non-assisted dependencies. */"
				},
				{
					"signature": "private boolean isValidForOptimizedAssistedInject(\n      Set\u003cDependency\u003c?\u003e\u003e dependencies, Class\u003c?\u003e implementation, TypeLiteral\u003c?\u003e factoryType)",
					"documentation": "/**\n   * Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\n   * optimized version caches the binding and uses a ThreadLocal Provider, so can only be applied if\n   * the assisted bindings are immediately provided. This looks for hints that the values may be\n   * lazily retrieved, by looking for injections of Injector or a Provider for the assisted values.\n   */"
				},
				{
					"signature": "private boolean isInjectorOrAssistedProvider(Dependency\u003c?\u003e dependency)",
					"documentation": "/**\n   * Returns true if the dependency is for {@link Injector} or if the dependency is a {@link\n   * Provider} for a parameter that is {@literal @}{@link Assisted}.\n   */"
				},
				{
					"signature": "private \u003cT\u003e Key\u003cT\u003e assistKey(Method method, Key\u003cT\u003e key, Errors errors) throws ErrorsException",
					"documentation": "/**\n   * Returns a key similar to {@code key}, but with an {@literal @}Assisted binding annotation. This\n   * fails if another binding annotation is clobbered in the process. If the key already has the\n   * {@literal @}Assisted annotation, it is returned as-is to preserve any String value.\n   */"
				},
				{
					"signature": "@Inject\n  @Toolable\n  void initialize(Injector injector)",
					"documentation": "/**\n   * At injector-creation time, we initialize the invocation handler. At this time we make sure all\n   * factory methods will be able to build the target types.\n   */"
				},
				{
					"signature": "public Binding\u003c?\u003e getBindingFromNewInjector(\n      final Method method, final Object[] args, final AssistData data)",
					"documentation": "/**\n   * Creates a child injector that binds the args, and returns the binding for the method's result.\n   */"
				},
				{
					"signature": "@Override\n          @SuppressWarnings({\n            \"unchecked\",\n            \"rawtypes\"\n          }) \n          protected void configure()",
					"documentation": "/**\n   * Creates a child injector that binds the args, and returns the binding for the method's result.\n   */"
				},
				{
					"signature": "@Override\n  public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable",
					"documentation": "/**\n   * When a factory method is invoked, we create a child injector that binds all parameters, then\n   * use that to get an instance of the return type.\n   */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "static boolean canRethrow(Method invoked, Throwable thrown)",
					"documentation": "/** Returns true if {@code thrown} can be thrown by {@code invoked} without wrapping. */"
				},
				{
					"signature": "private static MethodHandle superMethodHandle(\n      SuperMethodLookup strategy, Method method, Object proxy, MethodHandles.Lookup userLookups)\n      throws ReflectiveOperationException",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler",
				"com.google.inject.spi.ProviderWithExtensionVisitor",
				"com.google.inject.spi.HasDependencies",
				"com.google.inject.assistedinject.AssistedInjectBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.ConfigurationException",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.spi.Message",
				"com.google.inject.spi.Toolable",
				"com.google.inject.assistedinject.FactoryProvider2.AssistData",
				"com.google.inject.assistedinject.FactoryProvider2.ThreadLocalProvider",
				"com.google.inject.assistedinject.FactoryProvider2.PrivateLookup"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.FactoryProvider2.AssistData",
				"com.google.inject.assistedinject.FactoryProvider2.ThreadLocalProvider",
				"com.google.inject.assistedinject.FactoryProvider2.SuperMethodSupport",
				"com.google.inject.assistedinject.FactoryProvider2.SuperMethodLookup",
				"com.google.inject.assistedinject.FactoryProvider2.PrivateLookup"
			]
		},
		{
			"documentation": "/** All the data necessary to perform an assisted inject. */",
			"name": "com.google.inject.assistedinject.FactoryProvider2.AssistData",
			"extends": "",
			"Methods": [
				{
					"signature": "AssistData(\n        Constructor\u003c?\u003e constructor,\n        Key\u003c?\u003e returnType,\n        ImmutableList\u003cKey\u003c?\u003e\u003e paramTypes,\n        TypeLiteral\u003c?\u003e implementationType,\n        Method factoryMethod,\n        Set\u003cDependency\u003c?\u003e\u003e dependencies,\n        boolean optimized,\n        List\u003cThreadLocalProvider\u003e providers)",
					"documentation": "/** used to perform optimized factory creations. */"
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Method getFactoryMethod()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Constructor\u003c?\u003e getImplementationConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public TypeLiteral\u003c?\u003e getImplementationType()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.AssistedMethod"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2.ThreadLocalProvider",
			"extends": "ThreadLocal",
			"Methods": [
				{
					"signature": "@Override\n    protected Object initialValue()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Holder for the appropriate kind of method lookup to use. Due to bugs in Java releases, we have\n   * to evaluate what approach to take at runtime. We do this by emulating the buggy scenarios: can\n   * a lookup access private details that it should be able to see? If not, we fail down to using\n   * full private access. Unfortunately, private access doesn't work in the JDK17+.... but it\n   * shouldn't be necessary there either, because the buggy lookup checks should be fixed.\n   */",
			"name": "com.google.inject.assistedinject.FactoryProvider2.SuperMethodSupport",
			"extends": "",
			"Methods": [
				{
					"signature": "static",
					"documentation": "/**\n   * Holder for the appropriate kind of method lookup to use. Due to bugs in Java releases, we have\n   * to evaluate what approach to take at runtime. We do this by emulating the buggy scenarios: can\n   * a lookup access private details that it should be able to see? If not, we fail down to using\n   * full private access. Unfortunately, private access doesn't work in the JDK17+.... but it\n   * shouldn't be necessary there either, because the buggy lookup checks should be fixed.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2.SuperMethodLookup",
			"extends": "",
			"Methods": [
				{
					"signature": "UNREFLECT_SPECIAL",
					"documentation": ""
				},
				{
					"signature": "@Override\n      MethodHandle superMethodHandle(Method method, MethodHandles.Lookup lookup)\n          throws ReflectiveOperationException",
					"documentation": ""
				},
				{
					"signature": "FIND_SPECIAL",
					"documentation": ""
				},
				{
					"signature": "@Override\n      MethodHandle superMethodHandle(Method method, MethodHandles.Lookup lookup)\n          throws ReflectiveOperationException",
					"documentation": ""
				},
				{
					"signature": "PRIVATE_LOOKUP",
					"documentation": ""
				},
				{
					"signature": "@Override\n      MethodHandle superMethodHandle(Method method, MethodHandles.Lookup unused)\n          throws ReflectiveOperationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2.PrivateLookup",
			"extends": "",
			"Methods": [
				{
					"signature": "PrivateLookup()",
					"documentation": ""
				},
				{
					"signature": "private static Constructor\u003cMethodHandles.Lookup\u003e findPrivateLookupCxtor()",
					"documentation": ""
				},
				{
					"signature": "static MethodHandle superMethodHandle(Method method) throws ReflectiveOperationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Models a method or constructor parameter.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.Parameter",
			"extends": "",
			"Methods": [
				{
					"signature": "public Parameter(Type type, Annotation[] annotations)",
					"documentation": "/**\n * Models a method or constructor parameter.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public boolean isProvidedByFactory()",
					"documentation": ""
				},
				{
					"signature": "public Type getType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "private boolean hasAssistedAnnotation(Annotation[] annotations)",
					"documentation": ""
				},
				{
					"signature": "public Object getValue(Injector injector)",
					"documentation": "/** Returns the Guice {@link Key} for this parameter. */"
				},
				{
					"signature": "public boolean isBound(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "private boolean isBound(Injector injector, Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Key\u003c?\u003e fixAnnotations(Key\u003c?\u003e key)",
					"documentation": "/**\n   * Replace annotation instances with annotation types, this is only appropriate for testing if a\n   * key is bound and not for injecting.\n   *\n   * \u003cp\u003eSee Guice bug 125, https://github.com/google/guice/issues/125\n   */"
				},
				{
					"signature": "Key\u003c?\u003e getPrimaryBindingKey()",
					"documentation": ""
				},
				{
					"signature": "private Type getProvidedType(Type type)",
					"documentation": ""
				},
				{
					"signature": "private boolean isProvider(Type type)",
					"documentation": ""
				},
				{
					"signature": "private Key\u003c?\u003e getBindingForType(Type type)",
					"documentation": ""
				},
				{
					"signature": "private Annotation getBindingAnnotation(Annotation[] annotations)",
					"documentation": "/**\n   * Returns the unique binding annotation from the specified list, or {@code null} if there are\n   * none.\n   *\n   * @throws IllegalStateException if multiple binding annotations exist.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A list of {@link TypeLiteral}s to match an injectable Constructor's assited parameter types to\n * the corresponding factory method.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.ParameterListKey",
			"extends": "",
			"Methods": [
				{
					"signature": "public ParameterListKey(List\u003cType\u003e paramList)",
					"documentation": "/**\n * A list of {@link TypeLiteral}s to match an injectable Constructor's assited parameter types to\n * the corresponding factory method.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */"
				},
				{
					"signature": "public ParameterListKey(Type[] types)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An interface in a different package, so that AssistedInject's main package can't see it. Used at\n * runtime to determine which kind of Lookup method we'll support.\n */",
			"name": "com.google.inject.assistedinject.internal.LookupTester",
			"extends": "",
			"Methods": [
				{
					"signature": "private LookupTester()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.internal.Hidden"
			]
		},
		{
			"documentation": "/**\n * An interface in a different package, so that AssistedInject's main package can't see it. Used at\n * runtime to determine which kind of Lookup method we'll support.\n */",
			"name": "com.google.inject.assistedinject.internal.Hidden",
			"extends": "",
			"Methods": [
				{
					"signature": "default Hidden method()",
					"documentation": "/**\n * An interface in a different package, so that AssistedInject's main package can't see it. Used at\n * runtime to determine which kind of Lookup method we'll support.\n */"
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for AssistedInject Spi.\n *\n * @author ramakrishna@google.com (Ramakrishna Rajanna)\n */",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testSpiOnElements() throws Exception",
					"documentation": "/**\n * Tests for AssistedInject Spi.\n *\n * @author ramakrishna@google.com (Ramakrishna Rajanna)\n */"
				},
				{
					"signature": "public void testSpiOnVisitor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void validateVisitor(AssistedInjectSpiVisitor visitor) throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void validateAssistedMethod(\n      AssistedMethod assistedMethod,\n      String factoryMethodName,\n      Class\u003c?\u003e clazz,\n      List\u003cKey\u003c?\u003e\u003e dependencyKeys)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.ExtensionSpiTest.Module",
				"com.google.inject.assistedinject.ExtensionSpiTest.AssistedInjectSpiVisitor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.AnimalFactory",
				"com.google.inject.assistedinject.Animal",
				"com.google.inject.assistedinject.ExtensionSpiTest.Cat",
				"com.google.inject.assistedinject.ExtensionSpiTest.SimpleCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.StrangeCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.CatWithAName",
				"com.google.inject.assistedinject.ExtensionSpiTest.Module",
				"com.google.inject.assistedinject.ExtensionSpiTest.AssistedInjectSpiVisitor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.AnimalFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Animal",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.ExtensionSpiTest.Cat",
				"com.google.inject.assistedinject.ExtensionSpiTest.SimpleCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.StrangeCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Dog",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.Cat",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Cat(@Assisted String owner)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.ExtensionSpiTest.CatWithAName"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.SimpleCat",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    SimpleCat(@Assisted String owner)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.StrangeCat",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    StrangeCat(@Assisted String owner)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    StrangeCat(@Assisted Integer age)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public ExplodingCat(\n        @Named(\"catName1\") String name,\n        @Assisted String owner,\n        @Named(\"age\") Integer age,\n        @Named(\"petName\") String petName)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.CatWithAName",
			"extends": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat",
			"Methods": [
				{
					"signature": "@Inject\n    CatWithAName(@Assisted String owner, @Named(\"catName2\") String name)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.Module",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Names"
			],
			"usedBy": [
				"com.google.inject.assistedinject.ExtensionSpiTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ExtensionSpiTest.AssistedInjectSpiVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n    public Integer visit(AssistedInjectBinding\u003c?\u003e assistedInjectBinding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Integer visitOther(Binding\u003c?\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.AssistedInjectTargetVisitor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.ExtensionSpiTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testImplicitForwardingAssistedBindingFailsWithInterface()",
					"documentation": ""
				},
				{
					"signature": "public void testImplicitForwardingAssistedBindingFailsWithAbstractClass()",
					"documentation": ""
				},
				{
					"signature": "public void testImplicitForwardingAssistedBindingCreatesNewObjects()",
					"documentation": ""
				},
				{
					"signature": "public void testExplicitForwardingAssistedBindingFailsWithInterface()",
					"documentation": ""
				},
				{
					"signature": "public void testExplicitForwardingAssistedBindingFailsWithAbstractClass()",
					"documentation": ""
				},
				{
					"signature": "public void testExplicitForwardingAssistedBindingCreatesNewObjects()",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotatedAndParentBoundReturnValue()",
					"documentation": ""
				},
				{
					"signature": "public void testParentBoundReturnValue()",
					"documentation": ""
				},
				{
					"signature": "public void testConfigureAnnotatedReturnValue()",
					"documentation": ""
				},
				{
					"signature": "public void testNoBindingAssistedInject()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingAssistedInject()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testSimilarBindingsWithConflictingImplementations()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleReturnTypes()",
					"documentation": ""
				},
				{
					"signature": "public void testParameterizedClassesWithNoImplements()",
					"documentation": ""
				},
				{
					"signature": "public void testGenericErrorMessageMakesSense()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryBindingDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "private void validateDependencies(Set\u003cKey\u003c?\u003e\u003e expectedKeys, Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryPublicAndReturnTypeNotPublic()",
					"documentation": ""
				},
				{
					"signature": "public void testSingletonScopeOnAssistedClassIsIgnored()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.TypeLiteral",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.Asserts",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo.Factory",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Bar",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Color",
				"com.google.inject.assistedinject.Car",
				"com.google.inject.assistedinject.Volkswagen",
				"com.google.inject.assistedinject.ColoredCarFactory",
				"com.google.inject.assistedinject.MustangFactory",
				"com.google.inject.assistedinject.VersatileCarFactory",
				"com.google.inject.assistedinject.AnnotatedVersatileCarFactory",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Golf",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Bar",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Baz",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
				"com.google.inject.assistedinject.ColoredAbstractCarFactory",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.ArtCar",
				"com.google.inject.assistedinject.AnimalHouse",
				"com.google.inject.assistedinject.Animal",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Dog",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat",
				"com.google.inject.assistedinject.Hidden",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.HiddenImpl",
				"com.google.inject.assistedinject.NotHidden",
				"com.google.inject.assistedinject.SingletonFactory",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AssistedSingleton"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Color",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Car",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.Volkswagen"
			],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
				"com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
				"com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
				"com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
				"com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
				"com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
				"com.google.inject.assistedinject.FactoryProvider2Test.Z",
				"com.google.inject.assistedinject.FactoryProvider2Test.Prius",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
				"com.google.inject.assistedinject.FactoryProvider2Test.Subaru",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
				"com.google.inject.assistedinject.FactoryProvider2Test.Segway",
				"com.google.inject.assistedinject.FactoryProviderTest.Mustang",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.FactoryProviderTest.Corvette",
				"com.google.inject.assistedinject.FactoryProviderTest.Beetle",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.FactoryProviderTest.Firebird",
				"com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
				"com.google.inject.assistedinject.FactoryProviderTest.Z",
				"com.google.inject.assistedinject.FactoryProviderTest.Prius",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.Fiat"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Volkswagen",
			"extends": "com.google.inject.assistedinject.Car",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Golf"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.MustangFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.VersatileCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.AnnotatedVersatileCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Golf",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.assistedinject.Volkswagen"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Mustang(@Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Beetle(@Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @Inject\n    Foo(@Assisted Bar bar, Baz\u003cE\u003e baz)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.ManyConstructorsTest.TooManyMatches"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Foo.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Baz",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.ArtCar"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ColoredAbstractCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.ArtCar",
			"extends": "com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.AnimalHouse",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Animal",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.ExtensionSpiTest.Cat",
				"com.google.inject.assistedinject.ExtensionSpiTest.SimpleCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.StrangeCat",
				"com.google.inject.assistedinject.ExtensionSpiTest.ExplodingCat",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Dog",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Dog",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Dog(@Assisted String a, double b)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void register(@Named(\"dog\") String a)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.Cat",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    Cat(@Assisted String a, @Named(\"cat1\") String b)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Cat(@Assisted int a, @Named(\"cat2\") String b)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Cat(@Assisted byte a, @Named(\"catfail\") String b)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void register(@Named(\"cat3\") String a)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Animal"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.ExtensionSpiTest.CatWithAName"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Hidden",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.HiddenImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.HiddenImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.assistedinject.Hidden"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.NotHidden",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.SingletonFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryModuleBuilderTest.AssistedSingleton",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public AssistedSingleton(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testAssistedFactory()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedFactoryWithAnnotations()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryUsesInjectedConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testConstructorDoesntNeedAllFactoryMethodArguments()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMethodsAndFieldsGetInjected()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderInjection()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedProviderInjection()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeTokenInjection()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testTypeTokenProviderInjection()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistInjectionInNonPublicConstructor()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionDuringConstruction()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testConstructorExceptionsAreThrownByFactory()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testWildcardGenerics()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryWithImplicitBindings()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryFailsWithMissingBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryFailsWithMissingBindingInToolStage()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMethodsDeclaredInObject()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectingProviderOfParameter()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectingNullParameter()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedProviderIsDisallowed()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedJavaxProviderIsDisallowed()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryUseBeforeInitialization()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryBuildingConcreteTypes()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectDeepIntoConstructedObjects()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDistinctKeys()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDuplicateKeys()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMethodInterceptorsOnAssistedTypes()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryReuseErrorMessageIsPretty()",
					"documentation": "/**\n   * Our factories aren't reusable across injectors. Although this behaviour isn't something we\n   * like, I have a test case to make sure the error message is pretty.\n   */"
				},
				{
					"signature": "@Test\n  public void testNonAssistedFactoryMethodParameter()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDefaultAssistedAnnotation() throws NoSuchFieldException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGenericAssistedFactory()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedFactoryForConcreteType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedFactoryForParameterizedType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAssistedFactoryForTypeVariableParameters()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testInjectingAndUsingInjector()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDuplicateAssistedFactoryBinding()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testFactoryMethodCalledEquals()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testReturnValueMatchesParamValue()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGeneratedDefaultMethodsForwardCorrectly()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Annotations",
				"com.google.inject.matcher.Matchers",
				"com.google.inject.name.Named",
				"com.google.inject.Asserts",
				"com.google.inject.assistedinject.Assisted",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplosionException",
				"com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
				"com.google.inject.assistedinject.Equals.Impl",
				"com.google.inject.assistedinject.FactoryProvider2Test.Delegater",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssisted"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Color",
				"com.google.inject.assistedinject.Car",
				"com.google.inject.assistedinject.ColoredCarFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.SummerCarFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
				"com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
				"com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
				"com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
				"com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
				"com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
				"com.google.inject.assistedinject.FactoryProvider2Test.Z",
				"com.google.inject.assistedinject.FactoryProvider2Test.Prius",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplosionException",
				"com.google.inject.assistedinject.FactoryProvider2Test.FireException",
				"com.google.inject.assistedinject.DefectiveCarFactoryWithNoExceptions",
				"com.google.inject.assistedinject.DefectiveCarFactory",
				"com.google.inject.assistedinject.CorrectDefectiveCarFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.WildcardCollection",
				"com.google.inject.assistedinject.FactoryProvider2Test.SteeringWheel",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
				"com.google.inject.assistedinject.FactoryProvider2Test.Subaru",
				"com.google.inject.assistedinject.ProviderBasedColoredCarFactory",
				"com.google.inject.assistedinject.JavaxProviderBasedColoredCarFactory",
				"com.google.inject.assistedinject.MustangFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fleet",
				"com.google.inject.assistedinject.FleetFactory",
				"com.google.inject.assistedinject.TwoToneCarFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
				"com.google.inject.assistedinject.DoubleToneCarFactory",
				"com.google.inject.assistedinject.NamedParameterFactory",
				"com.google.inject.assistedinject.GenericColoredCarFactory",
				"com.google.inject.assistedinject.Insurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
				"com.google.inject.assistedinject.MustangInsuranceFactory",
				"com.google.inject.assistedinject.CamaroInsuranceFactory",
				"com.google.inject.assistedinject.InsuranceFactory",
				"com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
				"com.google.inject.assistedinject.Equals",
				"com.google.inject.assistedinject.FactoryProvider2Test.Segway",
				"com.google.inject.assistedinject.FactoryProvider2Test.Delegater",
				"com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssisted",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithoutOverride",
				"com.google.inject.assistedinject.FactoryProvider2Test.Public"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Color",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Car",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.Volkswagen"
			],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
				"com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
				"com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
				"com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
				"com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
				"com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
				"com.google.inject.assistedinject.FactoryProvider2Test.Z",
				"com.google.inject.assistedinject.FactoryProvider2Test.Prius",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
				"com.google.inject.assistedinject.FactoryProvider2Test.Subaru",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
				"com.google.inject.assistedinject.FactoryProvider2Test.Segway",
				"com.google.inject.assistedinject.FactoryProviderTest.Mustang",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.FactoryProviderTest.Corvette",
				"com.google.inject.assistedinject.FactoryProviderTest.Beetle",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.FactoryProviderTest.Firebird",
				"com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
				"com.google.inject.assistedinject.FactoryProviderTest.Z",
				"com.google.inject.assistedinject.FactoryProviderTest.Prius",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.Fiat"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Mustang(double engineSize, @Assisted Color color)",
					"documentation": ""
				},
				{
					"signature": "public void drive()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Camaro(\n        @Named(\"horsePower\") int horsePower,\n        @Named(\"modelYear\") int modelYear,\n        @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.SummerCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    public Corvette(Color color, boolean isConvertable)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    public Corvette(@Assisted Color color, Float maxMph, @Assisted boolean isConvertable)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Beetle(@Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Porsche(@Assisted Color color, double price)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setModel(int model)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Firebird(Provider\u003cString\u003e modifiersProvider, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Flamingbird(\n        Provider\u003cString\u003e modifiersProvider, @Assisted Provider\u003cColor\u003e colorProvider)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public DeLorean(\n        Set\u003cString\u003e extraFeatures, Set\u003cInteger\u003e featureActivationSpeeds, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Z",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Z(Provider\u003cSet\u003cString\u003e\u003e manufacturersProvider, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Prius",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    private Prius(@Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public ExplodingCar(@SuppressWarnings(\"unused\") @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public DefectiveCar() throws ExplosionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.ExplosionException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.FireException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.DefectiveCarFactoryWithNoExceptions",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.DefectiveCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.CorrectDefectiveCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.WildcardCollection",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public WildcardCollection(@SuppressWarnings(\"unused\") @Assisted Collection\u003c?\u003e items)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.SteeringWheel",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public Fiat(SteeringWheel steeringWheel, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Subaru",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ProviderBasedColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.JavaxProviderBasedColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.MustangFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Fleet",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FleetFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.TwoToneCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.assistedinject.Assisted"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.DoubleToneCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.NamedParameterFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.GenericColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Insurance",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public MustangInsurance(\n        @Named(\"lowLimit\") double limit, @Assisted Mustang car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public CamaroInsurance(\n        @Named(\"highLimit\") double limit, @Assisted Camaro car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.MustangInsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.CamaroInsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.InsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public AutoInsurance(double limit, @Assisted T car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Equals",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.Equals.Impl"
			],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.Equals.Impl"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.ComparisonMethod",
				"com.google.inject.assistedinject.Factory",
				"com.google.inject.assistedinject.Equals.Impl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ComparisonMethod",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Equals.Impl",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n      public Impl(double sigma, @Assisted ComparisonMethod comparisonMethod)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Equals"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.Equals"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Segway",
			"extends": "",
			"Methods": [
				{
					"signature": "Color getColor()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Delegater",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Delegater(@Assisted Delegater delegater)",
					"documentation": ""
				},
				{
					"signature": "Delegater()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssisted",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithoutOverride",
				"com.google.inject.assistedinject.FactoryProvider2Test.Public"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssisted",
			"extends": "com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
			"Methods": [
				{
					"signature": "@Inject\n    ConcreteAssisted(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithOverride",
			"extends": "com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
			"Methods": [
				{
					"signature": "@AssistedInject\n    ConcreteAssistedWithOverride(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    ConcreteAssistedWithOverride(@SuppressWarnings(\"unused\") @Assisted StringBuilder sb)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory",
				"com.google.inject.assistedinject.Factory2"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory2",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.ConcreteAssistedWithoutOverride",
			"extends": "com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
			"Methods": [
				{
					"signature": "@Inject\n    ConcreteAssistedWithoutOverride(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProvider2Test.Public",
			"extends": "com.google.inject.assistedinject.FactoryProvider2Test.AbstractAssisted",
			"Methods": [
				{
					"signature": "@AssistedInject\n    Public(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Public(@SuppressWarnings(\"unused\") @Assisted StringBuilder sb)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.FactoryProviderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAssistedFactory()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryBindingDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistedFactoryWithAnnotations()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryWithMultipleMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryMethodsMismatch()",
					"documentation": ""
				},
				{
					"signature": "public void testMethodsAndFieldsGetInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeTokenInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testTypeTokenProviderInjection()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistInjectionInNonPublicConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionDuringConstruction()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryMethodMustDeclareAllConstructorExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testConstructorExceptionsAreThrownByFactory()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleConstructorExceptionMatching()",
					"documentation": ""
				},
				{
					"signature": "public void testWildcardGenerics()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryWithImplicitBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryFailsWithMissingBinding()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"SelfEquals\", \"ReturnValueIgnored\"})\n  public void testMethodsDeclaredInObject()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistedInjectConstructorAndAssistedFactoryParameterMustNotMix()",
					"documentation": ""
				},
				{
					"signature": "public void testGenericAssistedFactory()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistedFactoryForConcreteType()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistedFactoryForParameterizedType()",
					"documentation": ""
				},
				{
					"signature": "public void testAssistedFactoryForTypeVariableParameters()",
					"documentation": ""
				},
				{
					"signature": "public void testDuplicateAssistedFactoryBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testFactoryMethodCalledEquals()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.TypeLiteral",
				"com.google.inject.name.Named",
				"com.google.inject.Asserts",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.Equals.Impl",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplosionException",
				"com.google.inject.assistedinject.FactoryProviderTest.FireException",
				"com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Color",
				"com.google.inject.assistedinject.Car",
				"com.google.inject.assistedinject.ColoredCarFactory",
				"com.google.inject.assistedinject.FactoryProviderTest.Mustang",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.SummerCarFactory",
				"com.google.inject.assistedinject.FactoryProviderTest.Corvette",
				"com.google.inject.assistedinject.FactoryProviderTest.Beetle",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.FactoryProviderTest.Firebird",
				"com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
				"com.google.inject.assistedinject.FactoryProviderTest.Z",
				"com.google.inject.assistedinject.FactoryProviderTest.Prius",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplosionException",
				"com.google.inject.assistedinject.FactoryProviderTest.FireException",
				"com.google.inject.assistedinject.DefectiveCarFactoryWithNoExceptions",
				"com.google.inject.assistedinject.DefectiveCarFactory",
				"com.google.inject.assistedinject.CorrectDefectiveCarFactory",
				"com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
				"com.google.inject.assistedinject.MultipleConstructorDefectiveCarFactory",
				"com.google.inject.assistedinject.FactoryProviderTest.WildcardCollection",
				"com.google.inject.assistedinject.FactoryProviderTest.SteeringWheel",
				"com.google.inject.assistedinject.FactoryProviderTest.Fiat",
				"com.google.inject.assistedinject.AssistedParamsFactory",
				"com.google.inject.assistedinject.GenericColoredCarFactory",
				"com.google.inject.assistedinject.Insurance",
				"com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
				"com.google.inject.assistedinject.MustangInsuranceFactory",
				"com.google.inject.assistedinject.CamaroInsuranceFactory",
				"com.google.inject.assistedinject.InsuranceFactory",
				"com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance",
				"com.google.inject.assistedinject.Equals"
			]
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.assistedinject.Color",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Car",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.Volkswagen"
			],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Mustang",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.Beetle",
				"com.google.inject.assistedinject.FactoryModuleBuilderTest.AbstractCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Mustang",
				"com.google.inject.assistedinject.FactoryProvider2Test.Camaro",
				"com.google.inject.assistedinject.FactoryProvider2Test.Corvette",
				"com.google.inject.assistedinject.FactoryProvider2Test.Beetle",
				"com.google.inject.assistedinject.FactoryProvider2Test.Porsche",
				"com.google.inject.assistedinject.FactoryProvider2Test.Firebird",
				"com.google.inject.assistedinject.FactoryProvider2Test.Flamingbird",
				"com.google.inject.assistedinject.FactoryProvider2Test.DeLorean",
				"com.google.inject.assistedinject.FactoryProvider2Test.Z",
				"com.google.inject.assistedinject.FactoryProvider2Test.Prius",
				"com.google.inject.assistedinject.FactoryProvider2Test.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProvider2Test.Fiat",
				"com.google.inject.assistedinject.FactoryProvider2Test.Subaru",
				"com.google.inject.assistedinject.FactoryProvider2Test.Maxima",
				"com.google.inject.assistedinject.FactoryProvider2Test.Segway",
				"com.google.inject.assistedinject.FactoryProviderTest.Mustang",
				"com.google.inject.assistedinject.FactoryProviderTest.Camaro",
				"com.google.inject.assistedinject.FactoryProviderTest.Corvette",
				"com.google.inject.assistedinject.FactoryProviderTest.Beetle",
				"com.google.inject.assistedinject.FactoryProviderTest.Porshe",
				"com.google.inject.assistedinject.FactoryProviderTest.Firebird",
				"com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
				"com.google.inject.assistedinject.FactoryProviderTest.Z",
				"com.google.inject.assistedinject.FactoryProviderTest.Prius",
				"com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
				"com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
				"com.google.inject.assistedinject.FactoryProviderTest.Fiat"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Mustang",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Mustang(double engineSize, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Camaro",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Camaro(\n        @Named(\"horsePower\") int horsePower,\n        @Named(\"modelYear\") int modelYear,\n        @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named",
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.SummerCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Corvette",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Corvette(@Assisted Color color)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unused\")\n    public Corvette(@Assisted Color color, @Assisted boolean isConvertable)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    public Corvette(@Assisted Color color, Float maxMph, @Assisted boolean isConvertable)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Beetle",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    @SuppressWarnings(\"unused\")\n    public Beetle(@Assisted Color color)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    @SuppressWarnings(\"unused\")\n    public Beetle(@Assisted Color color, @Assisted boolean isConvertable)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    @SuppressWarnings(\"unused\")\n    public Beetle(@Assisted Color color, @Assisted boolean isConvertable, float maxMph)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Porshe",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Porshe(@Assisted Color color, double price)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setModel(int model)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Firebird",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Firebird(Provider\u003cString\u003e modifiersProvider, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.DeLorean",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public DeLorean(\n        Set\u003cString\u003e extraFeatures, Set\u003cInteger\u003e featureActivationSpeeds, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Z",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Z(Provider\u003cSet\u003cString\u003e\u003e manufacturersProvider, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Prius",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    private Prius(@Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.ExplodingCar",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public ExplodingCar(@SuppressWarnings(\"unused\") @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.DefectiveCar",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public DefectiveCar() throws ExplosionException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.ExplosionException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProviderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.FireException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProviderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.DefectiveCarFactoryWithNoExceptions",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.DefectiveCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.CorrectDefectiveCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.MultipleConstructorDefectiveCar",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public MultipleConstructorDefectiveCar() throws ExplosionException",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    public MultipleConstructorDefectiveCar(@SuppressWarnings(\"unused\") @Assisted Color c)\n        throws FireException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.MultipleConstructorDefectiveCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.WildcardCollection",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public WildcardCollection(@SuppressWarnings(\"unused\") @Assisted Collection\u003c?\u003e items)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.SteeringWheel",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.Fiat",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public Fiat(SteeringWheel steeringWheel, @Assisted Color color)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Car"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.AssistedParamsFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.GenericColoredCarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Insurance",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.FactoryProvider2Test.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProvider2Test.AutoInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
				"com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.MustangInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public MustangInsurance(\n        @Named(\"lowLimit\") double limit, @Assisted Mustang car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named",
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.CamaroInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public CamaroInsurance(\n        @Named(\"highLimit\") double limit, @Assisted Camaro car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.name.Named",
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.MustangInsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.CamaroInsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.InsuranceFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.FactoryProviderTest.AutoInsurance",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    public AutoInsurance(double limit, @Assisted T car, @Assisted double premium)",
					"documentation": ""
				},
				{
					"signature": "public void sell()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Insurance"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.FactoryProviderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Equals",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.assistedinject.Equals.Impl"
			],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.assistedinject.Equals.Impl"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.ComparisonMethod",
				"com.google.inject.assistedinject.Factory",
				"com.google.inject.assistedinject.Equals.Impl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ComparisonMethod",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Equals.Impl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n      public Impl(double sigma, @Assisted ComparisonMethod comparisonMethod)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.assistedinject.Equals"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.assistedinject.FactoryProvider2Test",
				"com.google.inject.assistedinject.FactoryProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.Equals"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author sameb@google.com (Sam Berlin) */",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testTwoConstructors()",
					"documentation": "/** @author sameb@google.com (Sam Berlin) */"
				},
				{
					"signature": "public void testDifferentOrderParameters()",
					"documentation": ""
				},
				{
					"signature": "public void testInterfaceToImpl()",
					"documentation": ""
				},
				{
					"signature": "public void testUsingOneConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testTooManyMatchingConstructors()",
					"documentation": ""
				},
				{
					"signature": "public void testNoMatchingConstructorsBecauseTooManyParams()",
					"documentation": ""
				},
				{
					"signature": "public void testNoMatchingConstrucotsBecauseTooLittleParams()",
					"documentation": ""
				},
				{
					"signature": "public void testDependenciesAndOtherAnnotations()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Asserts",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.ManyConstructorsTest.Farm"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.ManyConstructorsTest.ComplexFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.NullFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.OtherFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.Factory",
				"com.google.inject.assistedinject.ManyConstructorsTest.BarFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.SimpleFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.SimpleFactory2",
				"com.google.inject.assistedinject.ManyConstructorsTest.TooManyMatches",
				"com.google.inject.assistedinject.ManyConstructorsTest.Foo",
				"com.google.inject.assistedinject.ManyConstructorsTest.Bar",
				"com.google.inject.assistedinject.ManyConstructorsTest.FamilyFarmFactory",
				"com.google.inject.assistedinject.ManyConstructorsTest.Farm",
				"com.google.inject.assistedinject.ManyConstructorsTest.Cow",
				"com.google.inject.assistedinject.ManyConstructorsTest.Dog"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.ComplexFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.NullFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.OtherFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.BarFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.SimpleFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.SimpleFactory2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.TooManyMatches",
			"extends": "com.google.inject.assistedinject.ManyConstructorsTest.Foo",
			"Methods": [
				{
					"signature": "@AssistedInject\n    TooManyMatches(@Assisted String name, @Assisted int index)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    TooManyMatches(@Assisted int index, @Assisted String name)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Foo",
			"extends": "",
			"Methods": [
				{
					"signature": "Foo()",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Foo(@Assisted String name)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Foo(@Assisted String name, @Assisted int index)",
					"documentation": ""
				},
				{
					"signature": "Foo(String a, String b, String c)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getName()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Integer getIndex()",
					"documentation": ""
				}
			],
			"interfaces": [
				"Bar"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.ManyConstructorsTest.TooManyMatches"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.FamilyFarmFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Farm",
			"extends": "",
			"Methods": [
				{
					"signature": "@AssistedInject\n    Farm(@Assisted String pop, Dog dog)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Farm(@Assisted(\"mom\") String mom, @Assisted(\"pop\") String pop, Cow cow, Dog dog)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Farm(@Assisted(\"mom\") String mom, Cow cow)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.ManyConstructorsTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Cow",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.ManyConstructorsTest.Dog",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test static methods in interfaces.\n *\n * @author tavianator@tavianator.com (Tavian Barnes)\n */",
			"name": "com.google.inject.assistedinject.StaticInterfaceMethodsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testAssistedInjection()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest.Thing"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest.Thing",
				"com.google.inject.assistedinject.Factory"
			]
		},
		{
			"documentation": "/**\n * Test static methods in interfaces.\n *\n * @author tavianator@tavianator.com (Tavian Barnes)\n */",
			"name": "com.google.inject.assistedinject.StaticInterfaceMethodsTest.Thing",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    Thing(@Assisted int i)",
					"documentation": "/**\n * Test static methods in interfaces.\n *\n * @author tavianator@tavianator.com (Tavian Barnes)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.assistedinject.StaticInterfaceMethodsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.Factory",
			"extends": "",
			"Methods": [
				{
					"signature": "static Factory getDefault()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests that run in a subpackage, to make sure tests aren't passing because they're run in the same\n * package as the assistedinject code.\n *\n * \u003cp\u003eSee https://github.com/google/guice/issues/904\n */",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n        public void publish(LogRecord logRecord)",
					"documentation": "/**\n * Tests that run in a subpackage, to make sure tests aren't passing because they're run in the same\n * package as the assistedinject code.\n *\n * \u003cp\u003eSee https://github.com/google/guice/issues/904\n */"
				},
				{
					"signature": "@Override\n        public void flush()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void close()",
					"documentation": ""
				},
				{
					"signature": "@Before\n  public void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@After\n  public void tearDown() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testNoPrivateFallbackOrWorkaround() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testPrivateFallbackOnly() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testHandleWorkaroundOnly() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testGeneratedDefaultMethodsForwardCorrectly() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private static void setAllowPrivateLookupFallback(boolean allowed) throws Exception",
					"documentation": ""
				},
				{
					"signature": "private static void setAllowMethodHandleWorkaround(boolean allowed) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.assistedinject.AssistedInject",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssisted"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssisted",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithoutOverride",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.Public"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssisted",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithOverride",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithoutOverride",
				"com.google.inject.assistedinject.subpkg.SubpackageTest.Public"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.subpkg.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.Factory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssisted",
			"extends": "com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
			"Methods": [
				{
					"signature": "@Inject\n    ConcreteAssisted(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.assistedinject.subpkg.SubpackageTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithOverride",
			"extends": "com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
			"Methods": [
				{
					"signature": "@AssistedInject\n    ConcreteAssistedWithOverride(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    ConcreteAssistedWithOverride(@SuppressWarnings(\"unused\") @Assisted StringBuilder sb)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.subpkg.Factory",
				"com.google.inject.assistedinject.subpkg.Factory2"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.Factory2",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest.ConcreteAssistedWithoutOverride",
			"extends": "com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
			"Methods": [
				{
					"signature": "@Inject\n    ConcreteAssistedWithoutOverride(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.assistedinject.subpkg.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.SubpackageTest.Public",
			"extends": "com.google.inject.assistedinject.subpkg.SubpackageTest.AbstractAssisted",
			"Methods": [
				{
					"signature": "@AssistedInject\n    Public(@SuppressWarnings(\"unused\") @Assisted String string)",
					"documentation": ""
				},
				{
					"signature": "@AssistedInject\n    Public(@SuppressWarnings(\"unused\") @Assisted StringBuilder sb)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.AssistedInject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.assistedinject.subpkg.Factory"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.assistedinject.subpkg.Factory",
			"extends": "AbstractAssisted.Factory",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Extensions for {@link Annotation}. */",
			"name": "com.google.inject.daggeradapter.Annotations",
			"extends": "",
			"Methods": [
				{
					"signature": "static Optional\u003cAnnotation\u003e getAnnotatedAnnotation(\n      AnnotatedElement element, Class\u003c? extends Annotation\u003e annotationClass)",
					"documentation": "/** Extensions for {@link Annotation}. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerMethodScanner",
				"com.google.inject.daggeradapter.Keys"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Adapts classes annotated with {@code @dagger.Module} such that their {@code @dagger.Provides}\n * methods can be properly invoked by Guice to perform their provision operations.\n *\n * \u003cp\u003eSimple example:\n *\n * \u003cpre\u003e{@code\n * Guice.createInjector(\n *   DaggerAdapter.from(SomeDaggerModule.class, new AnotherModuleWithConstructor());\n * }\u003c/pre\u003e\n *\n * \u003cp\u003eFor modules with no instance binding methods, prefer using a class literal. If there are\n * instance binding methods, an instance of the module must be passed.\n *\n * \u003cp\u003eAny class literals specified by {@code @dagger.Module(includes = ...)} transitively will be\n * included. Modules are de-duplicated, though multiple module instances of the same type is an\n * error. Specifying a module instance and a class literal is also an error.\n *\n * \u003cp\u003eSome notes on usage and compatibility.\n *\n * \u003cul\u003e\n *   \u003cli\u003eDagger provider methods have a \"SET_VALUES\" provision mode not supported by Guice.\n *   \u003cli\u003eBe careful about stateful modules. In contrast to Dagger (where components are expected to\n *       be recreated on-demand with new Module instances), Guice typically has a single injector\n *       with a long lifetime, so your module instance will be used throughout the lifetime of the\n *       entire app.\n *   \u003cli\u003eDagger 1.x uses {@code @Singleton} for all scopes, including shorter-lived scopes like\n *       per-request or per-activity. Using modules written with Dagger 1.x usage in mind may result\n *       in mis-scoped objects.\n *   \u003cli\u003eDagger 2.x supports custom scope annotations, but for use in Guice, a custom scope\n *       implementation must be registered in order to support the custom lifetime of that\n *       annotation.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eIf methods need to be ignored based on a condtion, a {@code Predicate\u003cMethod\u003e} can be used\n * passed to {@link DaggerAdapter.Builder#filter}, as in {@code\n * DaggerAdapter.builder().addModules(...).filter(predicate).build()}. Only the methods which\n * satisfy the predicate will be processed.\n */",
			"name": "com.google.inject.daggeradapter.DaggerAdapter",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Module from(Object... daggerModuleObjects)",
					"documentation": "/** Creates a new {@link DaggerAdapter} from {@code daggerModuleObjects}. */"
				},
				{
					"signature": "public static Builder builder()",
					"documentation": ""
				},
				{
					"signature": "private static Class\u003c?\u003e moduleClass(Object module)",
					"documentation": ""
				},
				{
					"signature": "private DaggerAdapter()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.Message",
				"com.google.inject.daggeradapter.DaggerAdapter.Builder",
				"com.google.inject.daggeradapter.DaggerAdapter.DaggerCompatibilityModule",
				"com.google.inject.daggeradapter.DaggerAdapter.ModuleTraversingQueue"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.DaggerAdapter.Builder",
				"com.google.inject.daggeradapter.DaggerAdapter.DaggerCompatibilityModule",
				"com.google.inject.daggeradapter.DaggerAdapter.ModuleTraversingQueue"
			]
		},
		{
			"documentation": "/**\n   * Builder for setting configuration options on DaggerAdapter.\n   *\n   * @since 5.0\n   */",
			"name": "com.google.inject.daggeradapter.DaggerAdapter.Builder",
			"extends": "",
			"Methods": [
				{
					"signature": "public Module build()",
					"documentation": "/** Returns a module that will configure bindings based on the modules and scanners. */"
				},
				{
					"signature": "public Builder addModules(Iterable\u003cObject\u003e daggerModuleObjects)",
					"documentation": "/**\n     * Adds modules (which can be classes annotated with {@code @dagger.Module}, or instances of\n     * those classes) which will be scanned for bindings.\n     */"
				},
				{
					"signature": "public Builder filter(Predicate\u003cMethod\u003e predicate)",
					"documentation": "/**\n     * Limit the adapter to a subset of {@code methods} from {@code @dagger.Module} annotated\n     * classes which satisfy the {@code predicate}. Defaults to allowing all.\n     */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapter"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * A Module that adapts Dagger {@code @Module}-annotated types to contribute configuration to an\n   * {@link com.google.inject.Injector} using a dagger-specific {@link\n   * ModuleAnnotatedMethodScanner}.\n   */",
			"name": "com.google.inject.daggeradapter.DaggerAdapter.DaggerCompatibilityModule",
			"extends": "",
			"Methods": [
				{
					"signature": "private DaggerCompatibilityModule(Builder builder)",
					"documentation": "/**\n   * A Module that adapts Dagger {@code @Module}-annotated types to contribute configuration to an\n   * {@link com.google.inject.Injector} using a dagger-specific {@link\n   * ModuleAnnotatedMethodScanner}.\n   */"
				},
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "private static Object instantiateIfNecessary(\n        Object module, List\u003cMethod\u003e declaredMethods, Binder binder)",
					"documentation": "/**\n     * Returns an instance of the module if instantiation is necessary and succeeds. Otherwise,\n     * return the original module (which could already be an instance or a class) and allow things\n     * to proceed.\n     */"
				},
				{
					"signature": "private static boolean methodRequiresInstance(Method m)",
					"documentation": ""
				},
				{
					"signature": "private void checkIsDaggerModule(Object module, Binder binder)",
					"documentation": ""
				},
				{
					"signature": "private static void checkUnsupportedDaggerAnnotations(\n        Iterable\u003cMethod\u003e declaredMethods, Binder binder)",
					"documentation": ""
				},
				{
					"signature": "private static ImmutableList\u003cMethod\u003e allDeclaredMethods(Class\u003c?\u003e clazz)",
					"documentation": ""
				},
				{
					"signature": "private void validateNoSubcomponents(Binder binder, Object module)",
					"documentation": ""
				},
				{
					"signature": "private ImmutableList\u003cObject\u003e transitiveModules()",
					"documentation": ""
				},
				{
					"signature": "private static ImmutableList\u003cObject\u003e deduplicateModules(\n        Binder binder, ImmutableList\u003cObject\u003e transitiveModules)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Errors",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapter"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapter.ModuleTraversingQueue",
			"extends": "",
			"Methods": [
				{
					"signature": "void add(Object module)",
					"documentation": ""
				},
				{
					"signature": "boolean isEmpty()",
					"documentation": ""
				},
				{
					"signature": "Class\u003c?\u003e pop()",
					"documentation": ""
				},
				{
					"signature": "ImmutableList\u003cObject\u003e transitiveModules()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapter"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A scanner to process provider methods on Dagger modules.\n *\n * @author cgruber@google.com (Christian Gruber)\n */",
			"name": "com.google.inject.daggeradapter.DaggerMethodScanner",
			"extends": "com.google.inject.spi.ModuleAnnotatedMethodScanner",
			"Methods": [
				{
					"signature": "static DaggerMethodScanner create(Predicate\u003cMethod\u003e predicate)",
					"documentation": "/**\n * A scanner to process provider methods on Dagger modules.\n *\n * @author cgruber@google.com (Christian Gruber)\n */"
				},
				{
					"signature": "@Override\n  public ImmutableSet\u003cClass\u003c? extends Annotation\u003e\u003e annotationClasses()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cT\u003e Key\u003cT\u003e prepareMethod(\n      Binder binder, Annotation annotation, Key\u003cT\u003e key, InjectionPoint injectionPoint)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e void configureBindsKey(Binder binder, Method method, Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Key\u003cT\u003e processMultibindingAnnotations(\n      Binder binder, Method method, Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Key\u003cT\u003e processSetBinding(Binder binder, Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK, V\u003e Key\u003cV\u003e processMapBinding(Binder binder, Key\u003cV\u003e key, Method method)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK\u003e MapKeyData\u003cK\u003e mapKeyData(Method method)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Multibinder\u003cT\u003e newSetBinder(\n      Binder binder, TypeLiteral\u003cT\u003e typeLiteral, Annotation possibleAnnotation)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cK, V\u003e MapBinder\u003cK, V\u003e newMapBinder(\n      Binder binder,\n      TypeLiteral\u003cK\u003e keyType,\n      TypeLiteral\u003cV\u003e valueType,\n      Annotation possibleAnnotation)",
					"documentation": ""
				},
				{
					"signature": "private \u003cT\u003e void configureMultibindsKey(Binder binder, Method method, Key\u003cT\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object object)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "private DaggerMethodScanner(Predicate\u003cMethod\u003e predicate)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.multibindings.OptionalBinder",
				"com.google.inject.daggeradapter.Annotations",
				"com.google.inject.daggeradapter.SupportedAnnotations"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.daggeradapter.DaggerMethodScanner.MapKeyData"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerMethodScanner.MapKeyData",
			"extends": "",
			"Methods": [
				{
					"signature": "MapKeyData(TypeLiteral\u003cK\u003e typeLiteral, K key)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    static \u003cK\u003e MapKeyData\u003cK\u003e create(TypeLiteral\u003c?\u003e typeLiteral, Object key)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Utility methods for creating {@link Key}s. */",
			"name": "com.google.inject.daggeradapter.Keys",
			"extends": "",
			"Methods": [
				{
					"signature": "static Key\u003c?\u003e parameterKey(Parameter parameter)",
					"documentation": "/** Utility methods for creating {@link Key}s. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.daggeradapter.Annotations"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Collections of annotations that are supported by {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.SupportedAnnotations",
			"extends": "",
			"Methods": [
				{
					"signature": "static ImmutableSet\u003cClass\u003c? extends Annotation\u003e\u003e supportedBindingAnnotations()",
					"documentation": "/** Returns all binding annotations supported by {@link DaggerAdapter}. */"
				},
				{
					"signature": "static boolean isAnnotationSupported(Class\u003c? extends Annotation\u003e annotation)",
					"documentation": "/**\n   * Returns true if {@code annotation} is in a dagger package and is supported by {@link\n   * DaggerAdapter}.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerMethodScanner"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BindingSubject",
			"extends": "com.google.common.truth.Subject",
			"Methods": [
				{
					"signature": "static BindingSubject assertThat(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private BindingSubject(FailureMetadata metadata, Binding\u003c?\u003e actual)",
					"documentation": ""
				},
				{
					"signature": "void hasSource(Class\u003c?\u003e moduleClass, String moduleMethod, Class\u003c?\u003e... moduleMethodArgs)",
					"documentation": ""
				},
				{
					"signature": "Subject hasProvidedValueThat()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.BindsTest",
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.OptionalBindingsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests of {@link Binds} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.BindsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBinds()",
					"documentation": ""
				},
				{
					"signature": "public void testMultibindings()",
					"documentation": ""
				},
				{
					"signature": "public void testScopedMultibindings()",
					"documentation": ""
				},
				{
					"signature": "public void testQualifiers()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.daggeradapter.BindingSubject",
				"com.google.inject.daggeradapter.BindsTest.CountingMultibindingProviderModule",
				"com.google.inject.daggeradapter.ProvidesQualifier",
				"com.google.inject.daggeradapter.BindsQualifier"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.BasicModule",
				"com.google.inject.daggeradapter.BindsTest.CountingMultibindingProviderModule",
				"com.google.inject.daggeradapter.MultibindingBindsModule",
				"com.google.inject.daggeradapter.ScopedMultibindingBindsModule",
				"com.google.inject.daggeradapter.ProvidesQualifier",
				"com.google.inject.daggeradapter.BindsQualifier",
				"com.google.inject.daggeradapter.QualifiedBinds"
			]
		},
		{
			"documentation": "/** Tests of {@link Binds} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.BasicModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    static String string()",
					"documentation": "/** Tests of {@link Binds} support in {@link DaggerAdapter}. */"
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BindsTest.CountingMultibindingProviderModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    String provider()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.BindsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.MultibindingBindsModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ScopedMultibindingBindsModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ProvidesQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.BindsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.QualifiedBinds"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BindsQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.BindsTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.QualifiedBinds"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.QualifiedBinds",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    @ProvidesQualifier\n    static String provides()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.ProvidesQualifier",
				"com.google.inject.daggeradapter.BindsQualifier"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link DaggerAdapter}.\n *\n * @author cgruber@google.com (Christian Gruber)\n */",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testSimpleModule()",
					"documentation": ""
				},
				{
					"signature": "public void testInteractionWithGuiceModules()",
					"documentation": ""
				},
				{
					"signature": "public void testSetBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testSetBindingsWithAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testSetBindingsWithGuiceModule()",
					"documentation": ""
				},
				{
					"signature": "public void testUnsupportedBindingAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testUnsupportedBindingAnnotationFromModuleSuperclass()",
					"documentation": ""
				},
				{
					"signature": "public void testStaticProvidesMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testStaticProvidesMethods_classLiteral()",
					"documentation": ""
				},
				{
					"signature": "public void testStaticProvidesMethods_interface()",
					"documentation": ""
				},
				{
					"signature": "public void testClassLiteralWithInstanceProvidesMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testUnrelatedInstanceMethodsDontRequireInstantiation()",
					"documentation": ""
				},
				{
					"signature": "public void testClassLiteralWithNonInstantiableInstanceProvidesMethod()",
					"documentation": ""
				},
				{
					"signature": "public void testModuleObjectsMustBeDaggerModules()",
					"documentation": ""
				},
				{
					"signature": "public void testProducerModulesNotSupported()",
					"documentation": ""
				},
				{
					"signature": "public void testFilteringMethods()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.Multibinder",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SimpleDaggerModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SimpleGuiceModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule1",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule2",
				"com.google.inject.daggeradapter.AnnotationOnSet",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingWithAnnotationDaggerModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.MultibindingGuiceModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationSubclassModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.StaticProvidesMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithUnrelatedInstanceMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithNonInstantiableInstanceMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ProducerModuleWithProvidesMethod",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore.InterfaceImpl"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.DaggerAdapterTest.SimpleDaggerModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SimpleGuiceModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule1",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule2",
				"com.google.inject.daggeradapter.AnnotationOnSet",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingWithAnnotationDaggerModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.MultibindingGuiceModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationStaticModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationSubclassModule",
				"com.google.inject.daggeradapter.DaggerAdapterTest.StaticProvidesMethods",
				"com.google.inject.daggeradapter.StaticProvidesMethodsInterface",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithInstanceMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithUnrelatedInstanceMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithNonInstantiableInstanceMethods",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ProducerModuleWithProvidesMethod",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore"
			]
		},
		{
			"documentation": "/**\n * Tests for {@link DaggerAdapter}.\n *\n * @author cgruber@google.com (Christian Gruber)\n */",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.SimpleDaggerModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    Integer anInteger()",
					"documentation": "/**\n * Tests for {@link DaggerAdapter}.\n *\n * @author cgruber@google.com (Christian Gruber)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.SimpleGuiceModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    String aString(Integer i)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule1",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoSet\n    Integer anInteger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingDaggerModule2",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoSet\n    Integer anInteger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.AnnotationOnSet",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingWithAnnotationDaggerModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.SetBindingWithAnnotationDaggerModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoSet\n    @AnnotationOnSet\n    Integer anInteger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.AnnotationOnSet"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.MultibindingGuiceModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.Multibinder"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @ElementsIntoSet\n    Set\u003cObject\u003e noGuiceEquivalentForElementsIntoSet()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationSubclassModule"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationStaticModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @ElementsIntoSet\n    static Set\u003cObject\u003e noGuiceEquivalentForElementsIntoSet()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationSubclassModule",
			"extends": "com.google.inject.daggeradapter.DaggerAdapterTest.UnsupportedAnnotationModule",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.StaticProvidesMethods",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    static String string()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.StaticProvidesMethodsInterface",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    static String string()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithInstanceMethods",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    int i()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithUnrelatedInstanceMethods",
			"extends": "",
			"Methods": [
				{
					"signature": "ModuleWithUnrelatedInstanceMethods(int i)",
					"documentation": ""
				},
				{
					"signature": "@dagger.Provides\n    static int i()",
					"documentation": ""
				},
				{
					"signature": "Object object()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithNonInstantiableInstanceMethods",
			"extends": "",
			"Methods": [
				{
					"signature": "ModuleWithNonInstantiableInstanceMethods(int i)",
					"documentation": ""
				},
				{
					"signature": "@dagger.Provides\n    int i()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ProducerModuleWithProvidesMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    int i()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    static String string()",
					"documentation": ""
				},
				{
					"signature": "@dagger.Provides\n    static int ignore()",
					"documentation": ""
				},
				{
					"signature": "private ModuleWithMethodsToIgnore()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore.InterfaceImpl"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.daggeradapter.Inerface",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore.InterfaceImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.Inerface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore.InterfaceImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore.InterfaceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n      InterfaceImpl()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String string()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.daggeradapter.Inerface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.DaggerAdapterTest",
				"com.google.inject.daggeradapter.DaggerAdapterTest.ModuleWithMethodsToIgnore"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** {@link IntoMap} tests for {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.IntoMapTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testMapBindings()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBindingsWithAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testMapBindingsWithGuiceModule()",
					"documentation": ""
				},
				{
					"signature": "public void testWrappedMapKeys()",
					"documentation": ""
				},
				{
					"signature": "private static void assertWrappedEquals(int i, long l, String defaultValue, Wrapped actual)",
					"documentation": ""
				},
				{
					"signature": "public void testBinds()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingRuntimeRetention()",
					"documentation": ""
				},
				{
					"signature": "public void testMissingRuntimeRetentionUsingBinds()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.multibindings.MapBinder",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule1",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule2",
				"com.google.inject.daggeradapter.AnnotationOnMap",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingWithAnnotationDaggerModule",
				"com.google.inject.daggeradapter.IntoMapTest.MultibindingGuiceModule",
				"com.google.inject.daggeradapter.Wrapped",
				"com.google.inject.daggeradapter.IntoMapTest.WrappedMapKeyModule",
				"com.google.inject.daggeradapter.CustomMapKey",
				"com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule1",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule2",
				"com.google.inject.daggeradapter.AnnotationOnMap",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingWithAnnotationDaggerModule",
				"com.google.inject.daggeradapter.IntoMapTest.MultibindingGuiceModule",
				"com.google.inject.daggeradapter.Wrapped",
				"com.google.inject.daggeradapter.IntoMapTest.WrappedMapKeyModule",
				"com.google.inject.daggeradapter.IntoMapTest.HasConflict",
				"com.google.inject.daggeradapter.BindsModule",
				"com.google.inject.daggeradapter.CustomMapKey",
				"com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionModule",
				"com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionBindsModule"
			]
		},
		{
			"documentation": "/** {@link IntoMap} tests for {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule1",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @StringKey(\"five\")\n    Integer boxedPrimitive()",
					"documentation": "/** {@link IntoMap} tests for {@link DaggerAdapter}. */"
				},
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @StringKey(\"ten\")\n    int primitive()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MapBindingDaggerModule2",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @StringKey(\"twenty\")\n    Integer anInteger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.AnnotationOnMap",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.IntoMapTest.MapBindingWithAnnotationDaggerModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MapBindingWithAnnotationDaggerModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @StringKey(\"qualified\")\n    @AnnotationOnMap\n    Integer anInteger()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.AnnotationOnMap"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MultibindingGuiceModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.MapBinder"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.Wrapped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.IntoMapTest.WrappedMapKeyModule",
				"com.google.inject.daggeradapter.IntoMapTest.HasConflict"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.WrappedMapKeyModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @Wrapped(i = 0, l = 0)\n    int defaultValue()",
					"documentation": ""
				},
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @Wrapped(i = 1, l = 1, defaultValue = \"1\")\n    int ones()",
					"documentation": ""
				},
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @Wrapped(i = 2, l = 2, defaultValue = \"2\")\n    int twos()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.Wrapped"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.HasConflict",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @Wrapped(i = 1, l = 1, defaultValue = \"1\")\n    int ones()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.Wrapped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BindsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    static String world()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.CustomMapKey",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.daggeradapter.IntoMapTest",
				"com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionModule",
				"com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionBindsModule"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    @IntoMap\n    @CustomMapKey(\"hello\")\n    String binds()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.CustomMapKey"
			],
			"usedBy": [
				"com.google.inject.daggeradapter.IntoMapTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.IntoMapTest.MissingRuntimeRetentionBindsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "@dagger.Provides\n    static String provideValue()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.CustomMapKey"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@code @Module.includes} */",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testIncludedModules()",
					"documentation": ""
				},
				{
					"signature": "public void testDeduplicated()",
					"documentation": ""
				},
				{
					"signature": "public void testInstanceOfModuleAndClassLiteral()",
					"documentation": ""
				},
				{
					"signature": "public void testDeduplicatedModulesFromSeparateDaggerAdapters()",
					"documentation": ""
				},
				{
					"signature": "public void testConflictingModuleInstances()",
					"documentation": ""
				},
				{
					"signature": "public void testInstanceOfModuleAndClassLiteral_InstanceWins()",
					"documentation": ""
				},
				{
					"signature": "public void testIncludesInstanceModule()",
					"documentation": ""
				},
				{
					"signature": "public void testIncludesNonInstantiableInstanceModule()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.ModuleIncludesTest.Declared",
				"com.google.inject.daggeradapter.ModuleIncludesTest.Included",
				"com.google.inject.daggeradapter.ModuleIncludesTest.Deduplicated",
				"com.google.inject.daggeradapter.ModuleIncludesTest.Includes1",
				"com.google.inject.daggeradapter.ModuleIncludesTest.Includes2",
				"com.google.inject.daggeradapter.ModuleIncludesTest.ModuleWithIdentity",
				"com.google.inject.daggeradapter.ModuleIncludesTest.ModuleWithInstanceProvidesMethod",
				"com.google.inject.daggeradapter.ModuleIncludesTest.IncludesInstanceModule",
				"com.google.inject.daggeradapter.ModuleIncludesTest.NonInstantiableModuleWithInstanceProvidesMethod",
				"com.google.inject.daggeradapter.ModuleIncludesTest.IncludesNonInstantiableInstanceModule"
			]
		},
		{
			"documentation": "/** Tests for {@code @Module.includes} */",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.Declared",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    static Object object()",
					"documentation": "/** Tests for {@code @Module.includes} */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.Included",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    static String string(Object object)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.Deduplicated",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    static String string()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.Includes1",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.Includes2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.ModuleWithIdentity",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.ModuleWithInstanceProvidesMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "@Provides\n    int i()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.IncludesInstanceModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.NonInstantiableModuleWithInstanceProvidesMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "NonInstantiableModuleWithInstanceProvidesMethod(int i)",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    int i()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.ModuleIncludesTest.IncludesNonInstantiableInstanceModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests for {@code @Module(subcomponents = Foo.class)} */",
			"name": "com.google.inject.daggeradapter.ModuleSubcomponentsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testModuleSubcomponentsNotSupported()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.ModuleSubcomponentsTest.ModuleWithSubcomponents",
				"com.google.inject.daggeradapter.TestSubcomponent"
			]
		},
		{
			"documentation": "/** Tests for {@code @Module(subcomponents = Foo.class)} */",
			"name": "com.google.inject.daggeradapter.ModuleSubcomponentsTest.ModuleWithSubcomponents",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.TestSubcomponent",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.daggeradapter.Builder"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.Builder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests of {@link Multibinds} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.MultibindsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBinds()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.daggeradapter.BindingSubject",
				"com.google.inject.daggeradapter.TestQualifier"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.TestQualifier",
				"com.google.inject.daggeradapter.BasicModule"
			]
		},
		{
			"documentation": "/** Tests of {@link Multibinds} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.TestQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.BasicModule",
				"com.google.inject.daggeradapter.OptionalBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BasicModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.TestQualifier"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests of {@link BindsOptionalOf} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.OptionalBindingsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBinds()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.daggeradapter.BindingSubject",
				"com.google.inject.daggeradapter.TestQualifier"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.daggeradapter.TestQualifier",
				"com.google.inject.daggeradapter.BasicModule"
			]
		},
		{
			"documentation": "/** Tests of {@link BindsOptionalOf} support in {@link DaggerAdapter}. */",
			"name": "com.google.inject.daggeradapter.TestQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.daggeradapter.MultibindsTest",
				"com.google.inject.daggeradapter.BasicModule",
				"com.google.inject.daggeradapter.OptionalBindingsTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.daggeradapter.BasicModule",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.daggeradapter.TestQualifier"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Abstract injector grapher that builds the dependency graph but doesn't render it.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.AbstractInjectorGrapher",
			"extends": "",
			"Methods": [
				{
					"signature": "public AbstractInjectorGrapher()",
					"documentation": ""
				},
				{
					"signature": "public AbstractInjectorGrapher(GrapherParameters options)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final void graph(Injector injector) throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final void graph(Injector injector, Set\u003cKey\u003c?\u003e\u003e root) throws IOException",
					"documentation": ""
				},
				{
					"signature": "private void createNodes(Iterable\u003cNode\u003e nodes, Map\u003cNodeId, NodeId\u003e aliases) throws IOException",
					"documentation": "/** Performs any post processing required after all nodes and edges have been added. */"
				},
				{
					"signature": "private void createEdges(Iterable\u003cEdge\u003e edges, Map\u003cNodeId, NodeId\u003e aliases) throws IOException",
					"documentation": ""
				},
				{
					"signature": "private NodeId resolveAlias(Map\u003cNodeId, NodeId\u003e aliases, NodeId nodeId)",
					"documentation": ""
				},
				{
					"signature": "private Map\u003cNodeId, NodeId\u003e resolveAliases(Iterable\u003cAlias\u003e aliases)",
					"documentation": "/**\n   * Transitively resolves aliases. Given aliases (X to Y) and (Y to Z), it will return mappings (X\n   * to Z) and (Y to Z).\n   */"
				},
				{
					"signature": "private Iterable\u003cBinding\u003c?\u003e\u003e getBindings(Injector injector, Set\u003cKey\u003c?\u003e\u003e root)",
					"documentation": "/** Returns the bindings for the root keys and their transitive dependencies. */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.InjectorGrapher"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest.FakeGrapher"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.grapher.AbstractInjectorGrapher.GrapherParameters"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.AbstractInjectorGrapher.GrapherParameters"
			]
		},
		{
			"documentation": "/**\n   * Parameters used to override default settings of the grapher.\n   *\n   * @since 4.0\n   */",
			"name": "com.google.inject.grapher.AbstractInjectorGrapher.GrapherParameters",
			"extends": "",
			"Methods": [
				{
					"signature": "public RootKeySetCreator getRootKeySetCreator()",
					"documentation": "/**\n   * Parameters used to override default settings of the grapher.\n   *\n   * @since 4.0\n   */"
				},
				{
					"signature": "public GrapherParameters setRootKeySetCreator(RootKeySetCreator rootKeySetCreator)",
					"documentation": ""
				},
				{
					"signature": "public AliasCreator getAliasCreator()",
					"documentation": ""
				},
				{
					"signature": "public GrapherParameters setAliasCreator(AliasCreator aliasCreator)",
					"documentation": ""
				},
				{
					"signature": "public NodeCreator getNodeCreator()",
					"documentation": ""
				},
				{
					"signature": "public GrapherParameters setNodeCreator(NodeCreator nodeCreator)",
					"documentation": ""
				},
				{
					"signature": "public EdgeCreator getEdgeCreator()",
					"documentation": ""
				},
				{
					"signature": "public GrapherParameters setEdgeCreator(EdgeCreator edgeCreator)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapher"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Alias between two nodes. Causes the 'from' node to be aliased with the 'to' node, which means\n * that the 'from' node is not rendered and all edges going to it instead go to the 'to' node.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.Alias",
			"extends": "",
			"Methods": [
				{
					"signature": "public Alias(NodeId fromId, NodeId toId)",
					"documentation": "/**\n * Alias between two nodes. Causes the 'from' node to be aliased with the 'to' node, which means\n * that the 'from' node is not rendered and all edges going to it instead go to the 'to' node.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */"
				},
				{
					"signature": "public NodeId getFromId()",
					"documentation": ""
				},
				{
					"signature": "public NodeId getToId()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creator of node aliases. Used by dependency graphers to merge nodes in the internal Guice graph\n * into a single node on the rendered graph.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.AliasCreator",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.ProviderAliasCreator"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Edge that connects an interface to the type or instance that is bound to implement it.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */",
			"name": "com.google.inject.grapher.BindingEdge",
			"extends": "com.google.inject.grapher.Edge",
			"Methods": [
				{
					"signature": "public BindingEdge(NodeId fromId, NodeId toId, Type type)",
					"documentation": ""
				},
				{
					"signature": "public Type getType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Edge copy(NodeId fromId, NodeId toId)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.Type"
			]
		},
		{
			"documentation": "/** Classification for what kind of binding this edge represents. */",
			"name": "com.google.inject.grapher.Type",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default edge creator.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.DefaultEdgeCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Iterable\u003cEdge\u003e getEdges(Iterable\u003cBinding\u003c?\u003e\u003e bindings)",
					"documentation": "/**\n * Default edge creator.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.EdgeCreator"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.grapher.DefaultEdgeCreator.EdgeVisitor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.grapher.DefaultEdgeCreator.EdgeVisitor"
			]
		},
		{
			"documentation": "/**\n   * {@link BindingTargetVisitor} that adds edges to the graph based on the visited {@link Binding}.\n   */",
			"name": "com.google.inject.grapher.DefaultEdgeCreator.EdgeVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "private \u003cT extends Binding\u003c?\u003e \u0026 HasDependencies\u003e Collection\u003cEdge\u003e newDependencyEdges(\n        NodeId nodeId, T binding)",
					"documentation": "/**\n     * Returns a dependency edge for each {@link Dependency} in the binding. These will be from the\n     * given node ID to the {@link Dependency}'s {@link Key}.\n     *\n     * @param nodeId ID of the node that should be the tail of the dependency edges\n     * @param binding {@link Binding} for the dependencies\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(ConstructorBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link ConstructorBinding}s. These are for classes that Guice will instantiate to\n     * satisfy injection requests.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(ConvertedConstantBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link ConvertedConstantBinding}. The {@link Binding}'s {@link Key} will be of an\n     * annotated primitive type, and the value of {@link ConvertedConstantBinding#getSourceKey()}\n     * will be of a {@link String} with the same annotation.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(InstanceBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link InstanceBinding}. We then render any dependency edgess that the instance\n     * may have, which come either from {@link InjectionPoint}s (method and field) on the instance,\n     * or on {@link Dependency}s the instance declares through the {@link HasDependencies}\n     * interface.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(LinkedKeyBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link LinkedKeyBinding}. This is the standard {@link Binding} you get from\n     * binding an interface class to an implementation class. We draw a {@link BindingEdge} from the\n     * interface node to the node of the implementing class.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(ProviderBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link ProviderBinding}. These {@link Binding}s arise from an {@link\n     * InjectionPoint} for the {@link Provider} interface.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(ProviderInstanceBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Same as {@link #visit(InstanceBinding)}, but the binding edge is {@link\n     * BindingEdge.Type#PROVIDER}.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visit(ProviderKeyBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Same as {@link #visit(LinkedKeyBinding)}, but the binding edge is {@link\n     * BindingEdge.Type#PROVIDER}.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cEdge\u003e visitOther(Binding\u003c?\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.DefaultEdgeCreator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default node creator.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.DefaultNodeCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Iterable\u003cNode\u003e getNodes(Iterable\u003cBinding\u003c?\u003e\u003e bindings)",
					"documentation": "/**\n * Default node creator.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.NodeCreator"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.grapher.DefaultNodeCreator.NodeVisitor"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.grapher.DefaultNodeCreator.NodeVisitor"
			]
		},
		{
			"documentation": "/**\n   * {@link BindingTargetVisitor} that adds nodes to the graph based on the visited {@link Binding}.\n   */",
			"name": "com.google.inject.grapher.DefaultNodeCreator.NodeVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "private InterfaceNode newInterfaceNode(Binding\u003c?\u003e binding)",
					"documentation": "/** Returns a new interface node for the given {@link Binding}. */"
				},
				{
					"signature": "private ImplementationNode newImplementationNode(\n        Binding\u003c?\u003e binding, Collection\u003cMember\u003e members)",
					"documentation": "/**\n     * Returns a new implementation node for the given binding.\n     *\n     * @param binding binding for the node to create\n     * @param members members to add to the node\n     * @return implementation node for the given binding\n     */"
				},
				{
					"signature": "private \u003cT extends Binding\u003c?\u003e \u0026 HasDependencies\u003e InstanceNode newInstanceNode(\n        T binding, Object instance)",
					"documentation": "/**\n     * Returns a new instance node for the given {@link Binding}.\n     *\n     * @param binding binding for the node to create\n     * @param instance value of the instance\n     * @return instance node for the given binding\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cNode\u003e visit(ConstructorBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link ConstructorBinding}s. These are for classes that Guice will instantiate to\n     * satisfy injection requests.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cNode\u003e visit(InstanceBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Visitor for {@link InstanceBinding}. We render two nodes in this case: an interface node for\n     * the binding's {@link Key}, and then an implementation node for the instance {@link Object}\n     * itself.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cNode\u003e visit(ProviderInstanceBinding\u003c?\u003e binding)",
					"documentation": "/**\n     * Same as {@link #visit(InstanceBinding)}, but the binding edge is {@link\n     * BindingEdgeType#PROVIDER}.\n     */"
				},
				{
					"signature": "@Override\n    public Collection\u003cNode\u003e visitOther(Binding\u003c?\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.DefaultNodeCreator"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Root key set creator that starts with all types that are not Guice internal types or the {@link\n * Logger} type.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.DefaultRootKeySetCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Set\u003cKey\u003c?\u003e\u003e getRootKeys(Injector injector)",
					"documentation": "/**\n * Root key set creator that starts with all types that are not Guice internal types or the {@link\n * Logger} type.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.RootKeySetCreator"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Edge from a class or {@link InjectionPoint} to the interface node that will satisfy the\n * dependency.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */",
			"name": "com.google.inject.grapher.DependencyEdge",
			"extends": "com.google.inject.grapher.Edge",
			"Methods": [
				{
					"signature": "public DependencyEdge(NodeId fromId, NodeId toId, InjectionPoint injectionPoint)",
					"documentation": "/**\n   * Injection point to which this dependency belongs, or null if the dependency isn't attached to a\n   * particular injection point.\n   */"
				},
				{
					"signature": "public InjectionPoint getInjectionPoint()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Edge copy(NodeId fromId, NodeId toId)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Edge in a guice dependency graph.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.Edge",
			"extends": "",
			"Methods": [
				{
					"signature": "protected Edge(NodeId fromId, NodeId toId)",
					"documentation": "/**\n * Edge in a guice dependency graph.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */"
				},
				{
					"signature": "public NodeId getFromId()",
					"documentation": ""
				},
				{
					"signature": "public NodeId getToId()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.grapher.BindingEdge",
				"com.google.inject.grapher.DependencyEdge"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creator of graph edges to render. All edges will be rendered on the graph after node aliasing is\n * performed.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.EdgeCreator",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.DefaultEdgeCreator"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Node for types that have {@link com.google.inject.spi.Dependency}s and are bound to {@link\n * InterfaceNode}s. These nodes will often have fields for {@link Member}s that are {@link\n * com.google.inject.spi.InjectionPoint}s.\n *\n * @see DependencyEdge\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */",
			"name": "com.google.inject.grapher.ImplementationNode",
			"extends": "com.google.inject.grapher.Node",
			"Methods": [
				{
					"signature": "public ImplementationNode(NodeId id, Object source, Collection\u003cMember\u003e members)",
					"documentation": "/**\n * Node for types that have {@link com.google.inject.spi.Dependency}s and are bound to {@link\n * InterfaceNode}s. These nodes will often have fields for {@link Member}s that are {@link\n * com.google.inject.spi.InjectionPoint}s.\n *\n * @see DependencyEdge\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */"
				},
				{
					"signature": "public Collection\u003cMember\u003e getMembers()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Node copy(NodeId id)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Guice injector grapher. Renders the guice dependency graph for an injector. It can render the\n * whole dependency graph or just transitive dependencies of a given set of nodes.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as a concrete class with a different API)\n */",
			"name": "com.google.inject.grapher.InjectorGrapher",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapher"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Node for instances. Used when a type is bound to an instance.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.InstanceNode",
			"extends": "com.google.inject.grapher.Node",
			"Methods": [
				{
					"signature": "public InstanceNode(NodeId id, Object source, Object instance, Iterable\u003cMember\u003e members)",
					"documentation": "/**\n * Node for instances. Used when a type is bound to an instance.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */"
				},
				{
					"signature": "public Object getInstance()",
					"documentation": ""
				},
				{
					"signature": "public Iterable\u003cMember\u003e getMembers()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Node copy(NodeId id)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Node for an interface type that has been bound to an implementation class or instance.\n *\n * @see BindingEdge\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */",
			"name": "com.google.inject.grapher.InterfaceNode",
			"extends": "com.google.inject.grapher.Node",
			"Methods": [
				{
					"signature": "public InterfaceNode(NodeId id, Object source)",
					"documentation": "/**\n * Node for an interface type that has been bound to an implementation class or instance.\n *\n * @see BindingEdge\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0 (since 2.0 as an interface)\n */"
				},
				{
					"signature": "@Override\n  public Node copy(NodeId id)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Interface for a service that provides nice {@link String}s that we can display in the graph for\n * the types that come up in {@link com.google.inject.Binding}s.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.NameFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.ShortNameFactory"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Node in a guice dependency graph.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.Node",
			"extends": "",
			"Methods": [
				{
					"signature": "protected Node(NodeId id, Object source)",
					"documentation": "/**\n   * When set to true, the source object is ignored in {@link #equals} and {@link #hashCode}. Only\n   * used in tests.\n   */"
				},
				{
					"signature": "public NodeId getId()",
					"documentation": ""
				},
				{
					"signature": "public Object getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.grapher.ImplementationNode",
				"com.google.inject.grapher.InstanceNode",
				"com.google.inject.grapher.InterfaceNode"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creator of graph nodes.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.NodeCreator",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.DefaultNodeCreator"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * ID of a node in the graph. An ID is given by a {@link Key} and a node type, which is used to\n * distinguish instances and implementation classes for the same key. For example {@code\n * bind(Integer.class).toInstance(42)} produces two nodes: an interface node with the key of {@code\n * Key\u003cInteger\u003e} and an instance node with the same {@link Key} and value of 42.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.NodeId",
			"extends": "",
			"Methods": [
				{
					"signature": "private NodeId(Key\u003c?\u003e key, NodeType nodeType)",
					"documentation": ""
				},
				{
					"signature": "public static NodeId newTypeId(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public static NodeId newInstanceId(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "public Key\u003c?\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.NodeType"
			]
		},
		{
			"documentation": "/**\n   * Type of node.\n   *\n   * @since 4.0\n   */",
			"name": "com.google.inject.grapher.NodeType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Alias creator that creates an alias for each {@link ProviderBinding}. These {@link Binding}s\n * arise from an {@link InjectionPoint} for the {@link Provider} interface. Since this isn't very\n * interesting information, we don't render this binding on the graph, and just alias the two nodes.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.ProviderAliasCreator",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Iterable\u003cAlias\u003e createAliases(Iterable\u003cBinding\u003c?\u003e\u003e bindings)",
					"documentation": "/**\n * Alias creator that creates an alias for each {@link ProviderBinding}. These {@link Binding}s\n * arise from an {@link InjectionPoint} for the {@link Provider} interface. Since this isn't very\n * interesting information, we don't render this binding on the graph, and just alias the two nodes.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.AliasCreator"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creator of the default starting set of keys to graph. These keys and their transitive\n * dependencies will be graphed.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.RootKeySetCreator",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.DefaultRootKeySetCreator"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Reasonable implementation for {@link NameFactory}. Mostly takes various {@link\n * Object#toString()}s and strips package names out of them so that they'll fit on the graph.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.ShortNameFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public String getMemberName(Member member)",
					"documentation": "/**\n * Reasonable implementation for {@link NameFactory}. Mostly takes various {@link\n * Object#toString()}s and strips package names out of them so that they'll fit on the graph.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public String getAnnotationName(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getClassName(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getInstanceName(Object instance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getSourceName(Object source)",
					"documentation": "/**\n   * Returns a name for a Guice \"source\" object. This will typically be either a {@link\n   * StackTraceElement} for when the binding is made to the instance, or a {@link Method} when a\n   * provider method is used.\n   */"
				},
				{
					"signature": "protected String getFileString(StackTraceElement stackTraceElement)",
					"documentation": ""
				},
				{
					"signature": "protected String getMethodString(Method method)",
					"documentation": ""
				},
				{
					"signature": "private String stripPackages(String str)",
					"documentation": "/**\n   * Eliminates runs of lowercase characters and numbers separated by periods. Seems to remove\n   * packages from fully-qualified type names pretty well.\n   */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.NameFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.StackTraceElements"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link com.google.inject.spi.BindingTargetVisitor} that returns a {@link Collection} of the\n * {@link Key}s of each {@link Binding}'s dependencies. Used by {@link InjectorGrapher} to walk the\n * dependency graph from a starting set of {@link Binding}s.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "private Collection\u003cKey\u003c?\u003e\u003e visitHasDependencies(HasDependencies hasDependencies)",
					"documentation": "/**\n * {@link com.google.inject.spi.BindingTargetVisitor} that returns a {@link Collection} of the\n * {@link Key}s of each {@link Binding}'s dependencies. Used by {@link InjectorGrapher} to walk the\n * dependency graph from a starting set of {@link Binding}s.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(ConstructorBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(ConvertedConstantBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(InstanceBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(LinkedKeyBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(ProviderBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(ProviderInstanceBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visit(ProviderKeyBinding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Collection\u003cKey\u003c?\u003e\u003e visitOther(Binding\u003c?\u003e binding)",
					"documentation": "/** @since 4.0 */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Arrow symbols that are available from Graphviz. These can be composed by concatenation to make\n * double arrows and such.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/arrows.html\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.ArrowType",
			"extends": "",
			"Methods": [
				{
					"signature": "ArrowType(String arrowType)",
					"documentation": "/**\n * Arrow symbols that are available from Graphviz. These can be composed by concatenation to make\n * double arrows and such.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/arrows.html\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Enum for the \"compass point\" values used to control where edge end points appear on the graph.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/attrs.html#k:portPos\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.CompassPoint",
			"extends": "",
			"Methods": [
				{
					"signature": "CompassPoint(String compassPt)",
					"documentation": "/** Graphviz \"compass_pt\" value. */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Styles for edges.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/attrs.html#k:style\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.EdgeStyle",
			"extends": "",
			"Methods": [
				{
					"signature": "EdgeStyle(String name)",
					"documentation": "/**\n * Styles for edges.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/attrs.html#k:style\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotation for types used by the graphviz grapher.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.graphviz.Graphviz",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Data object to encapsulate the attributes of Graphviz edges that we're interested in drawing.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.GraphvizEdge",
			"extends": "",
			"Methods": [
				{
					"signature": "public GraphvizEdge(NodeId tailNodeId, NodeId headNodeId)",
					"documentation": "/**\n * Data object to encapsulate the attributes of Graphviz edges that we're interested in drawing.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "public NodeId getHeadNodeId()",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public String getHeadPortId()",
					"documentation": ""
				},
				{
					"signature": "public void setHeadPortId(String headPortId)",
					"documentation": ""
				},
				{
					"signature": "public CompassPoint getHeadCompassPoint()",
					"documentation": ""
				},
				{
					"signature": "public void setHeadCompassPoint(CompassPoint headCompassPoint)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cArrowType\u003e getArrowHead()",
					"documentation": ""
				},
				{
					"signature": "public void setArrowHead(List\u003cArrowType\u003e arrowHead)",
					"documentation": ""
				},
				{
					"signature": "public NodeId getTailNodeId()",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public String getTailPortId()",
					"documentation": ""
				},
				{
					"signature": "public void setTailPortId(String tailPortId)",
					"documentation": ""
				},
				{
					"signature": "public CompassPoint getTailCompassPoint()",
					"documentation": ""
				},
				{
					"signature": "public void setTailCompassPoint(CompassPoint tailCompassPoint)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cArrowType\u003e getArrowTail()",
					"documentation": ""
				},
				{
					"signature": "public void setArrowTail(List\u003cArrowType\u003e arrowTail)",
					"documentation": ""
				},
				{
					"signature": "public EdgeStyle getStyle()",
					"documentation": ""
				},
				{
					"signature": "public void setStyle(EdgeStyle style)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * {@link com.google.inject.grapher.InjectorGrapher} implementation that writes out a Graphviz DOT\n * file of the graph. Dependencies are bound in {@link GraphvizModule}.\n *\n * \u003cp\u003eSpecify the {@link PrintWriter} to output to with {@link #setOut(PrintWriter)}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0\n */",
			"name": "com.google.inject.grapher.graphviz.GraphvizGrapher",
			"extends": "com.google.inject.grapher.AbstractInjectorGrapher",
			"Methods": [
				{
					"signature": "@Inject\n  GraphvizGrapher(@Graphviz NameFactory nameFactory, @Graphviz PortIdFactory portIdFactory)",
					"documentation": "/**\n * {@link com.google.inject.grapher.InjectorGrapher} implementation that writes out a Graphviz DOT\n * file of the graph. Dependencies are bound in {@link GraphvizModule}.\n *\n * \u003cp\u003eSpecify the {@link PrintWriter} to output to with {@link #setOut(PrintWriter)}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n * @since 4.0\n */"
				},
				{
					"signature": "@Override\n  protected void reset()",
					"documentation": ""
				},
				{
					"signature": "public void setOut(PrintWriter out)",
					"documentation": ""
				},
				{
					"signature": "public void setRankdir(String rankdir)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void postProcess()",
					"documentation": ""
				},
				{
					"signature": "protected Map\u003cString, String\u003e getGraphAttributes()",
					"documentation": ""
				},
				{
					"signature": "protected void start()",
					"documentation": ""
				},
				{
					"signature": "protected void finish()",
					"documentation": ""
				},
				{
					"signature": "protected void renderNode(GraphvizNode node)",
					"documentation": ""
				},
				{
					"signature": "protected Map\u003cString, String\u003e getNodeAttributes(GraphvizNode node)",
					"documentation": ""
				},
				{
					"signature": "protected String getNodeLabel(GraphvizNode node)",
					"documentation": "/**\n   * Creates the \"label\" for a node. This is a string of HTML that defines a table with a heading at\n   * the top and (in the case of {@link ImplementationNode}s) rows for each of the member fields.\n   */"
				},
				{
					"signature": "protected void renderEdge(GraphvizEdge edge)",
					"documentation": ""
				},
				{
					"signature": "protected Map\u003cString, String\u003e getEdgeAttributes(GraphvizEdge edge)",
					"documentation": ""
				},
				{
					"signature": "private String getAttrString(Map\u003cString, String\u003e attrs)",
					"documentation": ""
				},
				{
					"signature": "protected String getArrowString(List\u003cArrowType\u003e arrows)",
					"documentation": "/**\n   * Turns a {@link List} of {@link ArrowType}s into a {@link String} that represents combining\n   * them. With Graphviz, that just means concatenating them.\n   */"
				},
				{
					"signature": "protected String getEdgeEndPoint(String nodeId, String portId, CompassPoint compassPoint)",
					"documentation": ""
				},
				{
					"signature": "protected String htmlEscape(String str)",
					"documentation": ""
				},
				{
					"signature": "protected List\u003cString\u003e htmlEscape(List\u003cString\u003e elements)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void newInterfaceNode(InterfaceNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void newImplementationNode(ImplementationNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void newInstanceNode(InstanceNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void newDependencyEdge(DependencyEdge edge)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void newBindingEdge(BindingEdge edge)",
					"documentation": ""
				},
				{
					"signature": "private void addNode(GraphvizNode node)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Module that provides classes needed by {@link GraphvizGrapher}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.GraphvizModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": "/**\n * Module that provides classes needed by {@link GraphvizGrapher}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.demo.InjectorGrapherDemo"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Data object to encapsulate the attributes of Graphviz nodes that we're interested in drawing.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.GraphvizNode",
			"extends": "",
			"Methods": [
				{
					"signature": "public GraphvizNode(NodeId nodeId)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public NodeId getNodeId()",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public NodeShape getShape()",
					"documentation": ""
				},
				{
					"signature": "public void setShape(NodeShape shape)",
					"documentation": ""
				},
				{
					"signature": "public NodeStyle getStyle()",
					"documentation": ""
				},
				{
					"signature": "public void setStyle(NodeStyle style)",
					"documentation": ""
				},
				{
					"signature": "public String getTitle()",
					"documentation": ""
				},
				{
					"signature": "public void setTitle(String title)",
					"documentation": ""
				},
				{
					"signature": "public List\u003cString\u003e getSubtitles()",
					"documentation": ""
				},
				{
					"signature": "public void addSubtitle(int position, String subtitle)",
					"documentation": ""
				},
				{
					"signature": "public String getHeaderTextColor()",
					"documentation": ""
				},
				{
					"signature": "public void setHeaderTextColor(String headerTextColor)",
					"documentation": ""
				},
				{
					"signature": "public String getHeaderBackgroundColor()",
					"documentation": ""
				},
				{
					"signature": "public void setHeaderBackgroundColor(String headerBackgroundColor)",
					"documentation": ""
				},
				{
					"signature": "public void addField(String portId, String title)",
					"documentation": ""
				},
				{
					"signature": "public Map\u003cString, String\u003e getFields()",
					"documentation": ""
				},
				{
					"signature": "public String getIdentifier()",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public void setIdentifier(String identifier)",
					"documentation": "/** @since 4.0 */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Enum for the shapes that are most interesting for Guice graphing.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/shapes.html\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.NodeShape",
			"extends": "",
			"Methods": [
				{
					"signature": "NodeShape(String shape)",
					"documentation": "/**\n * Enum for the shapes that are most interesting for Guice graphing.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/shapes.html\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Styles for nodes. Similar to {@link EdgeStyle} but with a few more options.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/attrs.html#k:style\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.NodeStyle",
			"extends": "",
			"Methods": [
				{
					"signature": "NodeStyle(String name)",
					"documentation": "/**\n * Styles for nodes. Similar to {@link EdgeStyle} but with a few more options.\n *\n * \u003cp\u003eSee: http://www.graphviz.org/doc/info/attrs.html#k:style\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Interface for a service that returns Graphviz port IDs, used for naming the rows in {@link\n * com.google.inject.grapher.ImplementationNode}-displaying {@link GraphvizNode}s.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.PortIdFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.graphviz.PortIdFactoryImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Implementation of {@link PortIdFactory}. Bound in {@link GraphvizModule}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.graphviz.PortIdFactoryImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public String getPortId(Member member)",
					"documentation": "/**\n * Implementation of {@link PortIdFactory}. Bound in {@link GraphvizModule}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				}
			],
			"interfaces": [
				"com.google.inject.grapher.graphviz.PortIdFactory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test cases for {@link AbstractInjectorGrapher}. This indirectly tests most classes in this\n * package.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testLinkedAndInstanceBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGraphWithGivenRoot() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.FakeGrapher",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.Wrapper",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A2"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest.FakeGrapher",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.Wrapper",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.Ann",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.IA",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A",
				"com.google.inject.grapher.AbstractInjectorGrapherTest.A2"
			]
		},
		{
			"documentation": "/**\n * Test cases for {@link AbstractInjectorGrapher}. This indirectly tests most classes in this\n * package.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.FakeGrapher",
			"extends": "com.google.inject.grapher.AbstractInjectorGrapher",
			"Methods": [
				{
					"signature": "@Override\n    protected void reset()",
					"documentation": "/**\n * Test cases for {@link AbstractInjectorGrapher}. This indirectly tests most classes in this\n * package.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */"
				},
				{
					"signature": "@Override\n    protected void newInterfaceNode(InterfaceNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void newImplementationNode(ImplementationNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void newInstanceNode(InstanceNode node)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void newDependencyEdge(DependencyEdge edge)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void newBindingEdge(BindingEdge edge)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected void postProcess()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.Wrapper",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.Ann",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.IA",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.A",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public A(String str)",
					"documentation": ""
				}
			],
			"interfaces": [
				"IA"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.AbstractInjectorGrapherTest.A2",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public A2(Provider\u003cString\u003e strProvider)",
					"documentation": ""
				}
			],
			"interfaces": [
				"IA"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.grapher.AbstractInjectorGrapherTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author phopkins@gmail.com (Pete Hopkins) */",
			"name": "com.google.inject.grapher.AllTests",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": "/** @author phopkins@gmail.com (Pete Hopkins) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link ShortNameFactory}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.ShortNameFactoryTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetMemberName_field() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetMemberName_method() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetMemberName_constructor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetAnnotationName_annotationType() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetAnnotationName_annotationInstance() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetAnnotationName_annotationInstanceWithParameters() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetClassName_key() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetClassName_keyWithTypeParameters() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetSourceName_method() throws Exception",
					"documentation": "/**\n   * Tests the case where a provider method is the source of the\n   *\n   * @throws Exception\n   */"
				},
				{
					"signature": "public void testGetSourceName_stackTraceElement() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstanceName_defaultToString() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstanceName_customToString() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstanceName_string() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetInstanceName_providerMethod() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.util.StackTraceElements",
				"com.google.inject.name.Names",
				"com.google.inject.spi.DefaultBindingTargetVisitor",
				"com.google.inject.grapher.ShortNameFactoryTest.ToStringObj",
				"com.google.inject.grapher.ShortNameFactoryTest.ProvidingModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.ShortNameFactoryTest.Obj",
				"com.google.inject.grapher.ShortNameFactoryTest.ToStringObj",
				"com.google.inject.grapher.Annotated",
				"com.google.inject.grapher.ShortNameFactoryTest.ProvidingModule"
			]
		},
		{
			"documentation": "/**\n * Tests for {@link ShortNameFactory}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.ShortNameFactoryTest.Obj",
			"extends": "",
			"Methods": [
				{
					"signature": "Obj()",
					"documentation": "/**\n * Tests for {@link ShortNameFactory}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "void method(String parameter)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.ShortNameFactoryTest.ToStringObj",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.ShortNameFactoryTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.Annotated",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.ShortNameFactoryTest.ProvidingModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Provides\n    public Integer provideInteger(String string)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [
				"com.google.inject.grapher.ShortNameFactoryTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link TransitiveDependencyVisitor}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": "/**\n * Tests for {@link TransitiveDependencyVisitor}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "public void testVisitConstructor()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitConvertedConstant()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitInstance_instanceHasDependencies()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitLinkedKey()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitProviderBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitProviderInstance()",
					"documentation": ""
				},
				{
					"signature": "public void testVisitProviderKey()",
					"documentation": ""
				},
				{
					"signature": "private Binding\u003c?\u003e getBinding(Key\u003c?\u003e key, Module... modules)",
					"documentation": ""
				},
				{
					"signature": "private void assertDependencies(Collection\u003cKey\u003c?\u003e\u003e dependencies, Key\u003c?\u003e... keys)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.name.Names",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClass",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClassProvider",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesClass",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConvertedConstantModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.InstanceModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.LinkedKeyModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderInstanceModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderKeyModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.A",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.B",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.C",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.D",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.E",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.F",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.G",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.Interface",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClass",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClassProvider",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesClass",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ConvertedConstantModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.InstanceModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.LinkedKeyModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderInstanceModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesModule",
				"com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderKeyModule"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.A",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.B",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.C",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.D",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.E",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.F",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.G",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.Interface",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClass",
			"extends": "",
			"Methods": [
				{
					"signature": "ConstructedClass()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    ConstructedClass(B b, C c)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setD(D d)",
					"documentation": ""
				}
			],
			"interfaces": [
				"Interface"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.ConstructedClassProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "ConstructedClassProvider()",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    ConstructedClassProvider(A a, B b, C c)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void setF(F f)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ConstructedClass get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesClass",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				}
			],
			"interfaces": [
				"Interface",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.ConvertedConstantModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.InstanceModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.LinkedKeyModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderInstanceModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.HasDependenciesModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.TransitiveDependencyVisitorTest.ProviderKeyModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.grapher.TransitiveDependencyVisitorTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Module to add {@link AssistedInject}-based elements to the demo {@link Injector}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.demo.AssistedInjectModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": "/**\n * Module to add {@link AssistedInject}-based elements to the demo {@link Injector}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.assistedinject.FactoryModuleBuilder"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Module that adds a variety of different kinds of {@link Bindings} to be used to generate a\n * comprehensive sample graph.\n *\n * @see InjectorGrapherDemo\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.demo.BackToTheFutureModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": "/**\n * Module that adds a variety of different kinds of {@link Bindings} to be used to generate a\n * comprehensive sample graph.\n *\n * @see InjectorGrapherDemo\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				},
				{
					"signature": "@Provides\n  public FluxCapacitor provideFluxCapacitor(EnergySource energySource)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.DanceParty",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.demo.DancePartyImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Interface to be used with {@link FactoryProvider}.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.demo.DancePartyFactory",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.DancePartyImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public DancePartyImpl(@Assisted String thatNewSound, MartyMcFly guitarist)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.grapher.demo.DanceParty"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.DeLorian",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public void setEnergySource(EnergySource energySource)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.DocBrown",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.grapher.demo.Person"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Driver",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.EnergySource",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.demo.Lightning",
				"com.google.inject.grapher.demo.Plutonium"
			],
			"uses": [
				"com.google.inject.ProvidedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.EnergySourceProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  void setSources(@Nuclear EnergySource nuclear, @Renewable EnergySource renewable)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n  void setYear(@Named(\"year\") int year)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public EnergySource get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.FluxCapacitor",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Application that instantiates {@link BackToTheFutureModule} and graphs it, writing the output to\n * a DOT-formatted file (filename specified on the command line).\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.demo.InjectorGrapherDemo",
			"extends": "",
			"Methods": [
				{
					"signature": "public static void main(String[] args) throws Exception",
					"documentation": "/**\n * Application that instantiates {@link BackToTheFutureModule} and graphs it, writing the output to\n * a DOT-formatted file (filename specified on the command line).\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.grapher.graphviz.GraphvizModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Inventor",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Lightning",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.grapher.demo.EnergySource"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.name.Named"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.MartyMcFly",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.grapher.demo.Person"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Module to add {@link Multibinder}-based bindings to the injector.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */",
			"name": "com.google.inject.grapher.demo.MultibinderModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": "/**\n * Module to add {@link Multibinder}-based bindings to the injector.\n *\n * @author phopkins@gmail.com (Pete Hopkins)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.multibindings.Multibinder"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Nuclear",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Person",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.demo.DocBrown",
				"com.google.inject.grapher.demo.MartyMcFly"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.PinballParts",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Plutonium",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.grapher.demo.EnergySource"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.PlutoniumProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public PlutoniumProvider(@Inventor Person inventor, @Used PinballParts parts)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Plutonium get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Module to test private modules and exposed bindings.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.demo.PrivateTestModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.grapher.demo.Exposed",
				"com.google.inject.grapher.demo.PrivateTestModule.Hidden"
			]
		},
		{
			"documentation": "/**\n * Module to test private modules and exposed bindings.\n *\n * @author bojand@google.com (Bojan Djordjevic)\n */",
			"name": "com.google.inject.grapher.demo.Exposed",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.grapher.demo.PrivateTestModule.Hidden"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.PrivateTestModule.Hidden",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.grapher.demo.Exposed"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Renewable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.grapher.demo.Used",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.ManagedBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "ManagedBinding(Binding\u003c?\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getSource()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getProvider()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.tools.jmx.ManagedBindingMBean"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * JMX interface to bindings.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.tools.jmx.ManagedBindingMBean",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.tools.jmx.ManagedBinding"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Provides a JMX interface to Guice.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.tools.jmx.Manager",
			"extends": "",
			"Methods": [
				{
					"signature": "public static void manage(String domain, Injector injector)",
					"documentation": "/**\n   * Registers all the bindings of an Injector with the platform MBean server. Consider using the\n   * name of your root {@link Module} class as the domain.\n   */"
				},
				{
					"signature": "public static void manage(MBeanServer server, String domain, Injector injector)",
					"documentation": "/**\n   * Registers all the bindings of an Injector with the given MBean server. Consider using the name\n   * of your root {@link Module} class as the domain.\n   */"
				},
				{
					"signature": "static String quote(String value)",
					"documentation": ""
				},
				{
					"signature": "public static void main(String[] args) throws Exception",
					"documentation": "/** Run with no arguments for usage instructions. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.tools.jmx.JmxTest",
			"extends": "",
			"Methods": [
				{
					"signature": "public static void main(String[] args) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.tools.jmx.Foo",
				"com.google.inject.tools.jmx.JmxTest.FooImpl",
				"com.google.inject.tools.jmx.JmxTest.TransactionalFoo",
				"com.google.inject.tools.jmx.JmxTest.Bar",
				"com.google.inject.tools.jmx.Transactional",
				"com.google.inject.tools.jmx.JmxTest.TestModule"
			]
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.tools.jmx.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.tools.jmx.JmxTest.FooImpl",
				"com.google.inject.tools.jmx.JmxTest.TransactionalFoo"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.JmxTest.FooImpl",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.tools.jmx.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.JmxTest.TransactionalFoo",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"com.google.inject.tools.jmx.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.JmxTest.Bar",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.Transactional",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.tools.jmx.JmxTest.TestModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Integrates Guice with JNDI. Requires a binding to {@link javax.naming.Context}.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.jndi.JndiIntegration",
			"extends": "",
			"Methods": [
				{
					"signature": "private JndiIntegration()",
					"documentation": "/**\n * Integrates Guice with JNDI. Requires a binding to {@link javax.naming.Context}.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public static \u003cT\u003e Provider\u003cT\u003e fromJndi(Class\u003cT\u003e type, String name)",
					"documentation": "/**\n   * Creates a provider which looks up objects in JNDI using the given name. Example usage:\n   *\n   * \u003cpre\u003e\n   * bind(DataSource.class).toProvider(fromJndi(DataSource.class, \"java:...\"));\n   * \u003c/pre\u003e\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.jndi.JndiIntegration.JndiProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.jndi.JndiIntegration.JndiProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.jndi.JndiIntegration.JndiProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public JndiProvider(Class\u003cT\u003e type, String name)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.jndi.JndiIntegration"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this filter to enable the HTTP Request unit of work and to have guice-persist manage the\n * lifecycle of active units of work. The filter automatically starts and stops the relevant {@link\n * PersistService} upon {@link javax.servlet.Filter#init(javax.servlet.FilterConfig)} and {@link\n * javax.servlet.Filter#destroy()} respectively.\n *\n * \u003cp\u003eTo be able to use the open session-in-view pattern (i.e. work per request), register this\n * filter \u003cb\u003eonce\u003c/b\u003e in your Guice {@code ServletModule}. It is important that you register this\n * filter before any other filter.\n *\n * \u003cp\u003eFor multiple providers, you should register this filter once per provider, inside a private\n * module for each persist module installed (this must be the same private module where the specific\n * persist module is itself installed).\n *\n * \u003cp\u003eExample configuration:\n *\n * \u003cpre\u003e{@code\n * public class MyModule extends ServletModule {\n *   public void configureServlets() {\n *     filter(\"/*\").through(PersistFilter.class);\n *\n *     serve(\"/index.html\").with(MyHtmlServlet.class);\n *     // Etc.\n *   }\n * }\n * }\u003c/pre\u003e\n *\n * \u003cp\u003eThis filter is thread safe and allows you to create injectors concurrently and deploy multiple\n * guice-persist modules within the same injector, or even multiple injectors with persist modules\n * withing the same JVM or web app.\n *\n * \u003cp\u003eThis filter requires the Guice Servlet extension.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.PersistFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public PersistFilter(UnitOfWork unitOfWork, PersistService persistService)",
					"documentation": "/**\n * Apply this filter to enable the HTTP Request unit of work and to have guice-persist manage the\n * lifecycle of active units of work. The filter automatically starts and stops the relevant {@link\n * PersistService} upon {@link javax.servlet.Filter#init(javax.servlet.FilterConfig)} and {@link\n * javax.servlet.Filter#destroy()} respectively.\n *\n * \u003cp\u003eTo be able to use the open session-in-view pattern (i.e. work per request), register this\n * filter \u003cb\u003eonce\u003c/b\u003e in your Guice {@code ServletModule}. It is important that you register this\n * filter before any other filter.\n *\n * \u003cp\u003eFor multiple providers, you should register this filter once per provider, inside a private\n * module for each persist module installed (this must be the same private module where the specific\n * persist module is itself installed).\n *\n * \u003cp\u003eExample configuration:\n *\n * \u003cpre\u003e{@code\n * public class MyModule extends ServletModule {\n *   public void configureServlets() {\n *     filter(\"/*\").through(PersistFilter.class);\n *\n *     serve(\"/index.html\").with(MyHtmlServlet.class);\n *     // Etc.\n *   }\n * }\n * }\u003c/pre\u003e\n *\n * \u003cp\u003eThis filter is thread safe and allows you to create injectors concurrently and deploy multiple\n * guice-persist modules within the same injector, or even multiple injectors with persist modules\n * withing the same JVM or web app.\n *\n * \u003cp\u003eThis filter requires the Guice Servlet extension.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void destroy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void doFilter(\n      final ServletRequest servletRequest,\n      final ServletResponse servletResponse,\n      final FilterChain filterChain)\n      throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Install this module to add guice-persist library support for JPA persistence providers.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.persist.PersistModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected final void configure()",
					"documentation": "/**\n * Install this module to add guice-persist library support for JPA persistence providers.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.matcher.Matchers"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Persistence provider service. Use this to manage the overall startup and stop of the persistence\n * module(s).\n *\n * \u003cp\u003eTODO(user): Integrate with Service API when appropriate.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.persist.PersistService",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Any method or class marked with this annotation will be considered for transactionality. Consult\n * the documentation on https://github.com/google/guice/wiki/GuicePersist for detailed semantics.\n * Marking a method {@code @Transactional} will start a new transaction before the method executes\n * and commit it after the method returns.\n *\n * \u003cp\u003eIf the method throws an exception, the transaction will be rolled back \u003cem\u003eunless\u003c/em\u003e you\n * have specifically requested not to in the {@link #ignore()} clause.\n *\n * \u003cp\u003eSimilarly, the set of exceptions that will trigger a rollback can be defined in the {@link\n * #rollbackOn()} clause. By default, only unchecked exceptions trigger a rollback.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.Transactional",
			"extends": "",
			"Methods": [
				{
					"signature": "Class\u003c? extends Exception\u003e[] ignore() default",
					"documentation": "/**\n   * A list of exceptions to \u003cb\u003enot\u003c/b\u003e rollback on. A caveat to the rollbackOn clause. The\n   * disjunction of rollbackOn and ignore represents the list of exceptions that will trigger a\n   * rollback. The complement of rollbackOn and the universal set plus any exceptions in the ignore\n   * set represents the list of exceptions that will trigger a commit. Note that ignore exceptions\n   * take precedence over rollbackOn, but with subtype granularity.\n   */"
				}
			],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject4",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject3",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject2",
				"com.google.inject.persist.jpa.DynamicFinderTest",
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaDao",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest.JpaDao",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest.JpaDao",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.JpaWorkManagerTest",
				"com.google.inject.persist.jpa.JpaWorkManagerTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManualLocalTransactionsTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest",
				"com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest.TransactionalObject"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.persist.jpa.JpaLocalTxnInterceptor",
				"com.google.inject.persist.jpa.JpaLocalTxnInterceptor.Internal"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This interface is used to gain manual control over the unit of work. This is mostly to do work in\n * non-request, non-transactional threads. Or where more fine-grained control over the unit of work\n * is required. Starting and ending a unit of work directly corresponds to opening and closing a\n * {@code Session}, {@code EntityManager} or {@code ObjectContainer} respectively.\n *\n * \u003cp\u003eThe Unit of Work referred to by UnitOfWork will always be local to the calling thread. Be\n * careful to end() in a finally block. Neither JPA, nor Hibernate supports threadsafe sessions\n * (reasoning behind thread-locality of Unit of Work semantics).\n *\n * \u003cul\u003e\n * \u003cli\u003eUsing UnitOfWork with the PersistFilter inside a request is not recommended.\n * \u003cli\u003eUsing UnitOfWork with session-per-txn strategy is not terribly clever either.\n * \u003cli\u003eUsing UnitOfWork with session-per-request strategy but *outside* a request (i.e. in a\n *     background or bootstrap thread) is probably a good use case.\n * \u003c/ul\u003e\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.persist.UnitOfWork",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utility that helps you introspect dynamic finder methods.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.persist.finder.DynamicFinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public DynamicFinder(Method method)",
					"documentation": "/**\n * Utility that helps you introspect dynamic finder methods.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "public static DynamicFinder from(Method method)",
					"documentation": "/**\n   * Returns some metadata if the method is annotated {@code @Finder} or null.\n   *\n   * @param method a method you want to test as a dynamic finder\n   */"
				},
				{
					"signature": "public Finder metadata()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.persist.jpa.JpaPersistModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Marks a method stub as a dynamic finder. The method is intercepted and replaced with the\n * specified JPAQL query. Provides result auto-boxing and automatic parameter binding.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.finder.Finder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.persist.jpa.DynamicFinderTest",
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaFinder",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotate any dynamic finder method's integer argument with this to pass in the index of the first\n * result in the result set you are interested in. Useful for paging result sets. Complemented by\n * {@link MaxResults}.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.finder.FirstResult",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotate any dynamic finder method's integer argument with this to pass in the maximum size of\n * returned result window. Usefule for paging result sets. Complement of {@link FirstResult}.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.finder.MaxResults",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding annotation for internal JPA module properties.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.persist.jpa.Jpa",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.JpaPersistModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * TODO(user): Make this work!!\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.JpaFinderProxy",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public JpaFinderProxy(Provider\u003cEntityManager\u003e emProvider)",
					"documentation": "/**\n * TODO(user): Make this work!!\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n  private Object getAsCollection(JpaFinderProxy.FinderDescriptor finderDescriptor, List results)",
					"documentation": ""
				},
				{
					"signature": "private void bindQueryNamedParameters(\n      Query jpaQuery, JpaFinderProxy.FinderDescriptor descriptor, Object[] arguments)",
					"documentation": ""
				},
				{
					"signature": "private void bindQueryRawParameters(\n      Query jpaQuery, JpaFinderProxy.FinderDescriptor descriptor, Object[] arguments)",
					"documentation": ""
				},
				{
					"signature": "private JpaFinderProxy.FinderDescriptor getFinderDescriptor(MethodInvocation invocation)",
					"documentation": ""
				},
				{
					"signature": "private void cacheFinderDescriptor(Method method, FinderDescriptor finderDescriptor)",
					"documentation": "/**\n   * writes to a chm (used to provide copy-on-write but this is bettah!)\n   *\n   * @param method The key\n   * @param finderDescriptor The descriptor to cache\n   */"
				},
				{
					"signature": "private JpaFinderProxy.ReturnType determineReturnType(Class\u003c?\u003e returnClass)",
					"documentation": ""
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JpaFinderProxy.FinderDescriptor",
				"com.google.inject.persist.jpa.JpaFinderProxy.ReturnType"
			]
		},
		{
			"documentation": "/** A wrapper data class that caches information about a finder method. */",
			"name": "com.google.inject.persist.jpa.JpaFinderProxy.FinderDescriptor",
			"extends": "",
			"Methods": [
				{
					"signature": "void setQuery(String query)",
					"documentation": "/** A wrapper data class that caches information about a finder method. */"
				},
				{
					"signature": "void setNamedQuery(String name)",
					"documentation": ""
				},
				{
					"signature": "public boolean isKeyedQuery()",
					"documentation": ""
				},
				{
					"signature": "Query createQuery(EntityManager em)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JpaFinderProxy.ReturnType",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JpaLocalTxnInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Object invoke(MethodInvocation methodInvocation) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "private Transactional readTransactionMetadata(MethodInvocation methodInvocation)",
					"documentation": ""
				},
				{
					"signature": "private boolean rollbackIfNecessary(\n      Transactional transactional, Exception e, EntityTransaction txn)",
					"documentation": "/**\n   * Returns True if rollback DID NOT HAPPEN (i.e. if commit should continue).\n   *\n   * @param transactional The metadata annotaiton of the method\n   * @param e The exception to test for rollback\n   * @param txn A JPA Transaction to issue rollbacks on\n   */"
				}
			],
			"interfaces": [
				"org.aopalliance.intercept.MethodInterceptor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JpaLocalTxnInterceptor.Internal"
			]
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JpaLocalTxnInterceptor.Internal",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * JPA provider for guice persist.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.persist.jpa.JpaPersistModule",
			"extends": "com.google.inject.persist.PersistModule",
			"Methods": [
				{
					"signature": "public JpaPersistModule(String jpaUnit)",
					"documentation": "/**\n * JPA provider for guice persist.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  protected void configurePersistence()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected MethodInterceptor getTransactionInterceptor()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @Jpa\n  Map\u003c?, ?\u003e provideProperties()",
					"documentation": ""
				},
				{
					"signature": "public JpaPersistModule properties(Map\u003c?, ?\u003e properties)",
					"documentation": "/**\n   * Configures the JPA persistence provider with a set of properties.\n   *\n   * @param properties A set of name value pairs that configure a JPA persistence provider as per\n   *     the specification.\n   * @since 4.0 (since 3.0 with a parameter type of {@code java.util.Properties})\n   */"
				},
				{
					"signature": "public \u003cT\u003e JpaPersistModule addFinder(Class\u003cT\u003e iface)",
					"documentation": "/**\n   * Adds an interface to this module to use as a dynamic finder.\n   *\n   * @param iface Any interface type whose methods are all dynamic finders.\n   */"
				},
				{
					"signature": "private \u003cT\u003e void bindFinder(Class\u003cT\u003e iface)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object invoke(final Object thisObject, final Method method, final Object[] args)\n              throws Throwable",
					"documentation": ""
				},
				{
					"signature": "private boolean isDynamicFinderValid(Class\u003c?\u003e iface)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.persist.EdslTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.persist.finder.DynamicFinder",
				"com.google.inject.persist.jpa.Jpa"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JpaPersistService",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public JpaPersistService(\n      @Jpa String persistenceUnitName, @Nullable @Jpa Map\u003c?, ?\u003e persistenceProperties)",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public EntityManager get()",
					"documentation": ""
				},
				{
					"signature": "public boolean isWorking()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void begin()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void end()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider",
				"com.google.inject.persist.UnitOfWork",
				"com.google.inject.persist.PersistService"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.persist.jpa.JpaPersistService.EntityManagerFactoryProvider"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JpaPersistService.EntityManagerFactoryProvider",
				"com.google.inject.persist.jpa.Nullable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JpaPersistService.EntityManagerFactoryProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public EntityManagerFactoryProvider(JpaPersistService emProvider)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public EntityManagerFactory get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.JpaPersistService"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author dhanji@gmail.com (Dhanji R. Prasanna) */",
			"name": "com.google.inject.persist.AllTests",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": "/** @author dhanji@gmail.com (Dhanji R. Prasanna) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author dhanji@google.com (Dhanji R. Prasanna) */",
			"name": "com.google.inject.persist.EdslTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testModuleConfigUsingJpa() throws Exception",
					"documentation": "/** @author dhanji@google.com (Dhanji R. Prasanna) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.persist.jpa.JpaPersistModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This test asserts class level @Transactional annotation behavior.\n *\n * \u003cp\u003eClass-level @Transactional is a shortcut if all non-private methods in the class are meant to\n * be transactional.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * This test asserts class level @Transactional annotation behavior.\n *\n * \u003cp\u003eClass-level @Transactional is a shortcut if all non-private methods in the class are meant to\n * be transactional.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransaction()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnChecked()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnCheckedExcepting()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject4",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject3",
				"com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject2"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "public void runOperationInTxn()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject4",
			"extends": "",
			"Methods": [
				{
					"signature": "@Transactional\n    public void runOperationInTxnThrowingUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject3",
			"extends": "",
			"Methods": [
				{
					"signature": "public void runOperationInTxnThrowingCheckedExcepting() throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ClassLevelManagedLocalTransactionsTest.TransactionalObject2",
			"extends": "",
			"Methods": [
				{
					"signature": "public void runOperationInTxnThrowingChecked() throws IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.CustomPropsEntityManagerFactoryProvisionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSessionCreateOnInjection()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.DynamicFinderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testDynamicFinderListAll()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.finder.Finder",
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaDao"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaFinder",
				"com.google.inject.persist.jpa.DynamicFinderTest.JpaDao"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.DynamicFinderTest.JpaFinder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.finder.Finder"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.DynamicFinderTest.JpaDao",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public JpaDao(Provider\u003cEntityManager\u003e em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e void persist(T t)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e boolean contains(T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.DynamicFinderTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
			"name": "com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "private static DataSource getDataSource()",
					"documentation": ""
				},
				{
					"signature": "private void startPersistService(boolean passDataSource)",
					"documentation": ""
				},
				{
					"signature": "public void testWorksIfPassDataSource()",
					"documentation": ""
				},
				{
					"signature": "public void testFailsIfNoDataSource()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest.DBModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest.DBModule"
			]
		},
		{
			"documentation": "/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
			"name": "com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest.DBModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "DBModule(DataSource ds, boolean passDataSource)",
					"documentation": "/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.persist.jpa.EnsureJpaCanTakeObjectsInPropertiesTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.EntityManagerFactoryProvisionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSessionCreateOnInjection()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testEntityManagerLifecyclePerTxn()",
					"documentation": ""
				},
				{
					"signature": "public void testEntityManagerLifecyclePerTxn2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest.JpaDao"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.EntityManagerPerRequestProvisionTest.JpaDao",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public JpaDao(EntityManager em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e void persist(T t)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e boolean contains(T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.EntityManagerProvisionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * A test around providing sessions (starting, closing etc.)\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testEntityManagerLifecyclePerTxn()",
					"documentation": ""
				},
				{
					"signature": "public void testEntityManagerLifecyclePerTxn2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.jpa.EntityManagerProvisionTest.JpaDao"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.EntityManagerProvisionTest.JpaDao"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.EntityManagerProvisionTest.JpaDao",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public JpaDao(Provider\u003cEntityManager\u003e em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e void persist(T t)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public \u003cT\u003e boolean contains(T t)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.EntityManagerProvisionTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JoiningLocalTransactionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransaction()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnChecked()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest.TransactionalObject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JoiningLocalTransactionsTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public TransactionalObject(EntityManager em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional(rollbackOn = IOException.class)\n    public void runOperationInTxnInternal()",
					"documentation": ""
				},
				{
					"signature": "@Transactional(rollbackOn = IOException.class)\n    public void runOperationInTxnThrowingChecked() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    private void runOperationInTxnThrowingCheckedInternal() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxnThrowingUnchecked()",
					"documentation": ""
				},
				{
					"signature": "@Transactional(rollbackOn = IOException.class)\n    public void runOperationInTxnThrowingUncheckedInternal()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.JoiningLocalTransactionsTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Created with IntelliJ IDEA. On: 2/06/2007\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n * @since 1.0\n */",
			"name": "com.google.inject.persist.jpa.JpaParentTestEntity",
			"extends": "",
			"Methods": [
				{
					"signature": "@Id\n  @GeneratedValue\n  public Long getId()",
					"documentation": "/**\n * Created with IntelliJ IDEA. On: 2/06/2007\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n * @since 1.0\n */"
				},
				{
					"signature": "public void setId(Long id)",
					"documentation": ""
				},
				{
					"signature": "@OneToMany\n  public List\u003cJpaTestEntity\u003e getChildren()",
					"documentation": ""
				},
				{
					"signature": "public void setChildren(List\u003cJpaTestEntity\u003e children)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JpaPersistServiceTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void test_givenErrorOnEntityManagerClose_whenEndIsCalled_thenEntityManagerIsRemoved()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JpaPersistServiceTest.SimulatedException"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JpaPersistServiceTest.SimulatedException",
			"extends": "RuntimeException",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JpaTestEntity",
			"extends": "",
			"Methods": [
				{
					"signature": "@Id\n  @GeneratedValue\n  public Long getId()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "public void setId(Long id)",
					"documentation": ""
				},
				{
					"signature": "public String getText()",
					"documentation": ""
				},
				{
					"signature": "public void setText(String text)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.JpaWorkManagerTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testWorkManagerInSession()",
					"documentation": ""
				},
				{
					"signature": "public void testCloseMoreThanOnce()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.JpaWorkManagerTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.JpaWorkManagerTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Transactional\n    public void runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxnError()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransaction()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionWithMerge()",
					"documentation": ""
				},
				{
					"signature": "public void disabled_testSimpleTransactionWithMergeAndDF()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnChecked()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.finder.Finder",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public TransactionalObject(EntityManager em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public JpaTestEntity runOperationInTxnWithMerge()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public JpaTestEntity runOperationInTxnWithMergeForDf()",
					"documentation": ""
				},
				{
					"signature": "@Transactional(rollbackOn = IOException.class)\n    public void runOperationInTxnThrowingChecked() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxnThrowingUnchecked()",
					"documentation": ""
				},
				{
					"signature": "@Finder(query = \"from JpaTestEntity where text = :text\")\n    public JpaTestEntity find(@Named(\"text\") String text)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.finder.Finder"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.ManagedLocalTransactionsAcrossRequestTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.ManagedLocalTransactionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransaction()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionWithMerge()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnChecked()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleTransactionRollbackOnUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional",
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest.TransactionalObject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ManagedLocalTransactionsTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public TransactionalObject(EntityManager em)",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public JpaTestEntity runOperationInTxnWithMerge()",
					"documentation": ""
				},
				{
					"signature": "@Transactional(rollbackOn = IOException.class)\n    public void runOperationInTxnThrowingChecked() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxnThrowingUnchecked()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [
				"com.google.inject.persist.jpa.ManagedLocalTransactionsTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/** @author Dhanji R. Prasanna (dhanji@gmail.com) */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testThrowingCleanupInterceptorConfidence()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsConfidenceTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Transactional\n    public void runOperationInTxn()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * For instance, a session-per-request strategy will control the opening and closing of the EM at\n * its own (manual) discretion. As opposed to a transactional unit of work.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * For instance, a session-per-request strategy will control the opening and closing of the EM at\n * its own (manual) discretion. As opposed to a transactional unit of work.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "@Override\n  public void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleCrossTxnWork()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ManualLocalTransactionsTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Transactional\n    public JpaTestEntity runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxn2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Created with IntelliJ IDEA. On: 2/06/2007\n *\n * \u003cp\u003eFor instance, a session-per-request strategy will control the opening and closing of the EM at\n * its own (manual) discretion. As opposed to a transactional unit of work.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n * @since 1.0\n */",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * Created with IntelliJ IDEA. On: 2/06/2007\n *\n * \u003cp\u003eFor instance, a session-per-request strategy will control the opening and closing of the EM at\n * its own (manual) discretion. As opposed to a transactional unit of work.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n * @since 1.0\n */"
				},
				{
					"signature": "@Override\n  public void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimpleCrossTxnWork()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest.TransactionalObject"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.persist.jpa.ManualLocalTransactionsWithCustomMatcherTest.TransactionalObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Transactional\n    public JpaTestEntity runOperationInTxn()",
					"documentation": ""
				},
				{
					"signature": "@Transactional\n    public void runOperationInTxn2()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.persist.Transactional"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Abstract implementation for all servlet module bindings\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.AbstractServletModuleBinding",
			"extends": "",
			"Methods": [
				{
					"signature": "AbstractServletModuleBinding(\n      Map\u003cString, String\u003e initParams, T target, UriPatternMatcher patternMatcher)",
					"documentation": "/**\n * Abstract implementation for all servlet module bindings\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Map\u003cString, String\u003e getInitParams()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String getPattern()",
					"documentation": ""
				},
				{
					"signature": "protected T getTarget()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public UriPatternType getUriPatternType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean matchesUri(String uri)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.ServletModuleBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.servlet.InstanceFilterBindingImpl",
				"com.google.inject.servlet.InstanceServletBindingImpl",
				"com.google.inject.servlet.LinkedFilterBindingImpl",
				"com.google.inject.servlet.LinkedServletBindingImpl"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A wrapper for requests that makes requests immutable, taking a snapshot of the original request.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.ContinuingHttpServletRequest",
			"extends": "javax.servlet.http.HttpServletRequestWrapper",
			"Methods": [
				{
					"signature": "public ContinuingHttpServletRequest(HttpServletRequest request)",
					"documentation": "/**\n * A wrapper for requests that makes requests immutable, taking a snapshot of the original request.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  public HttpSession getSession()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public HttpSession getSession(boolean create)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public ServletInputStream getInputStream() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void setAttribute(String name, Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void removeAttribute(String name)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Object getAttribute(String name)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Cookie[] getCookies()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.OutOfScopeException",
				"com.google.inject.servlet.ContinuingHttpServletRequest.ImmutableCookie"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.ContinuingHttpServletRequest.ImmutableCookie"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContinuingHttpServletRequest.ImmutableCookie",
			"extends": "javax.servlet.http.Cookie",
			"Methods": [
				{
					"signature": "public ImmutableCookie(Cookie original)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setComment(String purpose)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setDomain(String pattern)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setMaxAge(int expiry)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setPath(String uri)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setSecure(boolean flag)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setValue(String newValue)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void setVersion(int v)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ContinuingHttpServletRequest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This default pipeline simply dispatches to web.xml's servlet pipeline.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n * @see com.google.inject.servlet.ManagedFilterPipeline See Also ManagedFilterPipeline.\n */",
			"name": "com.google.inject.servlet.DefaultFilterPipeline",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  DefaultFilterPipeline()",
					"documentation": "/**\n * This default pipeline simply dispatches to web.xml's servlet pipeline.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n * @see com.google.inject.servlet.ManagedFilterPipeline See Also ManagedFilterPipeline.\n */"
				},
				{
					"signature": "@Override\n  public void initPipeline(ServletContext context)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void destroyPipeline()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void dispatch(\n      ServletRequest request, ServletResponse response, FilterChain proceedingFilterChain)\n      throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.FilterPipeline"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A Filter chain impl which basically passes itself to the \"current\" filter and iterates the chain\n * on {@code doFilter()}. Modeled on something similar in Apache Tomcat.\n *\n * \u003cp\u003eFollowing this, it attempts to dispatch to guice-servlet's registered servlets using the\n * ManagedServletPipeline.\n *\n * \u003cp\u003eAnd the end, it proceeds to the web.xml (default) servlet filter chain, if needed.\n *\n * @author Dhanji R. Prasanna\n * @since 1.0\n */",
			"name": "com.google.inject.servlet.FilterChainInvocation",
			"extends": "",
			"Methods": [
				{
					"signature": "public FilterChainInvocation(\n      FilterDefinition[] filterDefinitions,\n      ManagedServletPipeline servletPipeline,\n      FilterChain proceedingChain)",
					"documentation": "/**\n * A Filter chain impl which basically passes itself to the \"current\" filter and iterates the chain\n * on {@code doFilter()}. Modeled on something similar in Apache Tomcat.\n *\n * \u003cp\u003eFollowing this, it attempts to dispatch to guice-servlet's registered servlets using the\n * ManagedServletPipeline.\n *\n * \u003cp\u003eAnd the end, it proceeds to the web.xml (default) servlet filter chain, if needed.\n *\n * @author Dhanji R. Prasanna\n * @since 1.0\n */"
				},
				{
					"signature": "@Override\n  public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "private Filter findNextFilter(HttpServletRequest request)",
					"documentation": "/**\n   * Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\n   * none apply.\n   */"
				},
				{
					"signature": "private void pruneStacktrace(Throwable throwable)",
					"documentation": "/**\n   * Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\n   * and any causes it may have.\n   */"
				}
			],
			"interfaces": [
				"javax.servlet.FilterChain"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An internal representation of a filter definition against a particular URI pattern.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.FilterDefinition",
			"extends": "",
			"Methods": [
				{
					"signature": "public FilterDefinition(\n      Key\u003c? extends Filter\u003e filterKey,\n      UriPatternMatcher patternMatcher,\n      Map\u003cString, String\u003e initParams,\n      Filter filterInstance)",
					"documentation": "/**\n * An internal representation of a filter definition against a particular URI pattern.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  public FilterDefinition get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cB, V\u003e V acceptExtensionVisitor(\n      BindingTargetVisitor\u003cB, V\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "private boolean shouldFilter(String uri)",
					"documentation": ""
				},
				{
					"signature": "public void init(\n      final ServletContext servletContext, Injector injector, Set\u003cFilter\u003e initializedSoFar)\n      throws ServletException",
					"documentation": ""
				},
				{
					"signature": "public void destroy(Set\u003cFilter\u003e destroyedSoFar)",
					"documentation": ""
				},
				{
					"signature": "public Filter getFilterIfMatching(HttpServletRequest request)",
					"documentation": ""
				},
				{
					"signature": "Filter getFilter()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An internal dispatcher for guice-servlet registered servlets and filters. By default, we assume a\n * Guice 1.0 style servlet module is in play. In other words, we dispatch directly to the web.xml\n * pipeline after setting up scopes.\n *\n * \u003cp\u003eIf on the other hand, {@link ServletModule} is used to register managed servlets and/or\n * filters, then a different pipeline is bound instead. Which, after dispatching to Guice-injected\n * filters and servlets continues to the web.xml pipeline (if necessary).\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.FilterPipeline",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.DefaultFilterPipeline",
				"com.google.inject.servlet.ManagedFilterPipeline"
			],
			"uses": [
				"com.google.inject.ImplementedBy"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds the guice module that binds configured filters, with their wrapper FilterDefinitions. Is\n * part of the binding EDSL. All Filters and Servlets are always bound as singletons.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.FiltersModuleBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "public FiltersModuleBuilder(Binder binder)",
					"documentation": "/**\n * Builds the guice module that binds configured filters, with their wrapper FilterDefinitions. Is\n * part of the binding EDSL. All Filters and Servlets are always bound as singletons.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "public ServletModule.FilterKeyBindingBuilder filter(List\u003cString\u003e patterns)",
					"documentation": ""
				},
				{
					"signature": "public ServletModule.FilterKeyBindingBuilder filterRegex(List\u003cString\u003e regexes)",
					"documentation": ""
				},
				{
					"signature": "private List\u003cUriPatternMatcher\u003e parsePatterns(UriPatternType type, List\u003cString\u003e patterns)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.servlet.FilterKeyBindingBuilderImpl"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.FilterKeyBindingBuilderImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterKeyBindingBuilderImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "private FilterKeyBindingBuilderImpl(List\u003cUriPatternMatcher\u003e uriPatterns)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Class\u003c? extends Filter\u003e filterKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Key\u003c? extends Filter\u003e filterKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Filter filter)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Class\u003c? extends Filter\u003e filterKey, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Key\u003c? extends Filter\u003e filterKey, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				},
				{
					"signature": "private void through(\n        Key\u003c? extends Filter\u003e filterKey, Map\u003cString, String\u003e initParams, Filter filterInstance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void through(Filter filter, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				}
			],
			"interfaces": [
				"ServletModule.FilterKeyBindingBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.UniqueAnnotations"
			],
			"usedBy": [
				"com.google.inject.servlet.FiltersModuleBuilder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this filter in web.xml above all other filters (typically), to all requests where you plan\n * to use servlet scopes. This is also needed in order to dispatch requests to injectable filters\n * and servlets:\n *\n * \u003cpre\u003e\n *  \u0026lt;filter\u0026gt;\n *    \u0026lt;filter-name\u0026gt;guiceFilter\u0026lt;/filter-name\u0026gt;\n *    \u0026lt;filter-class\u0026gt;\u003cb\u003ecom.google.inject.servlet.GuiceFilter\u003c/b\u003e\u0026lt;/filter-class\u0026gt;\n *  \u0026lt;/filter\u0026gt;\n *\n *  \u0026lt;filter-mapping\u0026gt;\n *    \u0026lt;filter-name\u0026gt;guiceFilter\u0026lt;/filter-name\u0026gt;\n *    \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt;\n *  \u0026lt;/filter-mapping\u0026gt;\n *  \u003c/pre\u003e\n *\n * This filter must appear before every filter that makes use of Guice injection or servlet scopes\n * functionality. Typically, you will only register this filter in web.xml and register any other\n * filters (and servlets) using a {@link ServletModule}.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.GuiceFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "public GuiceFilter()",
					"documentation": "/** Used to inject the servlets configured via {@link ServletModule} */"
				},
				{
					"signature": "@Inject\n  GuiceFilter(FilterPipeline filterPipeline)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n  static void setPipeline(FilterPipeline pipeline)",
					"documentation": ""
				},
				{
					"signature": "static void reset()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void doFilter(\n      final ServletRequest servletRequest,\n      final ServletResponse servletResponse,\n      final FilterChain filterChain)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "static HttpServletRequest getOriginalRequest(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "static HttpServletRequest getRequest(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "static HttpServletResponse getResponse(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "static ServletContext getServletContext()",
					"documentation": ""
				},
				{
					"signature": "private static Context getContext(Key\u003c?\u003e key)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void destroy()",
					"documentation": ""
				},
				{
					"signature": "private FilterPipeline getFilterPipeline()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.OutOfScopeException",
				"com.google.inject.internal.Errors",
				"com.google.inject.servlet.GuiceFilter.Context"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.GuiceFilter.Context"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.GuiceFilter.Context",
			"extends": "",
			"Methods": [
				{
					"signature": "Context(\n        HttpServletRequest originalRequest,\n        HttpServletRequest request,\n        HttpServletResponse response)",
					"documentation": ""
				},
				{
					"signature": "HttpServletRequest getOriginalRequest()",
					"documentation": ""
				},
				{
					"signature": "HttpServletRequest getRequest()",
					"documentation": ""
				},
				{
					"signature": "HttpServletResponse getResponse()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public CloseableScope open()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void close()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.RequestScoper"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.GuiceFilter"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * As of Guice 2.0 you can still use (your subclasses of) {@code GuiceServletContextListener} class\n * as a logical place to create and configure your injector. This will ensure the injector is\n * created when the web application is deployed.\n *\n * @author Kevin Bourrillion (kevinb@google.com)\n * @since 2.0\n */",
			"name": "com.google.inject.servlet.GuiceServletContextListener",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public void contextInitialized(ServletContextEvent servletContextEvent)",
					"documentation": "/**\n * As of Guice 2.0 you can still use (your subclasses of) {@code GuiceServletContextListener} class\n * as a logical place to create and configure your injector. This will ensure the injector is\n * created when the web application is deployed.\n *\n * @author Kevin Bourrillion (kevinb@google.com)\n * @since 2.0\n */"
				},
				{
					"signature": "@Override\n  public void contextDestroyed(ServletContextEvent servletContextEvent)",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.ServletContextListener"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a single instance of a filter.\n *\n * @author sameb@google.com\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.InstanceFilterBinding",
			"extends": "com.google.inject.servlet.ServletModuleBinding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.InstanceFilterBindingImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default implementation of InstanceFilterBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.InstanceFilterBindingImpl",
			"extends": "com.google.inject.servlet.AbstractServletModuleBinding",
			"Methods": [
				{
					"signature": "InstanceFilterBindingImpl(\n      Map\u003cString, String\u003e initParams, Filter target, UriPatternMatcher patternMatcher)",
					"documentation": "/**\n * Default implementation of InstanceFilterBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Filter getFilterInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.InstanceFilterBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding to a single instance of a servlet.\n *\n * @author sameb@google.com\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.InstanceServletBinding",
			"extends": "com.google.inject.servlet.ServletModuleBinding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.InstanceServletBindingImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default implementation of InstanceServletBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.InstanceServletBindingImpl",
			"extends": "com.google.inject.servlet.AbstractServletModuleBinding",
			"Methods": [
				{
					"signature": "InstanceServletBindingImpl(\n      Map\u003cString, String\u003e initParams, HttpServlet target, UriPatternMatcher patternMatcher)",
					"documentation": "/**\n * Default implementation of InstanceServletBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public HttpServlet getServletInstance()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.InstanceServletBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This is a left-factoring of all ServletModules installed in the system. In other words, this\n * module contains the bindings common to all ServletModules, and is bound exactly once per\n * injector.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.InternalServletModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @Singleton\n  @ScopingOnly\n  GuiceFilter provideScopingOnlyGuiceFilter()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @RequestScoped\n  HttpServletRequest provideHttpServletRequest()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  @RequestScoped\n  HttpServletResponse provideHttpServletResponse()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n  HttpSession provideHttpSession()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  @Provides\n  @RequestScoped\n  @RequestParameters\n  Map\u003cString, String[]\u003e provideRequestParameters(ServletRequest req)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Provides",
				"com.google.inject.Singleton",
				"com.google.inject.servlet.InternalServletModule.BackwardsCompatibleServletContextProvider",
				"com.google.inject.servlet.RequestParameters",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.ScopingOnly"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.InternalServletModule.BackwardsCompatibleServletContextProvider"
			]
		},
		{
			"documentation": "/**\n   * Special Provider that tries to obtain an injected servlet context, specific to the current\n   * injector, failing which, it falls back to the static singleton instance that is available in\n   * the legacy Guice Servlet.\n   */",
			"name": "com.google.inject.servlet.InternalServletModule.BackwardsCompatibleServletContextProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    BackwardsCompatibleServletContextProvider()",
					"documentation": "/**\n   * Special Provider that tries to obtain an injected servlet context, specific to the current\n   * injector, failing which, it falls back to the static singleton instance that is available in\n   * the legacy Guice Servlet.\n   */"
				},
				{
					"signature": "void set(ServletContext injectedServletContext)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public ServletContext get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton"
			],
			"usedBy": [
				"com.google.inject.servlet.InternalServletModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A linked binding to a filter.\n *\n * @author sameb@google.com\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.LinkedFilterBinding",
			"extends": "com.google.inject.servlet.ServletModuleBinding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.LinkedFilterBindingImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default implementation of LinkedFilterBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.LinkedFilterBindingImpl",
			"extends": "com.google.inject.servlet.AbstractServletModuleBinding",
			"Methods": [
				{
					"signature": "LinkedFilterBindingImpl(\n      Map\u003cString, String\u003e initParams,\n      Key\u003c? extends Filter\u003e target,\n      UriPatternMatcher patternMatcher)",
					"documentation": "/**\n * Default implementation of LinkedFilterBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Key\u003c? extends Filter\u003e getLinkedKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.LinkedFilterBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A linked binding to a servlet.\n *\n * @author sameb@google.com\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.LinkedServletBinding",
			"extends": "com.google.inject.servlet.ServletModuleBinding",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.LinkedServletBindingImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Default implementation of LinkedServletBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.LinkedServletBindingImpl",
			"extends": "com.google.inject.servlet.AbstractServletModuleBinding",
			"Methods": [
				{
					"signature": "LinkedServletBindingImpl(\n      Map\u003cString, String\u003e initParams,\n      Key\u003c? extends HttpServlet\u003e target,\n      UriPatternMatcher patternMatcher)",
					"documentation": "/**\n * Default implementation of LinkedServletBinding.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Key\u003c? extends HttpServlet\u003e getLinkedKey()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.LinkedServletBinding"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Central routing/dispatch class handles lifecycle of managed filters, and delegates to the servlet\n * pipeline.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.ManagedFilterPipeline",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public ManagedFilterPipeline(\n      Injector injector,\n      ManagedServletPipeline servletPipeline,\n      Provider\u003cServletContext\u003e servletContext)",
					"documentation": "/**\n * Central routing/dispatch class handles lifecycle of managed filters, and delegates to the servlet\n * pipeline.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "private FilterDefinition[] collectFilterDefinitions(Injector injector)",
					"documentation": "/**\n   * Introspects the injector and collects all instances of bound {@code List\u003cFilterDefinition\u003e}\n   * into a master list.\n   *\n   * \u003cp\u003eWe have a guarantee that {@link com.google.inject.Injector#getBindings()} returns a map that\n   * preserves insertion order in entry-set iterators.\n   */"
				},
				{
					"signature": "@Override\n  public void dispatch(\n      ServletRequest request, ServletResponse response, FilterChain proceedingFilterChain)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"JavaDoc\", \"deprecation\"})\n  private ServletRequest withDispatcher(\n      ServletRequest servletRequest, final ManagedServletPipeline servletPipeline)",
					"documentation": "/**\n   * Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\n   * pipeline based on uri-path match. This proxy also provides minimal forwarding support.\n   *\n   * \u003cp\u003eWe cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\n   * is not called again). However, we can wrap requests with our own dispatcher to forward the\n   * *other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n   *\n   * \u003cp\u003eThis is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\n   * incrementally, but not the other way around (which, we should actively discourage).\n   */"
				},
				{
					"signature": "@Override\n      public RequestDispatcher getRequestDispatcher(String path)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void destroyPipeline()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.FilterPipeline"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.TypeLiteral"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A wrapping dispatcher for servlets, in much the same way as {@link ManagedFilterPipeline} is for\n * filters.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.ManagedServletPipeline",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public ManagedServletPipeline(Injector injector)",
					"documentation": "/**\n * A wrapping dispatcher for servlets, in much the same way as {@link ManagedFilterPipeline} is for\n * filters.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "boolean hasServletsMapped()",
					"documentation": ""
				},
				{
					"signature": "private ServletDefinition[] collectServletDefinitions(Injector injector)",
					"documentation": "/**\n   * Introspects the injector and collects all instances of bound {@code List\u003cServletDefinition\u003e}\n   * into a master list.\n   *\n   * \u003cp\u003eWe have a guarantee that {@link com.google.inject.Injector#getBindings()} returns a map that\n   * preserves insertion order in entry-set iterators.\n   */"
				},
				{
					"signature": "public void init(ServletContext servletContext, Injector injector) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "public boolean service(ServletRequest request, ServletResponse response)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public void destroy()",
					"documentation": ""
				},
				{
					"signature": "RequestDispatcher getRequestDispatcher(String path)",
					"documentation": "/**\n   * @return Returns a request dispatcher wrapped with a servlet mapped to the given path or null if\n   *     no mapping was found.\n   */"
				},
				{
					"signature": "@Override\n          public void forward(ServletRequest servletRequest, ServletResponse servletResponse)\n              throws ServletException, IOException",
					"documentation": "/**\n   * @return Returns a request dispatcher wrapped with a servlet mapped to the given path or null if\n   *     no mapping was found.\n   */"
				},
				{
					"signature": "@Override\n          public void include(ServletRequest servletRequest, ServletResponse servletResponse)\n              throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "private void doServiceImpl(\n              ServletDefinition servletDefinition,\n              ServletRequest servletRequest,\n              ServletResponse servletResponse)\n              throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "static HttpServletRequest wrapRequest(HttpServletRequest request, String newUri)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.Singleton",
				"com.google.inject.TypeLiteral",
				"com.google.inject.servlet.ManagedServletPipeline.RequestDispatcherRequestWrapper"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.ManagedServletPipeline.RequestDispatcherRequestWrapper"
			]
		},
		{
			"documentation": "/**\n   * A Marker constant attribute that when present in the request indicates to Guice servlet that\n   * this request has been generated by a request dispatcher rather than the servlet pipeline. In\n   * accordance with section 8.4.2 of the Servlet 2.4 specification.\n   */",
			"name": "com.google.inject.servlet.ManagedServletPipeline.RequestDispatcherRequestWrapper",
			"extends": "javax.servlet.http.HttpServletRequestWrapper",
			"Methods": [
				{
					"signature": "public RequestDispatcherRequestWrapper(\n        HttpServletRequest servletRequest, String newRequestUri)",
					"documentation": "/**\n   * A Marker constant attribute that when present in the request indicates to Guice servlet that\n   * this request has been generated by a request dispatcher rather than the servlet pipeline. In\n   * accordance with section 8.4.2 of the Servlet 2.4 specification.\n   */"
				},
				{
					"signature": "@Override\n    public String getRequestURI()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public StringBuffer getRequestURL()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ManagedServletPipeline"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this to field or parameters of type {@code Map\u003cString, String[]\u003e} when you want the HTTP\n * request parameter map to be injected.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.servlet.RequestParameters",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.servlet.InternalServletModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this to implementation classes when you want one instance per request.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.servlet.RequestScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.ContinuingRequestIntegrationTest",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.SomeObject",
				"com.google.inject.servlet.InvalidScopeBindingTest",
				"com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonServlet",
				"com.google.inject.servlet.ScopeRequestIntegrationTest",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.SomeObject",
				"com.google.inject.servlet.ServletScopesTest",
				"com.google.inject.servlet.ServletScopesTest.AnnotatedRequestScopedClass",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.ServletTest.InRequest",
				"com.google.inject.servlet.TransferRequestIntegrationTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.InternalServletModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Object that can be used to apply a request scope to a block of code. */",
			"name": "com.google.inject.servlet.RequestScoper",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.GuiceFilter.Context",
				"com.google.inject.servlet.ServletScopes.Context"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.CloseableScope"
			]
		},
		{
			"documentation": "/** Closeable subclass that does not throw any exceptions from close. */",
			"name": "com.google.inject.servlet.CloseableScope",
			"extends": "java.io.Closeable",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Exception thrown when there was a failure entering request scope.\n *\n * @author Chris Nokleberg\n * @since 4.0\n */",
			"name": "com.google.inject.servlet.ScopingException",
			"extends": "IllegalStateException",
			"Methods": [
				{
					"signature": "public ScopingException(String message)",
					"documentation": "/**\n * Exception thrown when there was a failure entering request scope.\n *\n * @author Chris Nokleberg\n * @since 4.0\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates a {@link GuiceFilter} that provides scope functionality, but doesn't dispatch to {@link\n * ServletModule} bound servlets or filters.\n *\n * @author iqshum@google.com (Isaac Shum)\n * @since 4.0\n */",
			"name": "com.google.inject.servlet.ScopingOnly",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.servlet.InternalServletModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An internal representation of a servlet definition mapped to a particular URI pattern. Also\n * performs the request dispatch to that servlet. How nice and OO =)\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.ServletDefinition",
			"extends": "",
			"Methods": [
				{
					"signature": "public ServletDefinition(\n      Key\u003c? extends HttpServlet\u003e servletKey,\n      UriPatternMatcher patternMatcher,\n      Map\u003cString, String\u003e initParams,\n      HttpServlet servletInstance)",
					"documentation": "/**\n * An internal representation of a servlet definition mapped to a particular URI pattern. Also\n * performs the request dispatch to that servlet. How nice and OO =)\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  public ServletDefinition get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public \u003cB, V\u003e V acceptExtensionVisitor(\n      BindingTargetVisitor\u003cB, V\u003e visitor, ProviderInstanceBinding\u003c? extends B\u003e binding)",
					"documentation": ""
				},
				{
					"signature": "boolean shouldServe(String uri)",
					"documentation": ""
				},
				{
					"signature": "public void init(\n      final ServletContext servletContext, Injector injector, Set\u003cHttpServlet\u003e initializedSoFar)\n      throws ServletException",
					"documentation": ""
				},
				{
					"signature": "public void destroy(Set\u003cHttpServlet\u003e destroyedSoFar)",
					"documentation": ""
				},
				{
					"signature": "public boolean service(ServletRequest servletRequest, ServletResponse servletResponse)\n      throws IOException, ServletException",
					"documentation": "/**\n   * Wrapper around the service chain to ensure a servlet is servicing what it must and provides it\n   * with a wrapped request.\n   *\n   * @return Returns true if this servlet triggered for the given request. Or false if guice-servlet\n   *     should continue dispatching down the servlet pipeline.\n   * @throws IOException If thrown by underlying servlet\n   * @throws ServletException If thrown by underlying servlet\n   */"
				},
				{
					"signature": "void doService(final ServletRequest servletRequest, ServletResponse servletResponse)\n      throws ServletException, IOException",
					"documentation": "/**\n   * Utility that delegates to the actual service method of the servlet wrapped with a contextual\n   * request (i.e. with correctly computed path info).\n   *\n   * \u003cp\u003eWe need to suppress deprecation coz we use HttpServletRequestWrapper, which implements\n   * deprecated API for backwards compatibility.\n   */"
				},
				{
					"signature": "@Override\n          public String getPathInfo()",
					"documentation": "/**\n   * Utility that delegates to the actual service method of the servlet wrapped with a contextual\n   * request (i.e. with correctly computed path info).\n   *\n   * \u003cp\u003eWe need to suppress deprecation coz we use HttpServletRequestWrapper, which implements\n   * deprecated API for backwards compatibility.\n   */"
				},
				{
					"signature": "private boolean isPathInfoComputed()",
					"documentation": ""
				},
				{
					"signature": "private boolean isPathComputed()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String getServletPath()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public String getPathTranslated()",
					"documentation": ""
				},
				{
					"signature": "private String computePath()",
					"documentation": ""
				},
				{
					"signature": "private void doServiceImpl(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "String getKey()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.spi.ProviderWithExtensionVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Configures the servlet scopes and creates bindings for the servlet API objects so you can inject\n * the request, response, session, etc.\n *\n * \u003cp\u003eYou should subclass this module to register servlets and filters in the {@link\n * #configureServlets()} method.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.ServletModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected final void configure()",
					"documentation": "/**\n * Configures the servlet scopes and creates bindings for the servlet API objects so you can inject\n * the request, response, session, etc.\n *\n * \u003cp\u003eYou should subclass this module to register servlets and filters in the {@link\n * #configureServlets()} method.\n *\n * @author crazybob@google.com (Bob Lee)\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "protected void configureServlets()",
					"documentation": "/**\n   *\n   *\n   * \u003ch3\u003eServlet Mapping EDSL\u003c/h3\u003e\n   *\n   * \u003cp\u003ePart of the EDSL builder language for configuring servlets and filters with guice-servlet.\n   * Think of this as an in-code replacement for web.xml. Filters and servlets are configured here\n   * using simple java method calls. Here is a typical example of registering a filter when creating\n   * your Guice injector:\n   *\n   * \u003cpre\u003e\n   *   Guice.createInjector(..., new ServletModule() {\n   *\n   *     {@literal @}Override\n   *     protected void configureServlets() {\n   *       \u003cb\u003eserve(\"*.html\").with(MyServlet.class)\u003c/b\u003e\n   *     }\n   *   }\n   * \u003c/pre\u003e\n   *\n   * This registers a servlet (subclass of {@code HttpServlet}) called {@code MyServlet} to service\n   * any web pages ending in {@code .html}. You can also use a path-style syntax to register\n   * servlets:\n   *\n   * \u003cpre\u003e\n   *       \u003cb\u003eserve(\"/my/*\").with(MyServlet.class)\u003c/b\u003e\n   * \u003c/pre\u003e\n   *\n   * Every servlet (or filter) is required to be a singleton. If you cannot annotate the class\n   * directly, you should add a separate {@code bind(..).in(Singleton.class)} rule elsewhere in your\n   * module. Mapping a servlet that is bound under any other scope is an error.\n   *\n   * \u003cp\u003e\n   *\n   * \u003ch4\u003eDispatch Order\u003c/h4\u003e\n   *\n   * You are free to register as many servlets and filters as you like this way. They will be\n   * compared and dispatched in the order in which the filter methods are called:\n   *\n   * \u003cpre\u003e\n   *\n   *   Guice.createInjector(..., new ServletModule() {\n   *\n   *     {@literal @}Override\n   *     protected void configureServlets() {\n   *       filter(\"/*\").through(MyFilter.class);\n   *       filter(\"*.css\").through(MyCssFilter.class);\n   *       filter(\"*.jpg\").through(new MyJpgFilter());\n   *       // etc..\n   *\n   *       serve(\"*.html\").with(MyServlet.class);\n   *       serve(\"/my/*\").with(MyServlet.class);\n   *       serve(\"*.jpg\").with(new MyServlet());\n   *       // etc..\n   *      }\n   *    }\n   * \u003c/pre\u003e\n   *\n   * This will traverse down the list of rules in lexical order. For example, a url \"{@code\n   * /my/file.js}\" (after it runs through the matching filters) will first be compared against the\n   * servlet mapping:\n   *\n   * \u003cpre\u003e\n   *       serve(\"*.html\").with(MyServlet.class);\n   * \u003c/pre\u003e\n   *\n   * And failing that, it will descend to the next servlet mapping:\n   *\n   * \u003cpre\u003e\n   *       serve(\"/my/*\").with(MyServlet.class);\n   * \u003c/pre\u003e\n   *\n   * Since this rule matches, Guice Servlet will dispatch to {@code MyServlet}. These two mapping\n   * rules can also be written in more compact form using varargs syntax:\n   *\n   * \u003cpre\u003e\n   *       serve(\u003cb\u003e\"*.html\", \"/my/*\"\u003c/b\u003e).with(MyServlet.class);\n   * \u003c/pre\u003e\n   *\n   * This way you can map several URI patterns to the same servlet. A similar syntax is also\n   * available for filter mappings.\n   *\n   * \u003cp\u003e\n   *\n   * \u003ch4\u003eRegular Expressions\u003c/h4\u003e\n   *\n   * You can also map servlets (or filters) to URIs using regular expressions:\n   *\n   * \u003cpre\u003e\n   *    \u003cb\u003eserveRegex(\"(.)*ajax(.)*\").with(MyAjaxServlet.class)\u003c/b\u003e\n   * \u003c/pre\u003e\n   *\n   * This will map any URI containing the text \"ajax\" in it to {@code MyAjaxServlet}. Such as:\n   *\n   * \u003cul\u003e\n   * \u003cli\u003ehttp://www.google.com/ajax.html\n   * \u003cli\u003ehttp://www.google.com/content/ajax/index\n   * \u003cli\u003ehttp://www.google.com/it/is_totally_ajaxian\n   * \u003c/ul\u003e\n   *\n   * \u003ch3\u003eInitialization Parameters\u003c/h3\u003e\n   *\n   * Servlets (and filters) allow you to pass in init params using the {@code \u003cinit-param\u003e} tag in\n   * web.xml. You can similarly pass in parameters to Servlets and filters registered in\n   * Guice-servlet using a {@link java.util.Map} of parameter name/value pairs. For example, to\n   * initialize {@code MyServlet} with two parameters ({@code name=\"Dhanji\", site=\"google.com\"}) you\n   * could write:\n   *\n   * \u003cpre\u003e\n   *  Map\u0026lt;String, String\u0026gt; params = new HashMap\u0026lt;String, String\u0026gt;();\n   *  params.put(\"name\", \"Dhanji\");\n   *  params.put(\"site\", \"google.com\");\n   *\n   *  ...\n   *      serve(\"/*\").with(MyServlet.class, \u003cb\u003eparams\u003c/b\u003e)\n   * \u003c/pre\u003e\n   *\n   * \u003cp\u003e\n   *\n   * \u003ch3\u003eBinding Keys\u003c/h3\u003e\n   *\n   * You can also bind keys rather than classes. This lets you hide implementations with\n   * package-local visbility and expose them using only a Guice module and an annotation:\n   *\n   * \u003cpre\u003e\n   *  ...\n   *      filter(\"/*\").through(\u003cb\u003eKey.get(Filter.class, Fave.class)\u003c/b\u003e);\n   * \u003c/pre\u003e\n   *\n   * Where {@code Filter.class} refers to the Servlet API interface and {@code Fave.class} is a\n   * custom binding annotation. Elsewhere (in one of your own modules) you can bind this filter's\n   * implementation:\n   *\n   * \u003cpre\u003e\n   *   bind(Filter.class)\u003cb\u003e.annotatedWith(Fave.class)\u003c/b\u003e.to(MyFilterImpl.class);\n   * \u003c/pre\u003e\n   *\n   * See {@link com.google.inject.Binder} for more information on binding syntax.\n   *\n   * \u003cp\u003e\n   *\n   * \u003ch3\u003eMultiple Modules\u003c/h3\u003e\n   *\n   * It is sometimes useful to capture servlet and filter mappings from multiple different modules.\n   * This is essential if you want to package and offer drop-in Guice plugins that provide servlet\n   * functionality.\n   *\n   * \u003cp\u003eGuice Servlet allows you to register several instances of {@code ServletModule} to your\n   * injector. The order in which these modules are installed determines the dispatch order of\n   * filters and the precedence order of servlets. For example, if you had two servlet modules,\n   * {@code RpcModule} and {@code WebServiceModule} and they each contained a filter that mapped to\n   * the same URI pattern, {@code \"/*\"}:\n   *\n   * \u003cp\u003eIn {@code RpcModule}:\n   *\n   * \u003cpre\u003e\n   *     filter(\"/*\").through(RpcFilter.class);\n   * \u003c/pre\u003e\n   *\n   * In {@code WebServiceModule}:\n   *\n   * \u003cpre\u003e\n   *     filter(\"/*\").through(WebServiceFilter.class);\n   * \u003c/pre\u003e\n   *\n   * Then the order in which these filters are dispatched is determined by the order in which the\n   * modules are installed:\n   *\n   * \u003cpre\u003e\n   *   \u003cb\u003einstall(new WebServiceModule());\u003c/b\u003e\n   *   install(new RpcModule());\n   * \u003c/pre\u003e\n   *\n   * In the case shown above {@code WebServiceFilter} will run first.\n   *\n   * @since 2.0\n   */"
				},
				{
					"signature": "private FiltersModuleBuilder getFiltersModuleBuilder()",
					"documentation": ""
				},
				{
					"signature": "private ServletsModuleBuilder getServletModuleBuilder()",
					"documentation": ""
				},
				{
					"signature": "protected final FilterKeyBindingBuilder filter(String urlPattern, String... morePatterns)",
					"documentation": "/**\n   * @param urlPattern Any Servlet-style pattern. examples: /*, /html/*, *.html, etc.\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected final FilterKeyBindingBuilder filter(Iterable\u003cString\u003e urlPatterns)",
					"documentation": "/**\n   * @param urlPatterns Any Servlet-style patterns. examples: /*, /html/*, *.html, etc.\n   * @since 4.1\n   */"
				},
				{
					"signature": "protected final FilterKeyBindingBuilder filterRegex(String regex, String... regexes)",
					"documentation": "/**\n   * @param regex Any Java-style regular expression.\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected final FilterKeyBindingBuilder filterRegex(Iterable\u003cString\u003e regexes)",
					"documentation": "/**\n   * @param regexes Any Java-style regular expressions.\n   * @since 4.1\n   */"
				},
				{
					"signature": "protected final ServletKeyBindingBuilder serve(String urlPattern, String... morePatterns)",
					"documentation": "/**\n   * @param urlPattern Any Servlet-style pattern. examples: /*, /html/*, *.html, etc.\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected final ServletKeyBindingBuilder serve(Iterable\u003cString\u003e urlPatterns)",
					"documentation": "/**\n   * @param urlPatterns Any Servlet-style patterns. examples: /*, /html/*, *.html, etc.\n   * @since 4.1\n   */"
				},
				{
					"signature": "protected final ServletKeyBindingBuilder serveRegex(String regex, String... regexes)",
					"documentation": "/**\n   * @param regex Any Java-style regular expression.\n   * @since 2.0\n   */"
				},
				{
					"signature": "protected final ServletKeyBindingBuilder serveRegex(Iterable\u003cString\u003e regexes)",
					"documentation": "/**\n   * @param regexes Any Java-style regular expressions.\n   * @since 4.1\n   */"
				},
				{
					"signature": "protected final ServletContext getServletContext()",
					"documentation": "/**\n   * This method only works if you are using the {@linkplain GuiceServletContextListener} to create\n   * your injector. Otherwise, it returns null.\n   *\n   * @return The current servlet context.\n   * @since 3.0\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.struts2.Struts2FactoryTest",
				"com.google.inject.struts2.Struts2FactoryTest.TestListener"
			],
			"subClasses": [
				"com.google.inject.servlet.Module",
				"com.google.inject.servlet.ServletModuleTest.Module"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.struts2.example.ExampleListener",
				"com.google.inject.struts2.GuiceObjectFactory"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletModule.FilterKeyBindingBuilder",
				"com.google.inject.servlet.ServletModule.ServletKeyBindingBuilder"
			]
		},
		{
			"documentation": "/**\n   * See the EDSL examples at {@link ServletModule#configureServlets()}\n   *\n   * @since 2.0\n   */",
			"name": "com.google.inject.servlet.ServletModule.FilterKeyBindingBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * See the EDSL examples at {@link ServletModule#configureServlets()}\n   *\n   * @since 2.0\n   */",
			"name": "com.google.inject.servlet.ServletModule.ServletKeyBindingBuilder",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A binding created by {@link ServletModule}.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.ServletModuleBinding",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.servlet.InstanceFilterBinding",
				"com.google.inject.servlet.InstanceServletBinding",
				"com.google.inject.servlet.LinkedFilterBinding",
				"com.google.inject.servlet.LinkedServletBinding"
			],
			"implementedBy": [
				"com.google.inject.servlet.AbstractServletModuleBinding"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A visitor for the servlet extension.\n *\n * \u003cp\u003eIf your {@link BindingTargetVisitor} implements this interface, bindings created by using\n * {@link ServletModule} will be visited through this interface.\n *\n * @since 3.0\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.ServletModuleTargetVisitor",
			"extends": "com.google.inject.spi.BindingTargetVisitor",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.ServletModuleTest.Visitor",
				"com.google.inject.servlet.ServletSpiVisitor"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Servlet scopes.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.servlet.ServletScopes",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServletScopes()",
					"documentation": "/**\n * Servlet scopes.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "@Deprecated\n  public static \u003cT\u003e Callable\u003cT\u003e continueRequest(Callable\u003cT\u003e callable, Map\u003cKey\u003c?\u003e, Object\u003e seedMap)",
					"documentation": "/**\n   * Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\n   * thread. This acts as a way of transporting request context data from the request processing\n   * thread to to worker threads.\n   *\n   * \u003cp\u003eThere are some limitations:\n   *\n   * \u003cul\u003e\n   * \u003cli\u003eDerived objects (i.e. anything marked @RequestScoped will not be transported.\n   * \u003cli\u003eState changes to the HttpServletRequest after this method is called will not be seen in the\n   *     continued thread.\n   * \u003cli\u003eOnly the HttpServletRequest, ServletContext and request parameter map are available in the\n   *     continued thread. The response and session are not available.\n   * \u003c/ul\u003e\n   *\n   * \u003cp\u003eThe returned callable will throw a {@link ScopingException} when called if the HTTP request\n   * scope is still active on the current thread.\n   *\n   * @param callable code to be executed in another thread, which depends on the request scope.\n   * @param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\n   *     seed a key with null, use {@code null} as the value.\n   * @return a callable that will invoke the given callable, making the request context available to\n   *     it.\n   * @throws OutOfScopeException if this method is called from a non-request thread, or if the\n   *     request has completed.\n   * @since 3.0\n   * @deprecated You probably want to use {@code transferRequest} instead\n   */"
				},
				{
					"signature": "private static RequestScoper continueRequest(Map\u003cKey\u003c?\u003e, Object\u003e seedMap)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public CloseableScope open()",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT\u003e Callable\u003cT\u003e transferRequest(Callable\u003cT\u003e callable)",
					"documentation": "/**\n   * Wraps the given callable in a contextual callable that \"transfers\" the request to another\n   * thread. This acts as a way of transporting request context data from the current thread to a\n   * future thread.\n   *\n   * \u003cp\u003eAs opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\n   * The primary use case is in server implementations where you can detach the request processing\n   * thread while waiting for data, and reattach to a different thread to finish processing at a\n   * later time.\n   *\n   * \u003cp\u003eBecause request-scoped objects are not typically thread-safe, the callable returned by this\n   * method must not be run on a different thread until the current request scope has terminated.\n   * The returned callable will block until the current thread has released the request scope.\n   *\n   * @param callable code to be executed in another thread, which depends on the request scope.\n   * @return a callable that will invoke the given callable, making the request context available to\n   *     it.\n   * @throws OutOfScopeException if this method is called from a non-request thread, or if the\n   *     request has completed.\n   * @since 4.0\n   */"
				},
				{
					"signature": "public static RequestScoper transferRequest()",
					"documentation": "/**\n   * Returns an object that \"transfers\" the request to another thread. This acts as a way of\n   * transporting request context data from the current thread to a future thread. The transferred\n   * scope is the one active for the thread that calls this method. A later call to {@code open()}\n   * activates the transferred the scope, including propagating any objects scoped at that time.\n   *\n   * \u003cp\u003eAs opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\n   * The primary use case is in server implementations where you can detach the request processing\n   * thread while waiting for data, and reattach to a different thread to finish processing at a\n   * later time.\n   *\n   * \u003cp\u003eBecause request-scoped objects are not typically thread-safe, it is important to avoid\n   * applying the same request scope concurrently. The returned Scoper will block on open until the\n   * current thread has released the request scope.\n   *\n   * @return an object that when opened will initiate the request scope\n   * @throws OutOfScopeException if this method is called from a non-request thread, or if the\n   *     request has completed.\n   * @since 4.1\n   */"
				},
				{
					"signature": "private static RequestScoper transferHttpRequest()",
					"documentation": ""
				},
				{
					"signature": "private static RequestScoper transferNonHttpRequest()",
					"documentation": ""
				},
				{
					"signature": "public static boolean isRequestScoped(Binding\u003c?\u003e binding)",
					"documentation": "/**\n   * Returns true if {@code binding} is request-scoped. If the binding is a {@link\n   * com.google.inject.spi.LinkedKeyBinding linked key binding} and belongs to an injector (i. e. it\n   * was retrieved via {@link Injector#getBinding Injector.getBinding()}), then this method will\n   * also return true if the target binding is request-scoped.\n   *\n   * @since 4.0\n   */"
				},
				{
					"signature": "public static \u003cT\u003e Callable\u003cT\u003e scopeRequest(Callable\u003cT\u003e callable, Map\u003cKey\u003c?\u003e, Object\u003e seedMap)",
					"documentation": "/**\n   * Scopes the given callable inside a request scope. This is not the same as the HTTP request\n   * scope, but is used if no HTTP request scope is in progress. In this way, keys can be scoped\n   * as @RequestScoped and exist in non-HTTP requests (for example: RPC requests) as well as in HTTP\n   * request threads.\n   *\n   * \u003cp\u003eThe returned callable will throw a {@link ScopingException} when called if there is a\n   * request scope already active on the current thread.\n   *\n   * @param callable code to be executed which depends on the request scope. Typically in another\n   *     thread, but not necessarily so.\n   * @param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\n   *     seed a key with null, use {@code null} as the value.\n   * @return a callable that when called will run inside the a request scope that exposes the\n   *     instances in the {@code seedMap} as scoped keys.\n   * @since 3.0\n   */"
				},
				{
					"signature": "public static RequestScoper scopeRequest(Map\u003cKey\u003c?\u003e, Object\u003e seedMap)",
					"documentation": "/**\n   * Returns an object that will apply request scope to a block of code. This is not the same as the\n   * HTTP request scope, but is used if no HTTP request scope is in progress. In this way, keys can\n   * be scoped as @RequestScoped and exist in non-HTTP requests (for example: RPC requests) as well\n   * as in HTTP request threads.\n   *\n   * \u003cp\u003eThe returned object will throw a {@link ScopingException} when opened if there is a request\n   * scope already active on the current thread.\n   *\n   * @param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\n   *     seed a key with null, use {@code null} as the value.\n   * @return an object that when opened will initiate the request scope\n   * @since 4.1\n   */"
				},
				{
					"signature": "@Override\n      public CloseableScope open()",
					"documentation": "/**\n   * Returns an object that will apply request scope to a block of code. This is not the same as the\n   * HTTP request scope, but is used if no HTTP request scope is in progress. In this way, keys can\n   * be scoped as @RequestScoped and exist in non-HTTP requests (for example: RPC requests) as well\n   * as in HTTP request threads.\n   *\n   * \u003cp\u003eThe returned object will throw a {@link ScopingException} when opened if there is a request\n   * scope already active on the current thread.\n   *\n   * @param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\n   *     seed a key with null, use {@code null} as the value.\n   * @return an object that when opened will initiate the request scope\n   * @since 4.1\n   */"
				},
				{
					"signature": "private static Object validateAndCanonicalizeValue(Key\u003c?\u003e key, Object object)",
					"documentation": "/**\n   * Validates the key and object, ensuring the value matches the key type, and canonicalizing null\n   * objects to the null sentinel.\n   */"
				},
				{
					"signature": "private static void checkScopingState(boolean condition, String msg)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT\u003e Callable\u003cT\u003e wrap(Callable\u003cT\u003e delegate, RequestScoper requestScoper)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.OutOfScopeException",
				"com.google.inject.Provider",
				"com.google.inject.Scopes",
				"com.google.inject.servlet.ServletScopes.RequestScope",
				"com.google.inject.servlet.ServletScopes.SessionScope",
				"com.google.inject.servlet.ServletScopes.Context"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.NullObject",
				"com.google.inject.servlet.ServletScopes.RequestScope",
				"com.google.inject.servlet.ServletScopes.SessionScope",
				"com.google.inject.servlet.ServletScopes.Context"
			]
		},
		{
			"documentation": "/** A sentinel attribute value representing null. */",
			"name": "com.google.inject.servlet.NullObject",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** HTTP servlet request scope. */",
			"name": "com.google.inject.servlet.ServletScopes.RequestScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(final Key\u003cT\u003e key, final Provider\u003cT\u003e creator)",
					"documentation": "/** HTTP servlet request scope. */"
				},
				{
					"signature": "@Override\n        public T get()",
					"documentation": "/** Keys bound in request-scope which are handled directly by GuiceFilter. */"
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.Provider"
			],
			"usedBy": [
				"com.google.inject.servlet.ServletScopes"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** HTTP session scope. */",
			"name": "com.google.inject.servlet.ServletScopes.SessionScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public \u003cT\u003e Provider\u003cT\u003e scope(final Key\u003cT\u003e key, final Provider\u003cT\u003e creator)",
					"documentation": "/** HTTP session scope. */"
				},
				{
					"signature": "@Override\n        public T get()",
					"documentation": "/** HTTP session scope. */"
				},
				{
					"signature": "@Override\n        public String toString()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provider"
			],
			"usedBy": [
				"com.google.inject.servlet.ServletScopes"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletScopes.Context",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public CloseableScope open()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void close()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.RequestScoper"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletScopes"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Some servlet utility methods.\n *\n * @author ntang@google.com (Michael Tang)\n */",
			"name": "com.google.inject.servlet.ServletUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServletUtils()",
					"documentation": "/**\n * Some servlet utility methods.\n *\n * @author ntang@google.com (Michael Tang)\n */"
				},
				{
					"signature": "static String getContextRelativePath(\n      \n      final HttpServletRequest request)",
					"documentation": "/**\n   * Gets the context path relative path of the URI. Returns the path of the resource relative to\n   * the context path for a request's URI, or null if no path can be extracted.\n   *\n   * \u003cp\u003eAlso performs url decoding and normalization of the path.\n   */"
				},
				{
					"signature": "static String normalizePath(String path)",
					"documentation": "/** Normalizes a path by unescaping all safe, percent encoded characters. */"
				},
				{
					"signature": "private static String lenientDecode(String string, Charset encoding, boolean decodePlus)",
					"documentation": "/**\n   * Percent-decodes a US-ASCII string into a Unicode string. The specified encoding is used to\n   * determine what characters are represented by any consecutive sequences of the form\n   * \"%\u003ci\u003eXX\u003c/i\u003e\". This is the lenient kind of decoding that will simply ignore and copy as-is any\n   * \"%XX\" sequence that is invalid (for example, \"%HH\").\n   *\n   * @param string a percent-encoded US-ASCII string\n   * @param encoding a character encoding\n   * @param decodePlus boolean to indicate whether to decode '+' as ' '\n   * @return a Unicode string\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.ServletUtils.ByteAccumulator"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.ServletUtils.ByteAccumulator"
			]
		},
		{
			"documentation": "/** Accumulates byte sequences while decoding strings, and encodes them into a StringBuilder. */",
			"name": "com.google.inject.servlet.ServletUtils.ByteAccumulator",
			"extends": "",
			"Methods": [
				{
					"signature": "ByteAccumulator(int capacity, Charset encoding)",
					"documentation": "/** Accumulates byte sequences while decoding strings, and encodes them into a StringBuilder. */"
				},
				{
					"signature": "void append(byte b)",
					"documentation": ""
				},
				{
					"signature": "void dumpTo(StringBuilder dest)",
					"documentation": ""
				},
				{
					"signature": "boolean isEmpty()",
					"documentation": ""
				},
				{
					"signature": "private void ensureCapacity(int minCapacity)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletUtils"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds the guice module that binds configured servlets, with their wrapper ServletDefinitions. Is\n * part of the binding EDSL. Very similar to {@link com.google.inject.servlet.FiltersModuleBuilder}.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */",
			"name": "com.google.inject.servlet.ServletsModuleBuilder",
			"extends": "",
			"Methods": [
				{
					"signature": "public ServletsModuleBuilder(Binder binder)",
					"documentation": "/**\n * Builds the guice module that binds configured servlets, with their wrapper ServletDefinitions. Is\n * part of the binding EDSL. Very similar to {@link com.google.inject.servlet.FiltersModuleBuilder}.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail.com)\n */"
				},
				{
					"signature": "public ServletModule.ServletKeyBindingBuilder serve(List\u003cString\u003e urlPatterns)",
					"documentation": ""
				},
				{
					"signature": "public ServletModule.ServletKeyBindingBuilder serveRegex(List\u003cString\u003e regexes)",
					"documentation": ""
				},
				{
					"signature": "private List\u003cUriPatternMatcher\u003e parsePatterns(UriPatternType type, List\u003cString\u003e patterns)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.servlet.ServletKeyBindingBuilderImpl"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.ServletKeyBindingBuilderImpl"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletKeyBindingBuilderImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServletKeyBindingBuilderImpl(List\u003cUriPatternMatcher\u003e uriPatterns)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(Class\u003c? extends HttpServlet\u003e servletKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(Key\u003c? extends HttpServlet\u003e servletKey)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(HttpServlet servlet)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(Class\u003c? extends HttpServlet\u003e servletKey, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(Key\u003c? extends HttpServlet\u003e servletKey, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				},
				{
					"signature": "private void with(\n        Key\u003c? extends HttpServlet\u003e servletKey,\n        Map\u003cString, String\u003e initParams,\n        HttpServlet servletInstance)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void with(HttpServlet servlet, Map\u003cString, String\u003e initParams)",
					"documentation": ""
				}
			],
			"interfaces": [
				"ServletModule.ServletKeyBindingBuilder"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.internal.UniqueAnnotations"
			],
			"usedBy": [
				"com.google.inject.servlet.ServletsModuleBuilder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Apply this to implementation classes when you want one instance per session.\n *\n * @see com.google.inject.Scopes#SINGLETON\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.servlet.SessionScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.InvalidScopeBindingTest",
				"com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonFilter",
				"com.google.inject.servlet.ServletTest",
				"com.google.inject.servlet.ServletTest.InSession"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [
				"com.google.inject.struts2.example.Counter"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A general interface for matching a URI against a URI pattern. Guice-servlet provides regex and\n * servlet-style pattern matching out of the box.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.UriPatternMatcher",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher",
				"com.google.inject.servlet.UriPatternType.RegexUriPatternMatcher"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * An enumeration of the available URI-pattern matching styles\n *\n * @since 3.0\n */",
			"name": "com.google.inject.servlet.UriPatternType",
			"extends": "",
			"Methods": [
				{
					"signature": "static UriPatternMatcher get(UriPatternType type, String pattern)",
					"documentation": "/**\n * An enumeration of the available URI-pattern matching styles\n *\n * @since 3.0\n */"
				},
				{
					"signature": "private static String getUri(String uri)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher",
				"com.google.inject.servlet.UriPatternType.RegexUriPatternMatcher"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher",
				"com.google.inject.servlet.UriPatternType.RegexUriPatternMatcher"
			]
		},
		{
			"documentation": "/**\n   * Matches URIs using the pattern grammar of the Servlet API and web.xml.\n   *\n   * @author dhanji@gmail.com (Dhanji R. Prasanna)\n   */",
			"name": "com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher",
			"extends": "",
			"Methods": [
				{
					"signature": "public ServletStyleUriPatternMatcher(String pattern)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean matches(String uri)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String extractPath(String path)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public UriPatternType getPatternType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getOriginalPattern()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.UriPatternMatcher"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.UriPatternType"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher.Kind"
			]
		},
		{
			"documentation": "/**\n   * Matches URIs using the pattern grammar of the Servlet API and web.xml.\n   *\n   * @author dhanji@gmail.com (Dhanji R. Prasanna)\n   */",
			"name": "com.google.inject.servlet.UriPatternType.ServletStyleUriPatternMatcher.Kind",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "enum",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Matches URIs using a regular expression.\n   *\n   * @author dhanji@gmail.com (Dhanji R. Prasanna)\n   */",
			"name": "com.google.inject.servlet.UriPatternType.RegexUriPatternMatcher",
			"extends": "",
			"Methods": [
				{
					"signature": "public RegexUriPatternMatcher(String pattern)",
					"documentation": "/**\n   * Matches URIs using a regular expression.\n   *\n   * @author dhanji@gmail.com (Dhanji R. Prasanna)\n   */"
				},
				{
					"signature": "@Override\n    public boolean matches(String uri)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String extractPath(String path)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public UriPatternType getPatternType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String getOriginalPattern()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.UriPatternMatcher"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.UriPatternType"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author dhanji@gmail.com (Dhanji R. Prasanna) */",
			"name": "com.google.inject.servlet.AllTests",
			"extends": "",
			"Methods": [
				{
					"signature": "public static Test suite()",
					"documentation": "/** @author dhanji@gmail.com (Dhanji R. Prasanna) */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests to make sure that servlets with a context path are handled right. */",
			"name": "com.google.inject.servlet.ContextPathTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp() throws Exception",
					"documentation": "/** Tests to make sure that servlets with a context path are handled right. */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public void testSimple() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testRootDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testRootExplicit() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testRootSpecific() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testWebtestDefault() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testWebtestExplicit() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testWebtestSpecific() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void runTest(\n      final String requestURI,\n      final String servletPath,\n      final String contextPath,\n      final boolean filterResult,\n      final boolean fooResult,\n      final boolean barResult)\n      throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.servlet.ContextPathTest.TestFilterChain"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ContextPathTest.TestServlet",
				"com.google.inject.servlet.ContextPathTest.TestFilterChain"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContextPathTest.TestServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void doGet(HttpServletRequest req, HttpServletResponse resp)",
					"documentation": ""
				},
				{
					"signature": "public boolean isTriggered()",
					"documentation": ""
				},
				{
					"signature": "public void clear()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContextPathTest.TestFilterChain",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public boolean isTriggered()",
					"documentation": ""
				},
				{
					"signature": "public void clear()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.FilterChain"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ContextPathTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContinuingHttpServletRequestTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testReturnNullCookiesIfDelegateHasNoNull()",
					"documentation": ""
				},
				{
					"signature": "public void testReturnDelegateCookies()",
					"documentation": ""
				},
				{
					"signature": "private static void assertCookieArraysEqual(Cookie[] one, Cookie[] two)",
					"documentation": ""
				},
				{
					"signature": "private static void assertCookieEquality(Cookie one, Cookie two)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests continuation of requests */",
			"name": "com.google.inject.servlet.ContinuingRequestIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n        public void shutdown()",
					"documentation": "/** Tests continuation of requests */"
				},
				{
					"signature": "@Override\n        public List\u003cRunnable\u003e shutdownNow()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public boolean isShutdown()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public boolean isTerminated()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public void execute(Runnable command)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public \u003cT\u003e Future\u003cT\u003e submit(Callable\u003cT\u003e task)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected void tearDown() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public final void testRequestContinuesInOtherThread()\n      throws ServletException, IOException, InterruptedException",
					"documentation": ""
				},
				{
					"signature": "public final void testRequestContinuationDiesInHttpRequestThread()\n      throws ServletException, IOException, InterruptedException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.SomeObject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.SomeObject",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.ContinuingServlet",
				"com.google.inject.servlet.ContinuingRequestIntegrationTest.OffRequestCallable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContinuingRequestIntegrationTest.SomeObject",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.RequestScoped"
			],
			"usedBy": [
				"com.google.inject.servlet.ContinuingRequestIntegrationTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContinuingRequestIntegrationTest.ContinuingServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ContinuingRequestIntegrationTest.OffRequestCallable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String call() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.util.concurrent.Callable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Used in unit tests to verify the EDSL.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.DummyFilterImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public DummyFilterImpl()",
					"documentation": "/**\n * Used in unit tests to verify the EDSL.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "public DummyFilterImpl(int num)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void doFilter(\n      ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonFilter",
				"com.google.inject.servlet.InvalidScopeBindingTest.MySingletonFilter"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Used in unit tests to verify the EDSL.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.DummyServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Sanity checks the EDSL and resultant bound module(s).\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */",
			"name": "com.google.inject.servlet.EdslTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testExplicitBindingsWorksWithGuiceServlet()",
					"documentation": "/**\n * Sanity checks the EDSL and resultant bound module(s).\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */"
				},
				{
					"signature": "public final void testConfigureServlets()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configureServlets()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A very basic test that servletmodule works with bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.ExtensionSpiTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testSpiOnElements()",
					"documentation": "/**\n * A very basic test that servletmodule works with bindings.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public final void testSpiOnInjector()",
					"documentation": ""
				},
				{
					"signature": "private void validateVisitor(ServletSpiVisitor visitor)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.servlet.Module",
				"com.google.inject.servlet.ServletSpiVisitor.Params"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.Module"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.Module",
			"extends": "com.google.inject.servlet.ServletModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configureServlets()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.ExtensionSpiTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.name.Names"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests the lifecycle of the encapsulated {@link FilterDefinition} class.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.FilterDefinitionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testFilterInitAndConfig() throws ServletException",
					"documentation": "/**\n * Tests the lifecycle of the encapsulated {@link FilterDefinition} class.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "public final void testFilterCreateDispatchDestroy() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testFilterCreateDispatchDestroySupressChain()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(\n              ServletRequest servletRequest,\n              ServletResponse servletResponse,\n              FilterChain filterChain)",
					"documentation": ""
				},
				{
					"signature": "public void testGetFilterIfMatching() throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(\n              ServletRequest servletRequest,\n              ServletResponse servletResponse,\n              FilterChain filterChain)",
					"documentation": ""
				},
				{
					"signature": "public void testGetFilterIfMatchingNotMatching() throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(\n              ServletRequest servletRequest,\n              ServletResponse servletResponse,\n              FilterChain filterChain)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.servlet.FilterDefinitionTest.MockFilter"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.FilterDefinitionTest.MockFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterDefinitionTest.MockFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				},
				{
					"signature": "public boolean isInit()",
					"documentation": ""
				},
				{
					"signature": "public boolean isDestroy()",
					"documentation": ""
				},
				{
					"signature": "public FilterConfig getConfig()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.FilterDefinitionTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp()",
					"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipeline() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchThatNoFiltersFire() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchFilterPipelineWithRegexMatching()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testFilterBypass() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "private void runRequestForPath(FilterPipeline pipeline, String value, boolean matches)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public void testFilterOrder() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public final void testFilterExceptionPrunesStack() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public final void testServletExceptionPrunesStack() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.CountFilter",
				"com.google.inject.servlet.ServletTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.FilterDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.CountFilter",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingServlet",
				"com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest.TestServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    protected void service(\n        HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)\n        throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** A filter that keeps count of when it was called by increment a counter. */",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest.CountFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "public CountFilter(AtomicInteger counter)",
					"documentation": "/** A filter that keeps count of when it was called by increment a counter. */"
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n        throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.FilterDispatchIntegrationTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterDispatchIntegrationTest.ThrowingFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n        throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This is a basic whitebox test that verifies the glue between GuiceFilter and\n * ManagedFilterPipeline is working.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.FilterPipelineTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp()",
					"documentation": "/**\n * This is a basic whitebox test that verifies the glue between GuiceFilter and\n * ManagedFilterPipeline is working.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchThruGuiceFilter() throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.FilterPipelineTest.TestFilter",
				"com.google.inject.servlet.FilterPipelineTest.NeverFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterPipelineTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.FilterPipelineTest.NeverFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Exactly the same as {@linkplain com.google.inject.servlet.FilterPipelineTest} except that we test\n * that the static pipeline is not used.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.InjectedFilterPipelineTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp()",
					"documentation": "/**\n * Exactly the same as {@linkplain com.google.inject.servlet.FilterPipelineTest} except that we test\n * that the static pipeline is not used.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n  public final void tearDown()",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchThruInjectedGuiceFilter() throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.InjectedFilterPipelineTest.TestFilter",
				"com.google.inject.servlet.InjectedFilterPipelineTest.NeverFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.InjectedFilterPipelineTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.InjectedFilterPipelineTest.NeverFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Ensures that an error is thrown if a Servlet or Filter is bound under any scope other than\n * singleton, explicitly.\n *\n * @author dhanji@gmail.com\n */",
			"name": "com.google.inject.servlet.InvalidScopeBindingTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void tearDown() throws Exception",
					"documentation": "/**\n * Ensures that an error is thrown if a Servlet or Filter is bound under any scope other than\n * singleton, explicitly.\n *\n * @author dhanji@gmail.com\n */"
				},
				{
					"signature": "public final void testServletInNonSingletonScopeThrowsServletException()",
					"documentation": ""
				},
				{
					"signature": "public final void testFilterInNonSingletonScopeThrowsServletException()",
					"documentation": ""
				},
				{
					"signature": "public final void testHappyCaseFilter()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.SessionScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonServlet",
				"com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonFilter",
				"com.google.inject.servlet.InvalidScopeBindingTest.MySingletonFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.RequestScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.InvalidScopeBindingTest.MyNonSingletonFilter",
			"extends": "com.google.inject.servlet.DummyFilterImpl",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.SessionScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.InvalidScopeBindingTest.MySingletonFilter",
			"extends": "com.google.inject.servlet.DummyFilterImpl",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters with\n * multiple modules.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.MultiModuleDispatchIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp()",
					"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters with\n * multiple modules.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipeline() throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.MultiModuleDispatchIntegrationTest.TestFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.MultiModuleDispatchIntegrationTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This gorgeous test asserts that multiple servlet pipelines can run in the SAME JVM. booya.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.MultipleServletInjectorsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testTwoInjectors()",
					"documentation": "/**\n * This gorgeous test asserts that multiple servlet pipelines can run in the SAME JVM. booya.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n      protected Injector getInjector()",
					"documentation": "/**\n * This gorgeous test asserts that multiple servlet pipelines can run in the SAME JVM. booya.\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "@Override\n      protected Injector getInjector()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests continuation of requests */",
			"name": "com.google.inject.servlet.ScopeRequestIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testNonHttpRequestScopedCallable()\n      throws ServletException, IOException, InterruptedException, ExecutionException",
					"documentation": "/** Tests continuation of requests */"
				},
				{
					"signature": "public final void testWrongValueClasses() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public final void testNullReplacement() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.Singleton",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.SomeObject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ScopeRequestIntegrationTest.SomeObject",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.OffRequestCallable",
				"com.google.inject.servlet.ScopeRequestIntegrationTest.Caller"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ScopeRequestIntegrationTest.SomeObject",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public SomeObject(@Named(INVALID) String value)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.servlet.RequestScoped"
			],
			"usedBy": [
				"com.google.inject.servlet.ScopeRequestIntegrationTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ScopeRequestIntegrationTest.OffRequestCallable",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public String call() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.util.concurrent.Callable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ScopeRequestIntegrationTest.Caller",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public SomeObject call() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.util.concurrent.Callable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Ensures servlet spec compliance for CGI-style variables and general path/pattern matching.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.ServletDefinitionPathsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testServletPathMatching() throws IOException, ServletException",
					"documentation": "/**\n * Ensures servlet spec compliance for CGI-style variables and general path/pattern matching.\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "private void servletPath(\n      final String requestPath, String mapping, final String expectedServletPath)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public final void testPathInfoWithServletStyleMatching() throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "private void pathInfoWithServletStyleMatching(\n      final String requestUri,\n      final String contextPath,\n      String mapping,\n      final String expectedPathInfo,\n      final String servletPath)\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public final void testPathInfoWithRegexMatching() throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public final void pathInfoWithRegexMatching(\n      final String requestUri,\n      final String contextPath,\n      String mapping,\n      final String expectedPathInfo,\n      final String servletPath)\n      throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Basic unit test for lifecycle of a ServletDefinition (wrapper).\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.ServletDefinitionTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  public final void testServletInitAndConfig() throws ServletException",
					"documentation": "/**\n * Basic unit test for lifecycle of a ServletDefinition (wrapper).\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "public void testServiceWithContextPath() throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests the FilterPipeline that dispatches to guice-managed servlets, is a full integration test,\n * with a real injector.\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * Tests the FilterPipeline that dispatches to guice-managed servlets, is a full integration test,\n * with a real injector.\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */"
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipelineServlets()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipelineWithFilter()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public void testForwardUsingRequestDispatcher() throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public final void testQueryInRequestUri_regex() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public final void testQueryInRequestUri() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.NeverServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.TestFilter",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardingServlet",
				"com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardedServlet"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest.TestServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void init(ServletConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest.NeverServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void init(ServletConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardingServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletDispatchIntegrationTest.ForwardedServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "public ForwardedServlet()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for ServletModule, to ensure it captures bindings correctly.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.ServletModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testServletModuleCallOutsideConfigure()",
					"documentation": "/**\n * Tests for ServletModule, to ensure it captures bindings correctly.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public void testServletModuleReuse()",
					"documentation": ""
				},
				{
					"signature": "public void testServletModule_badPattern()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.spi.Elements",
				"com.google.inject.servlet.ServletModuleTest.Module",
				"com.google.inject.servlet.ServletModuleTest.Visitor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletModuleTest.Module",
				"com.google.inject.servlet.ServletModuleTest.Visitor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletModuleTest.Module",
			"extends": "com.google.inject.servlet.ServletModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configureServlets()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletModuleTest.Visitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "@Override\n    public Void visit(LinkedFilterBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Void visit(InstanceFilterBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Void visit(LinkedServletBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Void visit(InstanceServletBinding binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.ServletModuleTargetVisitor"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests forwarding and inclusion (RequestDispatcher actions from the servlet spec).\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */",
			"name": "com.google.inject.servlet.ServletPipelineRequestDispatcherTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public final void testIncludeManagedServlet() throws IOException, ServletException",
					"documentation": "/**\n * Tests forwarding and inclusion (RequestDispatcher actions from the servlet spec).\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "@Override\n          protected void service(\n              HttpServletRequest request, HttpServletResponse httpServletResponse)\n              throws ServletException, IOException",
					"documentation": "/**\n * Tests forwarding and inclusion (RequestDispatcher actions from the servlet spec).\n *\n * @author Dhanji R. Prasanna (dhanji@gmail com)\n */"
				},
				{
					"signature": "public final void testForwardToManagedServlet() throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void service(\n              HttpServletRequest request, HttpServletResponse httpServletResponse)\n              throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testForwardToManagedServletFailureOnCommittedBuffer()\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "public final void forwardToManagedServletFailureOnCommittedBuffer()\n      throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void service(\n              HttpServletRequest request, HttpServletResponse httpServletResponse)\n              throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testWrappedRequestUriAndUrlConsistency()",
					"documentation": ""
				},
				{
					"signature": "public final void testWrappedRequestUrlNegativePort()",
					"documentation": ""
				},
				{
					"signature": "public final void testWrappedRequestUrlDefaultPort()",
					"documentation": ""
				},
				{
					"signature": "public final void testWrappedRequestUrlDefaultHttpsPort()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.util.Providers"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests for {@link ServletScopes}.\n *\n * @author forster@google.com (Mike Forster)\n */",
			"name": "com.google.inject.servlet.ServletScopesTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testIsRequestScopedPositive()",
					"documentation": "/**\n * Tests for {@link ServletScopes}.\n *\n * @author forster@google.com (Mike Forster)\n */"
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": "/**\n * Tests for {@link ServletScopes}.\n *\n * @author forster@google.com (Mike Forster)\n */"
				},
				{
					"signature": "@Provides\n          @Named(\"G\")\n          @RequestScoped\n          String provideG()",
					"documentation": ""
				},
				{
					"signature": "public void testIsRequestScopedNegative()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n          @Named(\"J\")\n          @CustomScoped\n          String provideJ()",
					"documentation": ""
				},
				{
					"signature": "private ImmutableMap\u003cKey\u003c?\u003e, Binding\u003c?\u003e\u003e indexBindings(Iterable\u003cElement\u003e elements)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.PrivateModule",
				"com.google.inject.Provides",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Elements",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.CustomScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletScopesTest.AnnotatedRequestScopedClass",
				"com.google.inject.servlet.CustomScoped"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletScopesTest.AnnotatedRequestScopedClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.RequestScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.CustomScoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.ServletScopesTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A visitor for testing the servlet SPI extension.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.ServletSpiVisitor",
			"extends": "com.google.inject.spi.DefaultBindingTargetVisitor",
			"Methods": [
				{
					"signature": "ServletSpiVisitor(boolean forInjector)",
					"documentation": "/**\n * A visitor for testing the servlet SPI extension.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@Override\n  public Integer visit(InstanceFilterBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Integer visit(InstanceServletBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Integer visit(LinkedFilterBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Integer visit(LinkedServletBinding binding)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  protected Integer visitOther(Binding\u003c? extends Object\u003e binding)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.servlet.ServletModuleTargetVisitor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.ServletSpiVisitor.Params"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.servlet.ServletSpiVisitor.Params"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletSpiVisitor.Params",
			"extends": "",
			"Methods": [
				{
					"signature": "Params(ServletModuleBinding binding, Object keyOrInstance)",
					"documentation": ""
				},
				{
					"signature": "Params(\n        String pattern,\n        Object keyOrInstance,\n        Map\u003cString, String\u003e params,\n        UriPatternType patternType)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public boolean equals(Object obj)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public int hashCode()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.ExtensionSpiTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletSpiVisitor"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.servlet.ServletTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": ""
				},
				{
					"signature": "public void testScopeExceptions() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testRequestAndResponseBindings() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testRequestAndResponseBindings_wrappingFilter() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Map\u003cString, String[]\u003e getParameterMap()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Object getAttribute(String attr)",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testRequestAndResponseBindings_matchesPassedParameters() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testNewRequestObject() throws CreationException, IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testExistingRequestObject() throws CreationException, IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testNewSessionObject() throws CreationException, IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testExistingSessionObject() throws CreationException, IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testHttpSessionIsSerializable() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "public void testGuiceFilterConstructors() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)",
					"documentation": ""
				},
				{
					"signature": "private Injector createInjector(Module... modules) throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Provides",
				"com.google.inject.internal.Annotations",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.Asserts",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.SessionScoped",
				"com.google.inject.servlet.ServletTestUtils"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletTest.InSession",
				"com.google.inject.servlet.ServletTest.InRequest",
				"com.google.inject.servlet.Null"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletTest.InSession",
			"extends": "",
			"Methods": [],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.SessionScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletTest.InRequest",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.RequestScoped"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.Null",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utilities for servlet tests.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.servlet.ServletTestUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "private ServletTestUtils()",
					"documentation": "/**\n * Utilities for servlet tests.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "public static FilterChain newNoOpFilterChain()",
					"documentation": "/** Returns a FilterChain that does nothing. */"
				},
				{
					"signature": "@Override\n      public void doFilter(ServletRequest request, ServletResponse response)",
					"documentation": "/** Returns a FilterChain that does nothing. */"
				},
				{
					"signature": "public static HttpServletRequest newFakeHttpServletRequest()",
					"documentation": "/** Returns a fake, HttpServletRequest which stores attributes in a HashMap. */"
				},
				{
					"signature": "@Override\n      public String getMethod()",
					"documentation": "/** Returns a fake, HttpServletRequest which stores attributes in a HashMap. */"
				},
				{
					"signature": "@Override\n      public Object getAttribute(String name)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public void setAttribute(String name, Object value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public Map\u003cString, String[]\u003e getParameterMap()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String getRequestURI()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public String getContextPath()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public HttpSession getSession()",
					"documentation": ""
				},
				{
					"signature": "public static HttpServletResponse newFakeHttpServletResponse()",
					"documentation": "/**\n   * Returns a fake, HttpServletResponse which throws an exception if any of its methods are called.\n   */"
				},
				{
					"signature": "public static HttpSession newFakeHttpSession()",
					"documentation": "/** Returns a fake, serializable HttpSession which stores attributes in a HashMap. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.ServletTestUtils.ThrowingInvocationHandler"
			],
			"usedBy": [
				"com.google.inject.servlet.FilterDispatchIntegrationTest",
				"com.google.inject.servlet.ServletTest"
			],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.ServletTestUtils.ThrowingInvocationHandler",
				"com.google.inject.servlet.ServletTestUtils.FakeHttpSessionHandler"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletTestUtils.ThrowingInvocationHandler",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.servlet.ServletTestUtils"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.ServletTestUtils.FakeHttpSessionHandler",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler",
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Unit test for the servlet utility class.\n *\n * @author ntang@google.com (Michael Tang)\n */",
			"name": "com.google.inject.servlet.ServletUtilsTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testGetContextRelativePath()",
					"documentation": "/**\n * Unit test for the servlet utility class.\n *\n * @author ntang@google.com (Michael Tang)\n */"
				},
				{
					"signature": "public void testGetContextRelativePath_preserveQuery()",
					"documentation": ""
				},
				{
					"signature": "public void testGetContextRelativePathWithWrongPath()",
					"documentation": ""
				},
				{
					"signature": "public void testGetContextRelativePathWithRootPath()",
					"documentation": ""
				},
				{
					"signature": "public void testGetContextRelativePathWithEmptyPath()",
					"documentation": ""
				},
				{
					"signature": "public void testNormalizePath()",
					"documentation": ""
				},
				{
					"signature": "private String getContextRelativePath(String contextPath, String requestPath)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Tests transferring of entire request scope. */",
			"name": "com.google.inject.servlet.TransferRequestIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testTransferHttp_outOfScope()",
					"documentation": "/** Tests transferring of entire request scope. */"
				},
				{
					"signature": "public void testTransferNonHttp_outOfScope()",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttp_outOfScope_closeable()",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest_closeable() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest_concurrentUseBlocks() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest_concurrentUseBlocks_closeable() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest_concurrentUseSameThreadOk() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testTransferNonHttpRequest_concurrentUseSameThreadOk_closeable() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.servlet.RequestScoped",
				"com.google.inject.servlet.Data"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.Data"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.Data",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.servlet.TransferRequestIntegrationTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.UriPatternTypeTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testMatches_servlet()",
					"documentation": ""
				},
				{
					"signature": "public void testMatches_regex()",
					"documentation": ""
				},
				{
					"signature": "public void testPatternWithPercentEncodedChars_servlet()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */",
			"name": "com.google.inject.servlet.VarargsFilterDispatchIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public final void setUp()",
					"documentation": "/**\n * This tests that filter stage of the pipeline dispatches correctly to guice-managed filters.\n *\n * \u003cp\u003eWARNING(dhanji): Non-parallelizable test =(\n *\n * @author dhanji@gmail.com (Dhanji R. Prasanna)\n */"
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipeline() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchThatNoFiltersFire() throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchFilterPipelineWithRegexMatching()\n      throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.VarargsFilterDispatchIntegrationTest.TestFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.VarargsFilterDispatchIntegrationTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Tests the FilterPipeline that dispatches to guice-managed servlets, is a full integration test,\n * with a real injector.\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */",
			"name": "com.google.inject.servlet.VarargsServletDispatchIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  public void setUp()",
					"documentation": "/**\n * Tests the FilterPipeline that dispatches to guice-managed servlets, is a full integration test,\n * with a real injector.\n *\n * @author Dhanji R. Prasanna (dhanji gmail com)\n */"
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipelineServlets()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testVarargsSkipDispatchRequestToManagedPipelineServlets()\n      throws ServletException, IOException",
					"documentation": ""
				},
				{
					"signature": "public final void testDispatchRequestToManagedPipelineWithFilter()\n      throws ServletException, IOException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestServlet",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.NeverServlet",
				"com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestFilter"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void init(ServletConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.VarargsServletDispatchIntegrationTest.NeverServlet",
			"extends": "javax.servlet.http.HttpServlet",
			"Methods": [
				{
					"signature": "@Override\n    public void init(ServletConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.servlet.VarargsServletDispatchIntegrationTest.TestFilter",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public void init(FilterConfig filterConfig) throws ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void doFilter(\n        ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n        throws IOException, ServletException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				}
			],
			"interfaces": [
				"javax.servlet.Filter"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Singleton"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Integrates Guice with Spring.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.spring.SpringIntegration",
			"extends": "",
			"Methods": [
				{
					"signature": "private SpringIntegration()",
					"documentation": "/**\n * Integrates Guice with Spring.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				},
				{
					"signature": "public static \u003cT\u003e Provider\u003cT\u003e fromSpring(Class\u003cT\u003e type, String name)",
					"documentation": "/**\n   * Creates a provider which looks up objects from Spring using the given name. Expects a binding\n   * to {@link org.springframework.beans.factory.BeanFactory}. Example usage:\n   *\n   * \u003cpre\u003e\n   * bind(DataSource.class)\n   *   .toProvider(fromSpring(DataSource.class, \"dataSource\"));\n   * \u003c/pre\u003e\n   */"
				},
				{
					"signature": "public static void bindAll(Binder binder, ListableBeanFactory beanFactory)",
					"documentation": "/**\n   * Binds all Spring beans from the given factory by name. For a Spring bean named \"foo\", this\n   * method creates a binding to the bean's type and {@code @Named(\"foo\")}.\n   *\n   * @see com.google.inject.name.Named\n   * @see com.google.inject.name.Names#named(String)\n   */"
				},
				{
					"signature": "static \u003cT\u003e void bindBean(\n      Binder binder, ListableBeanFactory beanFactory, String name, Class\u003cT\u003e type)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.spring.SpringIntegration.SpringProvider",
				"com.google.inject.spring.SpringIntegration.InjectableSpringProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spring.SpringIntegration.SpringProvider",
				"com.google.inject.spring.SpringIntegration.InjectableSpringProvider"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spring.SpringIntegration.SpringProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public SpringProvider(Class\u003cT\u003e type, String name)",
					"documentation": ""
				},
				{
					"signature": "static \u003cT\u003e SpringProvider\u003cT\u003e newInstance(Class\u003cT\u003e type, String name)",
					"documentation": ""
				},
				{
					"signature": "void initialize(BeanFactory beanFactory)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				},
				{
					"signature": "private T getSingleton()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.spring.SpringIntegration.InjectableSpringProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.spring.SpringIntegration"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spring.SpringIntegration.InjectableSpringProvider",
			"extends": "com.google.inject.spring.SpringIntegration.SpringProvider",
			"Methods": [
				{
					"signature": "InjectableSpringProvider(Class\u003cT\u003e type, String name)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    @Override\n    void initialize(BeanFactory beanFactory)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.spring.SpringIntegration"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** @author crazybob@google.com (Bob Lee) */",
			"name": "com.google.inject.spring.SpringIntegrationTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindFromSpring() throws CreationException",
					"documentation": "/** @author crazybob@google.com (Bob Lee) */"
				},
				{
					"signature": "public void testBindAll() throws CreationException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.name.Names"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.spring.SpringIntegrationTest.Singleton",
				"com.google.inject.spring.SpringIntegrationTest.Prototype"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.spring.SpringIntegrationTest.Singleton",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.spring.SpringIntegrationTest.Prototype",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.struts2.example.Count",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n  public Count(Counter counter, Service service)",
					"documentation": ""
				},
				{
					"signature": "public String execute()",
					"documentation": ""
				},
				{
					"signature": "public int getCount()",
					"documentation": ""
				},
				{
					"signature": "public String getStatus()",
					"documentation": ""
				},
				{
					"signature": "public String getMessage()",
					"documentation": ""
				},
				{
					"signature": "public void setMessage(String message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Session-scoped counter. */",
			"name": "com.google.inject.struts2.example.Counter",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.servlet.SessionScoped"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Example application module.\n *\n * @author crazybob@google.com (Bob Lee)\n */",
			"name": "com.google.inject.struts2.example.ExampleListener",
			"extends": "com.google.inject.servlet.GuiceServletContextListener",
			"Methods": [
				{
					"signature": "public Injector getInjector()",
					"documentation": "/**\n * Example application module.\n *\n * @author crazybob@google.com (Bob Lee)\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.servlet.ServletModule",
				"com.google.inject.struts2.Struts2GuicePluginModule"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Starts the example web server on port 8080. Run from \"./struts2/example\". */",
			"name": "com.google.inject.struts2.example.Main",
			"extends": "",
			"Methods": [
				{
					"signature": "public static void main(String[] args) throws Exception",
					"documentation": "/** Starts the example web server on port 8080. Run from \"./struts2/example\". */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.struts2.example.Service",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.struts2.example.ServiceImpl"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.struts2.example.ServiceImpl",
			"extends": "",
			"Methods": [
				{
					"signature": "public String getStatus()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.struts2.example.Service"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** @deprecated Use {@link com.google.inject.struts2.Struts2Factory} instead. */",
			"name": "com.google.inject.struts2.GuiceObjectFactory",
			"extends": "com.opensymphony.xwork2.ObjectFactory",
			"Methods": [
				{
					"signature": "@Override\n  public boolean isNoArgConstructorRequired()",
					"documentation": "/** @deprecated Use {@link com.google.inject.struts2.Struts2Factory} instead. */"
				},
				{
					"signature": "@Inject(value = \"guice.module\", required = false)\n  void setModule(String moduleClassName)",
					"documentation": ""
				},
				{
					"signature": "@Inject(value = \"struts.devMode\", required = false)\n  void setDevelopmentMode(String developmentMode)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  @Override\n  public Class getClassInstance(String name) throws ClassNotFoundException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n  public Object buildBean(Class clazz, Map\u003cString, Object\u003e extraContext)",
					"documentation": ""
				},
				{
					"signature": "private void createInjector()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public Interceptor buildInterceptor(\n      InterceptorConfig interceptorConfig, Map\u003cString, String\u003e interceptorRefParams)",
					"documentation": ""
				},
				{
					"signature": "Interceptor superBuildInterceptor(\n      InterceptorConfig interceptorConfig, Map\u003cString, String\u003e interceptorRefParams)",
					"documentation": ""
				},
				{
					"signature": "private static boolean hasScope(Class\u003c? extends Interceptor\u003e interceptorClass)",
					"documentation": "/** Returns true if the given class has a scope annotation. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.servlet.ServletModule",
				"com.google.inject.struts2.ProvidedInterceptor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.struts2.ProvidedInterceptor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.struts2.ProvidedInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "ProvidedInterceptor(\n        InterceptorConfig config,\n        Map\u003cString, String\u003e params,\n        Class\u003c? extends Interceptor\u003e interceptorClass)",
					"documentation": ""
				},
				{
					"signature": "void validate(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "void inject()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void init()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String intercept(ActionInvocation invocation) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.opensymphony.xwork2.interceptor.Interceptor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.struts2.GuiceObjectFactory",
				"com.google.inject.struts2.Struts2Factory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Cleanup up version from Bob's GuiceObjectFactory. Now works properly with GS2 and fixes several\n * bugs.\n *\n * @author dhanji@gmail.com\n * @author benmccann.com\n */",
			"name": "com.google.inject.struts2.Struts2Factory",
			"extends": "com.opensymphony.xwork2.ObjectFactory",
			"Methods": [
				{
					"signature": "@Override\n  public boolean isNoArgConstructorRequired()",
					"documentation": "/**\n * Cleanup up version from Bob's GuiceObjectFactory. Now works properly with GS2 and fixes several\n * bugs.\n *\n * @author dhanji@gmail.com\n * @author benmccann.com\n */"
				},
				{
					"signature": "@Inject(value = \"guice.module\", required = false)\n  void setModule(String moduleClassName)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Class\u003c?\u003e getClassInstance(String name) throws ClassNotFoundException",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n  public Object buildBean(Class clazz, Map\u003cString, Object\u003e extraContext)",
					"documentation": ""
				},
				{
					"signature": "private void createInjector()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public Interceptor buildInterceptor(\n      InterceptorConfig interceptorConfig, Map\u003cString, String\u003e interceptorRefParams)\n      throws ConfigurationException",
					"documentation": ""
				},
				{
					"signature": "private Interceptor superBuildInterceptor(\n      InterceptorConfig interceptorConfig, Map\u003cString, String\u003e interceptorRefParams)\n      throws ConfigurationException",
					"documentation": ""
				},
				{
					"signature": "private static boolean hasScope(Class\u003c? extends Interceptor\u003e interceptorClass)",
					"documentation": "/** Returns true if the given class has a scope annotation. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.struts2.ProvidedInterceptor"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.struts2.ProvidedInterceptor"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.struts2.ProvidedInterceptor",
			"extends": "",
			"Methods": [
				{
					"signature": "ProvidedInterceptor(\n        InterceptorConfig config,\n        Map\u003cString, String\u003e params,\n        Class\u003c? extends Interceptor\u003e interceptorClass)",
					"documentation": ""
				},
				{
					"signature": "void validate(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "void inject()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void destroy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public void init()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String intercept(ActionInvocation invocation) throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.opensymphony.xwork2.interceptor.Interceptor"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.struts2.GuiceObjectFactory",
				"com.google.inject.struts2.Struts2Factory"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Initializes the Struts 2 Guice Plugin. Must be added to the injector returned by {@link\n * com.google.inject.servlet.GuiceServletContextListener#getInjector}.\n *\n * @author benmccann.com\n */",
			"name": "com.google.inject.struts2.Struts2GuicePluginModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n  protected void configure()",
					"documentation": "/**\n * Initializes the Struts 2 Guice Plugin. Must be added to the injector returned by {@link\n * com.google.inject.servlet.GuiceServletContextListener#getInjector}.\n *\n * @author benmccann.com\n */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.struts2.example.ExampleListener"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Test for Struts2Factory\n *\n * @author benmccann.com\n */",
			"name": "com.google.inject.struts2.Struts2FactoryTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testStruts2Factory()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.servlet.ServletModule",
				"com.google.inject.struts2.Struts2FactoryTest.TestListener"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.struts2.Struts2FactoryTest.TestListener"
			]
		},
		{
			"documentation": "/**\n * Test for Struts2Factory\n *\n * @author benmccann.com\n */",
			"name": "com.google.inject.struts2.Struts2FactoryTest.TestListener",
			"extends": "com.google.inject.servlet.GuiceServletContextListener",
			"Methods": [
				{
					"signature": "public TestListener(Module module)",
					"documentation": "/**\n * Test for Struts2Factory\n *\n * @author benmccann.com\n */"
				},
				{
					"signature": "@Override\n    protected Injector getInjector()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Guice",
				"com.google.inject.servlet.ServletModule"
			],
			"usedBy": [
				"com.google.inject.struts2.Struts2FactoryTest"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotation used by {@link BoundFieldModule} to indicate that a field should be bound to its value\n * using Guice.\n *\n * \u003cp\u003e{@code Bind} supports binding annotations. For example, to bind a {@code @Fast Car}, use\n * {@code @Bind @Fast Car}.\n *\n * \u003cp\u003eBinding to {@code null} is only allowed for fields that are annotated {@code @Nullable}. See\n * \u003ca\n * href=\"https://github.com/google/guice/wiki/UseNullable\"\u003ehttps://github.com/google/guice/wiki/UseNullable\u003c/a\u003e\n *\n * @see BoundFieldModule\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.fieldbinder.Bind",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.example.AppTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyProviderClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A Guice module that automatically adds Guice bindings into the injector for all {@link Bind}\n * annotated fields of a specified object.\n *\n * \u003cp\u003eThis module is intended for use in tests to reduce the amount of boilerplate code needed to\n * bind local fields (usually mocks) for injection.\n *\n * \u003cp\u003eThe following rules are followed in determining how fields are bound using this module:\n *\n * \u003cul\u003e\n *   \u003cli\u003eFor each {@link Bind} annotated field of an object and its superclasses, this module will\n *       bind that field's type to that field's value at injector creation time. This includes both\n *       instance and static fields.\n *   \u003cli\u003eIf {@link Bind#to} is specified, the field's value will be bound to the class specified by\n *       {@link Bind#to} instead of the field's actual type.\n *   \u003cli\u003eIf {@link Bind#lazy} is true, this module will delay reading the value from the field until\n *       injection time, allowing the field's value to be reassigned during the course of a test's\n *       execution.\n *   \u003cli\u003eIf a {@link BindingAnnotation} or {@link javax.inject.Qualifier} is present on the field,\n *       that field will be bound using that annotation via {@link\n *       AnnotatedBindingBuilder#annotatedWith}. For example, {@code\n *       bind(Foo.class).annotatedWith(BarAnnotation.class).toInstance(theValue)}. It is an error to\n *       supply more than one {@link BindingAnnotation} or {@link javax.inject.Qualifier}.\n *   \u003cli\u003eIf the field is of type {@link Provider}, the field's value will be bound as a {@link\n *       Provider} using {@link LinkedBindingBuilder#toProvider} to the provider's parameterized\n *       type. For example, {@code Provider\u003cInteger\u003e} binds to {@link Integer}. Attempting to bind a\n *       non-parameterized {@link Provider} without a {@link Bind#to} clause is an error.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eExample use:\n *\n * \u003cpre\u003e{@code\n * public class TestFoo {\n *   // bind(new TypeLiteral\u003cList\u003cObject\u003e\u003e() {}).toInstance(listOfObjects);\n *   {@literal @}Bind private List\u003cObject\u003e listOfObjects = Lists.of();\n *\n *   // private String userName = \"string_that_changes_over_time\";\n *   // bind(String.class).toProvider(new Provider() { public String get() { return userName; }});\n *   {@literal @}Bind(lazy = true) private String userName;\n *\n *   // bind(SuperClass.class).toInstance(aSubClass);\n *   {@literal @}Bind(to = SuperClass.class) private SubClass aSubClass = new SubClass();\n *\n *   // bind(String.class).annotatedWith(MyBindingAnnotation.class).toInstance(myString);\n *   {@literal @}Bind\n *   {@literal @}MyBindingAnnotation\n *   private String myString = \"hello\";\n *\n *   // bind(Object.class).toProvider(myProvider);\n *   {@literal @}Bind private Provider\u003cObject\u003e myProvider = getProvider();\n *\n *   {@literal @}Before public void setUp() {\n *     Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n *   }\n * }\n * }\u003c/pre\u003e\n *\n * @see Bind\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModule",
			"extends": "",
			"Methods": [
				{
					"signature": "private BoundFieldModule(Object instance)",
					"documentation": "/**\n * A Guice module that automatically adds Guice bindings into the injector for all {@link Bind}\n * annotated fields of a specified object.\n *\n * \u003cp\u003eThis module is intended for use in tests to reduce the amount of boilerplate code needed to\n * bind local fields (usually mocks) for injection.\n *\n * \u003cp\u003eThe following rules are followed in determining how fields are bound using this module:\n *\n * \u003cul\u003e\n *   \u003cli\u003eFor each {@link Bind} annotated field of an object and its superclasses, this module will\n *       bind that field's type to that field's value at injector creation time. This includes both\n *       instance and static fields.\n *   \u003cli\u003eIf {@link Bind#to} is specified, the field's value will be bound to the class specified by\n *       {@link Bind#to} instead of the field's actual type.\n *   \u003cli\u003eIf {@link Bind#lazy} is true, this module will delay reading the value from the field until\n *       injection time, allowing the field's value to be reassigned during the course of a test's\n *       execution.\n *   \u003cli\u003eIf a {@link BindingAnnotation} or {@link javax.inject.Qualifier} is present on the field,\n *       that field will be bound using that annotation via {@link\n *       AnnotatedBindingBuilder#annotatedWith}. For example, {@code\n *       bind(Foo.class).annotatedWith(BarAnnotation.class).toInstance(theValue)}. It is an error to\n *       supply more than one {@link BindingAnnotation} or {@link javax.inject.Qualifier}.\n *   \u003cli\u003eIf the field is of type {@link Provider}, the field's value will be bound as a {@link\n *       Provider} using {@link LinkedBindingBuilder#toProvider} to the provider's parameterized\n *       type. For example, {@code Provider\u003cInteger\u003e} binds to {@link Integer}. Attempting to bind a\n *       non-parameterized {@link Provider} without a {@link Bind#to} clause is an error.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eExample use:\n *\n * \u003cpre\u003e{@code\n * public class TestFoo {\n *   // bind(new TypeLiteral\u003cList\u003cObject\u003e\u003e() {}).toInstance(listOfObjects);\n *   {@literal @}Bind private List\u003cObject\u003e listOfObjects = Lists.of();\n *\n *   // private String userName = \"string_that_changes_over_time\";\n *   // bind(String.class).toProvider(new Provider() { public String get() { return userName; }});\n *   {@literal @}Bind(lazy = true) private String userName;\n *\n *   // bind(SuperClass.class).toInstance(aSubClass);\n *   {@literal @}Bind(to = SuperClass.class) private SubClass aSubClass = new SubClass();\n *\n *   // bind(String.class).annotatedWith(MyBindingAnnotation.class).toInstance(myString);\n *   {@literal @}Bind\n *   {@literal @}MyBindingAnnotation\n *   private String myString = \"hello\";\n *\n *   // bind(Object.class).toProvider(myProvider);\n *   {@literal @}Bind private Provider\u003cObject\u003e myProvider = getProvider();\n *\n *   {@literal @}Before public void setUp() {\n *     Guice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n *   }\n * }\n * }\u003c/pre\u003e\n *\n * @see Bind\n * @author eatnumber1@google.com (Russ Harmon)\n */"
				},
				{
					"signature": "@CheckReturnValue\n  public static BoundFieldModule of(Object instance)",
					"documentation": "/**\n   * Create a BoundFieldModule which binds the {@link Bind} annotated fields of {@code instance}.\n   *\n   * @param instance the instance whose fields will be bound.\n   * @return a module which will bind the {@link Bind} annotated fields of {@code instance}.\n   */"
				},
				{
					"signature": "public Object getInstance()",
					"documentation": "/** Returns the the object originally passed to {@link BoundFieldModule#of}). */"
				},
				{
					"signature": "public ImmutableSet\u003cBoundFieldInfo\u003e getBoundFields()",
					"documentation": "/**\n   * Returns information about the fields bound by this module.\n   *\n   * \u003cp\u003eNote this is available immediately after construction, fields with errors won't be included\n   * but their error messages will be deferred to configuration time.\n   *\n   * \u003cp\u003eFields with invalid null values \u003cem\u003eare\u003c/em\u003e included but still cause errors at\n   * configuration time.\n   */"
				},
				{
					"signature": "private ImmutableSet\u003cBoundFieldInfo\u003e findBindableFields(\n      ImmutableList.Builder\u003cMessage\u003e deferredErrors)",
					"documentation": ""
				},
				{
					"signature": "private Optional\u003cBoundFieldInfo\u003e getBoundFieldInfo(\n      TypeLiteral\u003c?\u003e containingClassType,\n      Field field,\n      ImmutableList.Builder\u003cMessage\u003e deferredErrors)",
					"documentation": "/**\n   * Retrieve a {@link BoundFieldInfo}.\n   *\n   * \u003cp\u003eThis returns a {@link BoundFieldInfo} if the field has a {@link Bind} annotation. Otherwise\n   * it returns {@link Optional#absent()}.\n   */"
				},
				{
					"signature": "private static boolean hasInject(Field field)",
					"documentation": ""
				},
				{
					"signature": "private static boolean isTransparentProvider(Class\u003c?\u003e clazz)",
					"documentation": "/**\n   * Determines if {@code clazz} is a \"transparent provider\".\n   *\n   * \u003cp\u003eIf you have traced through the code and found that what you want to do is failing because of\n   * this check, try using {@code @Bind(lazy=true) MyType myField} and lazily assign myField\n   * instead.\n   *\n   * \u003cp\u003eA transparent provider is a {@link com.google.inject.Provider} or {@link\n   * javax.inject.Provider} which binds to it's parameterized type when used as the argument to\n   * {@link Binder#bind}.\n   *\n   * \u003cp\u003eA {@link Provider} is transparent if the base class of that object is {@link Provider}. In\n   * other words, subclasses of {@link Provider} are not transparent. As a special case, if a {@link\n   * Provider} has no parameterized type but is otherwise transparent, then it is considered\n   * transparent.\n   *\n   * \u003cp\u003eSubclasses of {@link Provider} are not considered transparent in order to allow users to\n   * bind those subclasses directly, enabling them to inject the providers themselves.\n   */"
				},
				{
					"signature": "private static void bindField(Binder binder, final BoundFieldInfo fieldInfo)",
					"documentation": ""
				},
				{
					"signature": "private static Object getFieldValue(final BoundFieldInfo fieldInfo)",
					"documentation": "/**\n   * Returns the field value to bind, throwing for non-{@code @Nullable} fields with null values,\n   * and for null \"transparent providers\".\n   */"
				},
				{
					"signature": "@Override\n  public void configure(Binder binder)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.KotlinSupport",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.Nullability",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.spi.Message",
				"com.google.inject.util.Providers",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.WithPermits",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldException",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.NullBoundFieldValueException",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModule.WithPermits",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldException",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.NullBoundFieldValueException",
				"com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo"
			]
		},
		{
			"documentation": "/**\n   * Wrapper of BoundFieldModule which enables attaching {@code @RestrictedBindingSource} permits to\n   * instances of it.\n   *\n   * \u003cp\u003eTo create an instance of BoundFieldModule with permits (to enable it to bind restricted\n   * bindings), create an instance of an anonymous class extending this one and annotate it with\n   * those permits. For example: {@code new @Permit1 @Permit2 BoundFieldModule.WithPermits(instance)\n   * {}}.\n   *\n   * @since 5.0\n   */",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModule.WithPermits",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "protected WithPermits(Object instance)",
					"documentation": "/**\n   * Wrapper of BoundFieldModule which enables attaching {@code @RestrictedBindingSource} permits to\n   * instances of it.\n   *\n   * \u003cp\u003eTo create an instance of BoundFieldModule with permits (to enable it to bind restricted\n   * bindings), create an instance of an anonymous class extending this one and annotate it with\n   * those permits. For example: {@code new @Permit1 @Permit2 BoundFieldModule.WithPermits(instance)\n   * {}}.\n   *\n   * @since 5.0\n   */"
				},
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "private static boolean hasPermitAnnotation(Annotation[] annotations)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldException",
			"extends": "Exception",
			"Methods": [
				{
					"signature": "BoundFieldException(Message message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModule.NullBoundFieldValueException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "NullBoundFieldValueException(Message message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Information about a field bound by {@link BoundFieldModule}. */",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModule.BoundFieldInfo",
			"extends": "",
			"Methods": [
				{
					"signature": "private BoundFieldInfo(\n        Object instance, Field field, Bind bindAnnotation, TypeLiteral\u003c?\u003e fieldType)\n        throws BoundFieldException",
					"documentation": "/** @see #getBoundKey */"
				},
				{
					"signature": "private void checkBindingIsAssignable(Field field, Optional\u003cTypeLiteral\u003c?\u003e\u003e naturalType)\n        throws BoundFieldException",
					"documentation": ""
				},
				{
					"signature": "public Field getField()",
					"documentation": "/** The field itself. */"
				},
				{
					"signature": "public TypeLiteral\u003c?\u003e getFieldType()",
					"documentation": "/**\n     * The actual type of the field.\n     *\n     * \u003cp\u003eFor example, {@code @Bind(to = Object.class) Number one = new Integer(1);} will be {@code\n     * Number}. {@code @Bind Provider\u003cNumber\u003e} will be {@code Provider\u003cNumber\u003e}.\n     */"
				},
				{
					"signature": "public Bind getBindAnnotation()",
					"documentation": "/**\n     * The {@literal @}{@link Bind} annotation which is present on the field.\n     *\n     * \u003cp\u003eNote this is not the same as the binding annotation (or qualifier) for {@link\n     * #getBoundKey()}\n     */"
				},
				{
					"signature": "public Key\u003c?\u003e getBoundKey()",
					"documentation": "/**\n     * The key this field will bind to.\n     *\n     * \u003cul\u003e\n     *   \u003cli\u003e{@code @Bind(to = Object.class) @MyQualifier Number one = new Integer(1);} will be\n     *       {@code @MyQualifier Object}.\n     *   \u003cli\u003e{@code @Bind @MyQualifier(2) Number one = new Integer(1);} will be\n     *       {@code @MyQualifier(2) Number}.\n     *   \u003cli\u003e{@code @Bind @MyQualifier Provider\u003cString\u003e three = \"default\"} will be\n     *       {@code @MyQualfier String}\n     * \u003c/ul\u003e\n     */"
				},
				{
					"signature": "public Object getValue()",
					"documentation": "/** Returns the current value of this field. */"
				},
				{
					"signature": "private Annotation computeBindingAnnotation() throws BoundFieldException",
					"documentation": ""
				},
				{
					"signature": "private Key\u003c?\u003e computeKey(Optional\u003cTypeLiteral\u003c?\u003e\u003e naturalType, Annotation bindingAnnotation)\n        throws BoundFieldException",
					"documentation": ""
				},
				{
					"signature": "private TypeLiteral\u003c?\u003e computeBoundType(Optional\u003cTypeLiteral\u003c?\u003e\u003e naturalType)\n        throws BoundFieldException",
					"documentation": ""
				},
				{
					"signature": "private Optional\u003cTypeLiteral\u003c?\u003e\u003e computeNaturalFieldType()",
					"documentation": "/**\n     * Retrieves the type this field binds to naturally.\n     *\n     * \u003cp\u003eA field's \"natural\" type specifically ignores the to() method on the @Bind annotation, is\n     * the parameterized type if the field's actual type is a parameterized {@link Provider}, is\n     * {@link Optional#absent()} if this field is a non-parameterized {@link Provider} and otherwise\n     * is the field's actual type.\n     *\n     * @return the type this field binds to naturally, or {@link Optional#absent()} if this field is\n     *     a non-parameterized {@link Provider}.\n     */"
				},
				{
					"signature": "private boolean allowsNull()",
					"documentation": "/** Returns whether a binding supports null values. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.KotlinSupport",
				"com.google.inject.internal.MoreTypes",
				"com.google.inject.internal.Nullability",
				"com.google.inject.spi.InjectionPoint",
				"com.google.inject.spi.Message"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModule"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Truth {@link Subject} for use with {@link CheckedProvider} classes.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.throwingproviders.CheckedProviderSubject",
			"extends": "com.google.common.truth.Subject",
			"Methods": [
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003cT\u003e\u003e\n      Subject.Factory\u003cCheckedProviderSubject\u003cT, P\u003e, P\u003e checkedProviders()",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003cT\u003e\u003e CheckedProviderSubject\u003cT, P\u003e assertThat(\n      @Nullable P provider)",
					"documentation": ""
				},
				{
					"signature": "private CheckedProviderSubject(FailureMetadata failureMetadata, @Nullable P subject)",
					"documentation": ""
				},
				{
					"signature": "public Subject providedValue()",
					"documentation": "/**\n   * Allows for assertions on the value provided by this provider.\n   *\n   * \u003cp\u003eThe value provided by a checked provider is the object returned by a call to {@link\n   * CheckedProvider#get}\n   *\n   * @return a {@link Subject} for asserting against the return value of {@link CheckedProvider#get}\n   */"
				},
				{
					"signature": "public ThrowableSubject thrownException()",
					"documentation": "/**\n   * Allows for assertions on the exception thrown by this provider.\n   *\n   * \u003cp\u003eThe exception thrown by a checked provider is the {@link Throwable} thrown by a call to\n   * {@link CheckedProvider#get}\n   *\n   * @return a {@link ThrowableSubject} for asserting against the {@link Throwable} thrown by {@link\n   *     CheckedProvider#get}\n   */"
				},
				{
					"signature": "private void failWithCauseAndMessage(Throwable cause, String message)",
					"documentation": ""
				},
				{
					"signature": "private static Factory\u003cUnexpectedFailureSubject, Throwable\u003e unexpectedFailures()",
					"documentation": ""
				},
				{
					"signature": "@Override\n      public UnexpectedFailureSubject createSubject(FailureMetadata metadata, Throwable actual)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject.CheckedProviderSubjectFactory",
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject.UnexpectedFailureSubject"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject.CheckedProviderSubjectFactory",
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject.UnexpectedFailureSubject"
			]
		},
		{
			"documentation": "/**\n * Truth {@link Subject} for use with {@link CheckedProvider} classes.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.throwingproviders.CheckedProviderSubject.CheckedProviderSubjectFactory",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public CheckedProviderSubject\u003cT, P\u003e createSubject(\n        FailureMetadata failureMetadata, @Nullable P target)",
					"documentation": "/**\n * Truth {@link Subject} for use with {@link CheckedProvider} classes.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */"
				}
			],
			"interfaces": [
				"com.google.common.truth.Subject.Factory"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.throwingproviders.CheckedProviderSubject.UnexpectedFailureSubject",
			"extends": "com.google.common.truth.Subject",
			"Methods": [
				{
					"signature": "UnexpectedFailureSubject(FailureMetadata metadata, @Nullable Throwable actual)",
					"documentation": ""
				},
				{
					"signature": "void doFail(String message)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Unit tests for {@link BoundFieldModule}. */",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testBindingNothing()",
					"documentation": "/** Unit tests for {@link BoundFieldModule}. */"
				},
				{
					"signature": "public void testBindingOnePrivate()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingOnePublic()",
					"documentation": ""
				},
				{
					"signature": "public void testSuperTypeBinding()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingTwo()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingSuperType()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingSuperTypeAccessSubType()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingIncorrectTypeProviderFails()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingPrimitive()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingPrimitiveToBoxed()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithBindingAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithQualifier()",
					"documentation": ""
				},
				{
					"signature": "public void testCanReuseBindingAnnotationsWithDifferentValues()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithValuedBindingAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingWithGenerics()",
					"documentation": ""
				},
				{
					"signature": "public void testBoundValueDoesntChange()",
					"documentation": ""
				},
				{
					"signature": "public void testIncompatibleBindingType()",
					"documentation": ""
				},
				{
					"signature": "public void testIncompatiblePrimitiveBindingType()",
					"documentation": ""
				},
				{
					"signature": "public void testFailureOnMultipleBindingAnnotations()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingSuperTypeAndBindingAnnotation()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingJavaxProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingNonNullableNullField()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingNullableNullField()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingNullProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingNullableNullProvider()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderSubclassesBindToTheProviderItself()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderSubclassesDoNotBindParameterizedType()",
					"documentation": ""
				},
				{
					"signature": "public void testNullableProviderSubclassesAllowNull()",
					"documentation": ""
				},
				{
					"signature": "public void testBindParameterizedTypeFails()",
					"documentation": ""
				},
				{
					"signature": "public void testBindSubclassOfParameterizedTypeSucceeds()",
					"documentation": ""
				},
				{
					"signature": "public void testBindArray()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testRawProviderCannotBeBound()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Object get()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testExplicitlyBoundRawProviderCanBeBound()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Object get()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  public void testRawProviderCanBindToIncorrectType()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Object get()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleBindErrorsAreAggregated()",
					"documentation": ""
				},
				{
					"signature": "public void testMultipleNullValueErrorsAreAggregated()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingProviderWithProviderSubclassValue()",
					"documentation": ""
				},
				{
					"signature": "public void testBoundFieldsCannotBeInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testIncrementingProvider()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderDoesNotProvideDuringInjectorConstruction()",
					"documentation": ""
				},
				{
					"signature": "@Override\n                public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testIncompatibleBindingTypeStackTraceHasUserFrame()",
					"documentation": ""
				},
				{
					"signature": "public void testBoundProvidersAreInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testBoundInstancesAreInjected()",
					"documentation": ""
				},
				{
					"signature": "public void testClassIsPrintedInErrorsWhenCauseIsSuperclass()",
					"documentation": ""
				},
				{
					"signature": "public void testFieldsAreBoundFromFullClassHierarchy()",
					"documentation": ""
				},
				{
					"signature": "public void testFieldBound_lazy()",
					"documentation": ""
				},
				{
					"signature": "public void testNonNullableFieldBound_lazy_rejectNull()",
					"documentation": ""
				},
				{
					"signature": "public void testNullableFieldBound_lazy_allowNull()",
					"documentation": ""
				},
				{
					"signature": "public void testFieldBoundAsProvider_lazy()",
					"documentation": ""
				},
				{
					"signature": "@Override\n          public Integer get()",
					"documentation": ""
				},
				{
					"signature": "public void testFieldBoundAsNonTransparentProvider_lazy()",
					"documentation": ""
				},
				{
					"signature": "public void testGetBoundFields_getValue()",
					"documentation": ""
				},
				{
					"signature": "public void testGetBoundFields_getField() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetBoundFields_getKey() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testGetBoundFields_getBindAnnotation() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBoundFieldModuleWithPermits()",
					"documentation": ""
				},
				{
					"signature": "public void testSourceSetOnBinding() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Key",
				"com.google.inject.Provider",
				"com.google.inject.RestrictedBindingSource",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.util.Providers",
				"com.google.inject.Asserts",
				"com.google.inject.testing.fieldbinder.Bind",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass",
				"com.google.inject.testing.fieldbinder.Nullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.IntegerProvider",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.ParameterizedObject",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InjectedNumberProvider",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableSubclass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass2",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyProviderClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider",
				"com.google.inject.testing.fieldbinder.Bindings"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.SomeBindingAnnotation",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.SomeQualifier",
				"com.google.inject.testing.fieldbinder.Nullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.TypeUse",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.IntegerProvider",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.ParameterizedObject",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InjectedNumberProvider",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableSubclass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass2",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyProviderClass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider",
				"com.google.inject.testing.fieldbinder.Foo",
				"com.google.inject.testing.fieldbinder.Bindings"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableClass",
			"extends": "",
			"Methods": [
				{
					"signature": "FieldBindableClass(Integer anInt)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass2"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass",
			"extends": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableClass",
			"Methods": [
				{
					"signature": "FieldBindableSubclass(Integer anInt)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.SomeBindingAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.SomeQualifier",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.TypeUse",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.testing.fieldbinder.Nullable"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.Nullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.IntegerProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "IntegerProvider(Integer value)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public Integer get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.ParameterizedObject",
			"extends": "",
			"Methods": [
				{
					"signature": "ParameterizedObject(T instance)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableSubclass"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.fieldbinder.Bind"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InjectedNumberProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public Number get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableSubclass",
			"extends": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.InvalidBindableClass",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableSubclass2",
			"extends": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.FieldBindableClass",
			"Methods": [
				{
					"signature": "FieldBindableSubclass2(Integer anInt, Number aNumber)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.fieldbinder.Bind"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyClassNullable",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.fieldbinder.Bind",
				"com.google.inject.testing.fieldbinder.Nullable"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyProviderClass",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.util.Providers",
				"com.google.inject.testing.fieldbinder.Bind"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.BoundFieldModuleTest.LazyNonTransparentProvider",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.fieldbinder.Bind",
				"com.google.inject.testing.fieldbinder.Nullable"
			],
			"usedBy": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.RestrictedBindingSource"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.fieldbinder.Bindings",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.testing.fieldbinder.BoundFieldModuleTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Test annotation used to test restricted binding source feature in Kotlin. */",
			"name": "com.google.inject.testing.fieldbinder.TestPermit",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Unit tests for {@link CheckedProviderSubject}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void providedValue_gotExpected_expectSuccess()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void providedValue_gotUnexpected_expectFailure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void providedValue_throws_expectFailure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void thrownException_threwExpected_expectSuccess()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void thrownException_threwUnexpected_expectFailure()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void thrownException_gets_expectFailure()",
					"documentation": ""
				},
				{
					"signature": "private SimpleSubjectBuilder\u003c\n          CheckedProviderSubject\u003cString, CheckedProvider\u003cString\u003e\u003e, CheckedProvider\u003cString\u003e\u003e\n      expectWhenTesting()",
					"documentation": ""
				},
				{
					"signature": "private String getReturningProviderName(String providing)",
					"documentation": ""
				},
				{
					"signature": "private String getThrowingProviderName(String throwing)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubject",
				"com.google.inject.throwingproviders.CheckedProviders"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.testing.throwingproviders.StringCheckedProvider",
				"com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest.SummerException"
			]
		},
		{
			"documentation": "/**\n * Unit tests for {@link CheckedProviderSubject}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.testing.throwingproviders.StringCheckedProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest.SummerException",
			"extends": "RuntimeException",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Utilities for the throwing provider module.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProvideUtils",
			"extends": "",
			"Methods": [
				{
					"signature": "private CheckedProvideUtils()",
					"documentation": "/**\n * Utilities for the throwing provider module.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n  static \u003cT\u003e Constructor\u003c? extends T\u003e findThrowingConstructor(\n      TypeLiteral\u003c? extends T\u003e typeLiteral, Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"rawtypes\") \n  static void validateExceptions(\n      Binder binder,\n      Iterable\u003cTypeLiteral\u003c?\u003e\u003e actualExceptionTypes,\n      Iterable\u003cClass\u003c? extends Throwable\u003e\u003e expectedExceptionTypes,\n      Class\u003c? extends CheckedProvider\u003e checkedProvider)",
					"documentation": "/** Adds errors to the binder if the exceptions aren't valid. */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.Errors"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Alternative to the Guice {@link com.google.inject.Provider} that throws a checked Exception.\n * Users may not inject {@code T} directly.\n *\n * \u003cp\u003eThis interface must be extended to use application-specific exception types. Such\n * subinterfaces may not define new methods, but may narrow the exception type.\n *\n * \u003cpre\u003e\n * public interface RemoteProvider\u0026lt;T\u0026gt; extends CheckedProvider\u0026lt;T\u0026gt; {\n *   T get() throws CustomExceptionOne, CustomExceptionTwo;\n * }\n * \u003c/pre\u003e\n *\n * \u003cp\u003eWhen this type is bound using {@link ThrowingProviderBinder}, the value returned or exception\n * thrown by {@link #get} will be scoped. As a consequence, {@link #get} will invoked at most once\n * within each scope.\n *\n * @since 3.0\n */",
			"name": "com.google.inject.throwingproviders.CheckedProvider",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.ThrowingProvider",
				"com.google.inject.throwingproviders.RpcProvider",
				"com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
				"com.google.inject.throwingproviders.RemoteProvider",
				"com.google.inject.throwingproviders.StringRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.TooManyTypeParameters",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongThrowingProviderType",
				"com.google.inject.throwingproviders.CheckedProviderTest.OneNoneGetMethod",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyMethods",
				"com.google.inject.throwingproviders.CheckedProvidersTest.StringCheckedProvider",
				"com.google.inject.throwingproviders.FooCheckedProvider",
				"com.google.inject.throwingproviders.MoreMethodsCheckedProvider"
			],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethod"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A provider that invokes a method and returns its result.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviderMethod",
			"extends": "",
			"Methods": [
				{
					"signature": "CheckedProviderMethod(\n      Key\u003cT\u003e key,\n      Method method,\n      Object instance,\n      ImmutableSet\u003cDependency\u003c?\u003e\u003e dependencies,\n      List\u003cProvider\u003c?\u003e\u003e parameterProviders,\n      Class\u003c? extends Annotation\u003e scopeAnnotation,\n      Class\u003c? extends CheckedProvider\u003e checkedProvider,\n      List\u003cTypeLiteral\u003c?\u003e\u003e exceptionTypes,\n      boolean scopeExceptions)",
					"documentation": "/**\n * A provider that invokes a method and returns its result.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "void configure(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public T get() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.CheckedProvider",
				"com.google.inject.spi.HasDependencies"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.internal.util.StackTraceElements"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Creates bindings to methods annotated with {@literal @}{@link CheckedProvides}. Use the scope and\n * binding annotations on the provider method to configure the binding.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviderMethodsModule",
			"extends": "",
			"Methods": [
				{
					"signature": "private CheckedProviderMethodsModule(Object delegate)",
					"documentation": "/**\n * Creates bindings to methods annotated with {@literal @}{@link CheckedProvides}. Use the scope and\n * binding annotations on the provider method to configure the binding.\n *\n * @author sameb@google.com (Sam Berlin)\n */"
				},
				{
					"signature": "static Module forModule(Module module)",
					"documentation": "/** Returns a module which creates bindings for provider methods from the given module. */"
				},
				{
					"signature": "List\u003cCheckedProviderMethod\u003c?\u003e\u003e getProviderMethods(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e CheckedProviderMethod\u003cT\u003e createProviderMethod(\n      Binder binder, final Method method, CheckedProvides checkedProvides)",
					"documentation": ""
				},
				{
					"signature": "\u003cT\u003e Key\u003cT\u003e getKey(Errors errors, TypeLiteral\u003cT\u003e type, Member member, Annotation[] annotations)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public boolean equals(Object o)",
					"documentation": ""
				},
				{
					"signature": "@Override\n  public int hashCode()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Module"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.Annotations",
				"com.google.inject.internal.Errors",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule.LogProvider"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule.LogProvider"
			]
		},
		{
			"documentation": "/** A provider that returns a logger based on the method name. */",
			"name": "com.google.inject.throwingproviders.CheckedProviderMethodsModule.LogProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public LogProvider(Method method)",
					"documentation": "/** A provider that returns a logger based on the method name. */"
				},
				{
					"signature": "@Override\n    public Logger get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Provider"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A checked provider with dependencies, so {@link HasDependencies} can be implemented when using\n * the {@link SecondaryBinder#using} methods.\n *\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviderWithDependencies",
			"extends": "CheckedProvider,",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Static utility methods for creating and working with instances of {@link CheckedProvider}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n * @since 4.2\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviders",
			"extends": "",
			"Methods": [
				{
					"signature": "private CheckedProviders()",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P generateProvider(\n      Class\u003cP\u003e providerType, Optional\u003cT\u003e value, InvocationHandler handler)",
					"documentation": ""
				},
				{
					"signature": "private static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P generateProvider(\n      TypeLiteral\u003cP\u003e providerType, Optional\u003cT\u003e value, InvocationHandler handler)",
					"documentation": ""
				},
				{
					"signature": "private static Optional\u003cClass\u003c?\u003e\u003e getClassOptional(Optional\u003c?\u003e value)",
					"documentation": ""
				},
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P of(\n      TypeLiteral\u003cP\u003e providerType, @Nullable T instance)",
					"documentation": "/**\n   * Returns a {@link CheckedProvider} which always provides {@code instance}.\n   *\n   * \u003cp\u003eThe provider type passed as {@code providerType} must be an interface. Calls to methods\n   * other than {@link CheckedProvider#get} will throw {@link UnsupportedOperationException}.\n   *\n   * @param providerType the type of the {@link CheckedProvider} to return\n   * @param instance the instance that should always be provided\n   */"
				},
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P of(\n      Class\u003cP\u003e providerType, @Nullable T instance)",
					"documentation": "/**\n   * Returns a {@link CheckedProvider} which always provides {@code instance}.\n   *\n   * @param providerType the type of the {@link CheckedProvider} to return\n   * @param instance the instance that should always be provided\n   * @see #of(TypeLiteral, T)\n   */"
				},
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P throwing(\n      TypeLiteral\u003cP\u003e providerType, Class\u003c? extends Throwable\u003e throwable)",
					"documentation": "/**\n   * Returns a {@link CheckedProvider} which always throws exceptions.\n   *\n   * \u003cp\u003eThis method uses the nullary (no argument) constructor of {@code throwable} to create a new\n   * instance of the given {@link Throwable} on each method invocation which is then thrown\n   * immediately.\n   *\n   * \u003cp\u003eSee {@link #of(TypeLiteral, T)} for more information.\n   *\n   * @param providerType the type of the {@link CheckedProvider} to return\n   * @param throwable the type of the {@link Throwable} to throw\n   * @see #of(TypeLiteral, T)\n   */"
				},
				{
					"signature": "public static \u003cT, P extends CheckedProvider\u003c? super T\u003e\u003e P throwing(\n      Class\u003cP\u003e providerType, Class\u003c? extends Throwable\u003e throwable)",
					"documentation": "/**\n   * Returns a {@link CheckedProvider} which always throws exceptions.\n   *\n   * @param providerType the type of the {@link CheckedProvider} to return\n   * @param throwable the type of the {@link Throwable} to throw\n   * @see #throwing(TypeLiteral, Class)\n   */"
				},
				{
					"signature": "private static boolean isCheckedException(Class\u003c? extends Throwable\u003e thrownType)",
					"documentation": ""
				},
				{
					"signature": "private static void checkThrowable(\n      Class\u003c? extends CheckedProvider\u003c?\u003e\u003e providerType, Class\u003c? extends Throwable\u003e thrownType)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.testing.throwingproviders.CheckedProviderSubjectTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.CheckedProviders.ReturningHandler",
				"com.google.inject.throwingproviders.CheckedProviders.ThrowingHandler",
				"com.google.inject.throwingproviders.ProviderChecker"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.CheckedProviders.CheckedProviderInvocationHandler",
				"com.google.inject.throwingproviders.CheckedProviders.ReturningHandler",
				"com.google.inject.throwingproviders.CheckedProviders.ThrowingHandler"
			]
		},
		{
			"documentation": "/**\n * Static utility methods for creating and working with instances of {@link CheckedProvider}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n * @since 4.2\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviders.CheckedProviderInvocationHandler",
			"extends": "",
			"Methods": [
				{
					"signature": "private boolean isGetMethod(Method method)",
					"documentation": "/**\n * Static utility methods for creating and working with instances of {@link CheckedProvider}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n * @since 4.2\n */"
				},
				{
					"signature": "@Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.lang.reflect.InvocationHandler"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.CheckedProviders.ReturningHandler",
				"com.google.inject.throwingproviders.CheckedProviders.ThrowingHandler"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviders.ReturningHandler",
			"extends": "com.google.inject.throwingproviders.CheckedProviders.CheckedProviderInvocationHandler",
			"Methods": [
				{
					"signature": "ReturningHandler(T returned)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected T invokeGet(Object proxy, Method method) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviders"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviders.ThrowingHandler",
			"extends": "com.google.inject.throwingproviders.CheckedProviders.CheckedProviderInvocationHandler",
			"Methods": [
				{
					"signature": "private ThrowingHandler(Constructor\u003c? extends Throwable\u003e throwableCtor, String typeName)",
					"documentation": ""
				},
				{
					"signature": "static ThrowingHandler forClass(Class\u003c? extends Throwable\u003e throwable)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    protected Object invokeGet(Object proxy, Method method) throws Throwable",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviders"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Annotates methods of a {@link com.google.inject.Module} to create a {@link CheckedProvider}\n * method binding that can throw exceptions. The method's return type is bound to a {@link\n * CheckedProvider} that can be injected. Guice will pass dependencies to the method as parameters.\n * Install {@literal @}CheckedProvides methods by using {@link\n * ThrowingProviderBinder#forModule(com.google.inject.Module)} on the module where the methods are\n * declared.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 3.0\n */",
			"name": "com.google.inject.throwingproviders.CheckedProvides",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestModule",
				"com.google.inject.throwingproviders.TestPrivateModule",
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/** Helper methods to verify the correctness of CheckedProvider interfaces. */",
			"name": "com.google.inject.throwingproviders.ProviderChecker",
			"extends": "",
			"Methods": [
				{
					"signature": "private ProviderChecker()",
					"documentation": "/** Helper methods to verify the correctness of CheckedProvider interfaces. */"
				},
				{
					"signature": "static \u003cP extends CheckedProvider\u003c?\u003e\u003e void checkInterface(\n      Class\u003cP\u003e interfaceType, Optional\u003c? extends Type\u003e valueType)",
					"documentation": ""
				},
				{
					"signature": "private static void checkArgument(boolean condition, String messageFormat, Object... args)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ProviderChecker.NotSyntheticOrBridgePredicate"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviders"
			],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.throwingproviders.ProviderChecker.NotSyntheticOrBridgePredicate"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ProviderChecker.NotSyntheticOrBridgePredicate",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n    public boolean apply(Method input)",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.common.base.Predicate"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.ProviderChecker"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A version of {@literal @}{@link Inject} designed for ThrowingProviders. Use by:\n *\n * \u003cpre\u003e\u003ccode\u003eThrowingProviderBinder.create(binder())\n *    .bind(RemoteProvider.class, Customer.class)\n *    .providing(CustomerImpl.class);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * where CustomerImpl has a constructor annotated with ThrowingInject.\n *\n * @author sameb@google.com (Sam Berlin)\n * @since 4.0\n */",
			"name": "com.google.inject.throwingproviders.ThrowingInject",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.AnotherMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ThrowingArrayList",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SuperclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.RuntimeExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ProvisionExceptionFoo"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Alternative to the Guice {@link com.google.inject.Provider} that throws a checked Exception.\n * Users may not inject {@code T} directly.\n *\n * \u003cp\u003eThis interface must be extended to use application-specific exception types. Such\n * subinterfaces may not define new methods:\n *\n * \u003cpre\u003e\n * public interface RemoteProvider\u0026lt;T\u0026gt; extends ThrowingProvider\u0026lt;T, RemoteException\u0026gt; { }\n * \u003c/pre\u003e\n *\n * \u003cp\u003eWhen this type is bound using {@link ThrowingProviderBinder}, the value returned or exception\n * thrown by {@link #get} will be scoped. As a consequence, {@link #get} will invoked at most once\n * within each scope.\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @deprecated use {@link CheckedProvider} instead.\n */",
			"name": "com.google.inject.throwingproviders.ThrowingProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
				"com.google.inject.throwingproviders.RemoteProvider",
				"com.google.inject.throwingproviders.StringRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.TooManyTypeParameters",
				"com.google.inject.throwingproviders.ThrowingProviderTest.WrongThrowingProviderType",
				"com.google.inject.throwingproviders.ThrowingProviderTest.OneNoneGetMethod",
				"com.google.inject.throwingproviders.ThrowingProviderTest.ManyMethods"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Builds a binding for a {@link CheckedProvider}.\n *\n * \u003cp\u003eYou can use a fluent API and custom providers:\n *\n * \u003cpre\u003e\u003ccode\u003eThrowingProviderBinder.create(binder())\n *    .bind(RemoteProvider.class, Customer.class)\n *    .to(RemoteCustomerProvider.class)\n *    .in(RequestScope.class);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * or, you can use throwing provider methods:\n *\n * \u003cpre\u003e\u003ccode\u003eclass MyModule extends AbstractModule {\n *   configure() {\n *     install(ThrowingProviderBinder.forModule(this));\n *   }\n *\n *   {@literal @}CheckedProvides(RemoteProvider.class)\n *   {@literal @}RequestScope\n *   Customer provideCustomer(FlakyCustomerCreator creator) throws RemoteException {\n *     return creator.getCustomerOrThrow();\n *   }\n * }\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * You also can declare that a CheckedProvider construct a particular class whose constructor throws\n * an exception:\n *\n * \u003cpre\u003e\u003ccode\u003eThrowingProviderBinder.create(binder())\n *    .bind(RemoteProvider.class, Customer.class)\n *    .providing(CustomerImpl.class)\n *    .in(RequestScope.class);\n * \u003c/code\u003e\u003c/pre\u003e\n *\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.ThrowingProviderBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "private ThrowingProviderBinder(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public static ThrowingProviderBinder create(Binder binder)",
					"documentation": ""
				},
				{
					"signature": "public static Module forModule(Module module)",
					"documentation": "/**\n   * Returns a module that installs {@literal @}{@link CheckedProvides} methods.\n   *\n   * @since 3.0\n   */"
				},
				{
					"signature": "@Deprecated\n  public \u003cP extends CheckedProvider\u003e SecondaryBinder\u003cP, ?\u003e bind(\n      Class\u003cP\u003e interfaceType, Type clazz)",
					"documentation": "/** @deprecated Use {@link #bind(Class, Class)} or {@link #bind(Class, TypeLiteral)} instead. */"
				},
				{
					"signature": "public \u003cP extends CheckedProvider, T\u003e SecondaryBinder\u003cP, T\u003e bind(\n      Class\u003cP\u003e interfaceType, Class\u003cT\u003e clazz)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "public \u003cP extends CheckedProvider, T\u003e SecondaryBinder\u003cP, T\u003e bind(\n      Class\u003cP\u003e interfaceType, TypeLiteral\u003cT\u003e typeLiteral)",
					"documentation": "/** @since 4.0 */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.spi.ProviderWithDependencies",
				"com.google.inject.util.Types",
				"com.google.inject.throwingproviders.SecondaryBinder",
				"com.google.inject.throwingproviders.ThrowingProviderBinder.Result",
				"com.google.inject.throwingproviders.ThrowingProviderBinder.ResultException"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.SecondaryBinder",
				"com.google.inject.throwingproviders.ThrowingProviderBinder.Result",
				"com.google.inject.throwingproviders.ThrowingProviderBinder.ResultException"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.SecondaryBinder",
			"extends": "",
			"Methods": [
				{
					"signature": "public SecondaryBinder(Class\u003cP\u003e interfaceType, Type valueType)",
					"documentation": ""
				},
				{
					"signature": "List\u003cClass\u003c? extends Throwable\u003e\u003e getExceptionTypes()",
					"documentation": ""
				},
				{
					"signature": "Key\u003cP\u003e getKey()",
					"documentation": ""
				},
				{
					"signature": "public SecondaryBinder\u003cP, T\u003e annotatedWith(Class\u003c? extends Annotation\u003e annotationType)",
					"documentation": ""
				},
				{
					"signature": "public SecondaryBinder\u003cP, T\u003e annotatedWith(Annotation annotation)",
					"documentation": ""
				},
				{
					"signature": "public SecondaryBinder\u003cP, T\u003e scopeExceptions(boolean scopeExceptions)",
					"documentation": "/**\n     * Determines if exceptions should be scoped. By default exceptions are scoped.\n     *\n     * @param scopeExceptions whether exceptions should be scoped.\n     * @since 4.0\n     */"
				},
				{
					"signature": "public ScopedBindingBuilder to(P target)",
					"documentation": ""
				},
				{
					"signature": "public ScopedBindingBuilder to(Class\u003c? extends P\u003e targetType)",
					"documentation": ""
				},
				{
					"signature": "public ScopedBindingBuilder providing(Class\u003c? extends T\u003e cxtorClass)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n    public ScopedBindingBuilder providing(TypeLiteral\u003c? extends T\u003e cxtorLiteral)",
					"documentation": "/** @since 4.0 */"
				},
				{
					"signature": "@Override\n            public T get() throws Exception",
					"documentation": ""
				},
				{
					"signature": "@Override\n            public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "ScopedBindingBuilder toProviderMethod(CheckedProviderMethod\u003c?\u003e target)",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"unchecked\") \n    public ScopedBindingBuilder to(Key\u003c? extends P\u003e targetKey)",
					"documentation": ""
				},
				{
					"signature": "private ScopedBindingBuilder toInternal(final Key\u003c? extends CheckedProvider\u003c?\u003e\u003e targetKey)",
					"documentation": ""
				},
				{
					"signature": "private ProviderWithDependencies\u003cResult\u003e createResultProvider(\n        final Key\u003c? extends CheckedProvider\u003c?\u003e\u003e targetKey,\n        final Provider\u003c? extends CheckedProvider\u003c?\u003e\u003e targetProvider)",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Result get()",
					"documentation": ""
				},
				{
					"signature": "@Override\n        public Set\u003cDependency\u003c?\u003e\u003e getDependencies()",
					"documentation": ""
				},
				{
					"signature": "private List\u003cClass\u003c? extends Throwable\u003e\u003e getExceptionType(Class\u003cP\u003e interfaceType)",
					"documentation": "/**\n     * Returns the exception type declared to be thrown by the get method of {@code interfaceType}.\n     */"
				},
				{
					"signature": "private boolean checkInterface()",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings({\"unchecked\"})\n    private Key\u003cP\u003e createKey()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.UniqueAnnotations",
				"com.google.inject.spi.ProviderWithDependencies",
				"com.google.inject.util.Types"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderBinder"
			],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * Represents the returned value from a call to {@link CheckedProvider#get()}. This is the value\n   * that will be scoped by Guice.\n   */",
			"name": "com.google.inject.throwingproviders.ThrowingProviderBinder.Result",
			"extends": "",
			"Methods": [
				{
					"signature": "private Result(Object value, Exception exception)",
					"documentation": "/**\n   * Represents the returned value from a call to {@link CheckedProvider#get()}. This is the value\n   * that will be scoped by Guice.\n   */"
				},
				{
					"signature": "public static Result forValue(Object value)",
					"documentation": ""
				},
				{
					"signature": "public static Result forException(Exception e)",
					"documentation": ""
				},
				{
					"signature": "public Object getOrThrow() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.io.Serializable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n   * RuntimeException class to wrap exceptions from the checked provider. The regular guice provider\n   * can throw it and the checked provider proxy extracts the underlying exception and rethrows it.\n   */",
			"name": "com.google.inject.throwingproviders.ThrowingProviderBinder.ResultException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "ResultException(Exception cause)",
					"documentation": "/**\n   * RuntimeException class to wrap exceptions from the checked provider. The regular guice provider\n   * can throw it and the checked provider proxy extracts the underlying exception and rethrows it.\n   */"
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderBinder"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Test methods for {@link CheckedProviderMethodsModule}. */",
			"name": "com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testNoAnnotationNoScope() throws BindException, RemoteException",
					"documentation": ""
				},
				{
					"signature": "public void testWithScope() throws BindException, RemoteException",
					"documentation": ""
				},
				{
					"signature": "public void testWithAnnotation() throws BindException, RemoteException",
					"documentation": ""
				},
				{
					"signature": "public void testWithInjectedParameters() throws BindException, RemoteException",
					"documentation": ""
				},
				{
					"signature": "public void testWithThrownException()",
					"documentation": ""
				},
				{
					"signature": "public void testExposedMethod() throws BindException, RemoteException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Exposed",
				"com.google.inject.Guice",
				"com.google.inject.Provides",
				"com.google.inject.TypeLiteral",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.throwingproviders.CheckedProvides",
				"com.google.inject.throwingproviders.TestAnnotation",
				"com.google.inject.throwingproviders.TestModule",
				"com.google.inject.throwingproviders.TestPrivateModule",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest.Pair"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.RpcProvider",
				"com.google.inject.throwingproviders.TestAnnotation",
				"com.google.inject.throwingproviders.TestModule",
				"com.google.inject.throwingproviders.TestPrivateModule",
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest.Pair"
			]
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.RpcProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.TestAnnotation",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest",
				"com.google.inject.throwingproviders.TestModule"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.TestModule",
			"extends": "com.google.inject.AbstractModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    String getSomeStringFromServer()",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    @TestScope.Scoped\n    int getSomeIntegerFromServer()",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    @TestAnnotation\n    long getSomeLongFromServer()",
					"documentation": ""
				},
				{
					"signature": "@Provides\n    double getSomeDouble()",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    Pair\u003cDouble, String\u003e getSomePair(Double input)",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    float getFloat() throws BindException",
					"documentation": ""
				},
				{
					"signature": "void setNextIntToReturn(int next)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provides",
				"com.google.inject.throwingproviders.CheckedProvides",
				"com.google.inject.throwingproviders.TestAnnotation"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.TestPrivateModule",
			"extends": "com.google.inject.PrivateModule",
			"Methods": [
				{
					"signature": "@Override\n    protected void configure()",
					"documentation": ""
				},
				{
					"signature": "@CheckedProvides(RpcProvider.class)\n    @Named(\"fruit\")\n    @Exposed\n    String provideApples()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Exposed",
				"com.google.inject.name.Named",
				"com.google.inject.throwingproviders.CheckedProvides"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest.Pair",
			"extends": "",
			"Methods": [
				{
					"signature": "Pair(A a, B b)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderMethodsModuleTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "@Override\n  protected void setUp() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsThrown_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsThrown_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsThrown_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsThrown(Injector injector) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testValuesScoped_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testValuesScoped_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testValuesScopedWhenNotExceptionScoping_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testValuesScopedWhenNotExceptionScoping_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tValuesScoped(Injector injector, Class\u003c? extends Annotation\u003e annotation)\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testValuesScoped_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsScoped_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsScoped_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionScopes_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsScoped(Injector injector) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsNotScopedWhenNotExceptionScoping_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionsNotScopedWhenNotExceptionScoping_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testExceptionNotScopedWhenNotExceptionScoping_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsNotScopedWhenNotExceptionScoping(Injector injector) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotations_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotations_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tAnnotations(\n      Injector injector, MockRemoteProvider\u003cFoo\u003e mockA, MockRemoteProvider\u003cFoo\u003e mockB)\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testAnnotations_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testUndeclaredExceptions_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testUndeclaredExceptions_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testUndeclaredExceptions_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "private void tUndeclaredExceptions(Injector injector) throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testThrowingProviderSubclassing() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToNonInterfaceType_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToNonInterfaceType_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToSubSubInterface_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToSubSubInterface_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithExtraMethod_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithExtraMethod_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_Bind()",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_Provides()",
					"documentation": ""
				},
				{
					"signature": "public void testDependencies_Cxtor()",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithBoundValueType_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithBoundValueType_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@SuppressWarnings(\"deprecation\")\n  public void testBindingToInterfaceWithGeneric_Bind() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithGeneric_BindUsingTypeLiteral() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithGeneric_Provides() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testBindingToInterfaceWithGeneric_Cxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodWithWrongException()",
					"documentation": ""
				},
				{
					"signature": "public void testCxtorWithWrongException()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodWithSubclassOfExceptionIsOk() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCxtorWithSubclassOfExceptionIsOk() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodWithSuperclassExceptionFails()",
					"documentation": ""
				},
				{
					"signature": "public void testCxtorWithSuperclassExceptionFails()",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodWithRuntimeExceptionsIsOk() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCxtorWithRuntimeExceptionsIsOk() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testProviderMethodWithManyExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testCxtorWithManyExceptions()",
					"documentation": ""
				},
				{
					"signature": "public void testMoreTypeParameters()",
					"documentation": ""
				},
				{
					"signature": "public void testWrongThrowingProviderType()",
					"documentation": ""
				},
				{
					"signature": "public void testOneMethodThatIsntGet()",
					"documentation": ""
				},
				{
					"signature": "public void testManyMethods()",
					"documentation": ""
				},
				{
					"signature": "public void testIncorrectPredefinedType_Bind()",
					"documentation": ""
				},
				{
					"signature": "public void testIncorrectPredefinedType_Provides()",
					"documentation": ""
				},
				{
					"signature": "public void testResultSerializes() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testResultExceptionSerializes() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testEarlyBindingError()",
					"documentation": ""
				},
				{
					"signature": "public void testNoInjectionPointForUsing()",
					"documentation": ""
				},
				{
					"signature": "public void testNoThrowingInject()",
					"documentation": ""
				},
				{
					"signature": "public void testProvisionExceptionOnDependenciesOfCxtor() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testUsingDoesntClashWithBindingsOfSameType() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.OutOfScopeException",
				"com.google.inject.Provider",
				"com.google.inject.Scope",
				"com.google.inject.ScopeAnnotation",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.util.Classes",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Dependency",
				"com.google.inject.Asserts",
				"com.google.inject.throwingproviders.CheckedProvides",
				"com.google.inject.throwingproviders.ThrowingInject",
				"com.google.inject.throwingproviders.ThrowingProviderBinder.Result",
				"com.google.inject.throwingproviders.NotExceptionScoping",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.SimpleFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ThrowingArrayList",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SuperclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.RuntimeExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.FailingProvider",
				"com.google.inject.throwingproviders.BadScope",
				"com.google.inject.throwingproviders.CheckedProviderTest.ProvisionExceptionFoo"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.NotExceptionScoping",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.SubRemoteProvider",
				"com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
				"com.google.inject.throwingproviders.RemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.Foo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SimpleFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.AnotherMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockRemoteProvider",
				"com.google.inject.throwingproviders.StringRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.ThrowingArrayList",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SuperclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.RuntimeExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubBindException",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.TooManyTypeParameters",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongThrowingProviderType",
				"com.google.inject.throwingproviders.CheckedProviderTest.OneNoneGetMethod",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyMethods",
				"com.google.inject.throwingproviders.CheckedProviderTest.FailingProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.InvalidFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.NormalInjectableFoo",
				"com.google.inject.throwingproviders.BadScope",
				"com.google.inject.throwingproviders.CheckedProviderTest.Unscoped1",
				"com.google.inject.throwingproviders.CheckedProviderTest.Unscoped2",
				"com.google.inject.throwingproviders.CheckedProviderTest.ProvisionExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockFoo"
			]
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n * @author sameb@google.com (Sam Berlin)\n */",
			"name": "com.google.inject.throwingproviders.NotExceptionScoping",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SubMockRemoteProvider",
			"extends": "com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.SubRemoteProvider",
			"extends": "com.google.inject.throwingproviders.RemoteProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.RemoteProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.SubRemoteProvider"
			],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    public DependentMockFoo(String foo, int bar)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void initialize(long foo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject",
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public DependentRemoteProvider(String foo, int bar)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void initialize(long foo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.RemoteProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.Foo",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SimpleFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.AnotherMockFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.WrongExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SubclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.SuperclassExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.RuntimeExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ManyExceptionFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.InvalidFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.NormalInjectableFoo",
				"com.google.inject.throwingproviders.CheckedProviderTest.ProvisionExceptionFoo"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SimpleFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "SimpleFoo(String s)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.MockFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    MockFoo() throws RemoteException, BindException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockFoo"
			],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.AnotherMockFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    AnotherMockFoo() throws RemoteException, BindException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String toString()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.MockRemoteProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public void throwOnNextGet(Exception nextToThrow)",
					"documentation": ""
				},
				{
					"signature": "public void setNextToReturn(T nextToReturn)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get() throws RemoteException, BindException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.RemoteProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.SubMockRemoteProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.StringRemoteProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest.FailingProvider"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.ThrowingArrayList",
			"extends": "java.util.ArrayList",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @ThrowingInject\n    ThrowingArrayList()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.WrongExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @ThrowingInject\n    public WrongExceptionFoo() throws InterruptedException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SubclassExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    public SubclassExceptionFoo() throws AccessException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SuperclassExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @ThrowingInject\n    public SuperclassExceptionFoo() throws IOException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.RuntimeExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    public RuntimeExceptionFoo() throws RuntimeException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SubBindException",
			"extends": "java.net.BindException",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.ManyExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    @ThrowingInject\n    public ManyExceptionFoo()\n        throws InterruptedException, RuntimeException, RemoteException, AccessException,\n            TooManyListenersException, BindException, SubBindException",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.TooManyTypeParameters",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.WrongThrowingProviderType",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.OneNoneGetMethod",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.ManyMethods",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.FailingProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@SuppressWarnings(\"unused\")\n    FailingProvider(Integer foo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String get()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.StringRemoteProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.InvalidFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "public InvalidFoo(String dep)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.NormalInjectableFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public NormalInjectableFoo()",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.BadScope",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.CheckedProviderTest.Unscoped1",
				"com.google.inject.throwingproviders.CheckedProviderTest.Unscoped2"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.Unscoped1",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.BadScope"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.Unscoped2",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.BadScope"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.ProvisionExceptionFoo",
			"extends": "",
			"Methods": [
				{
					"signature": "@ThrowingInject\n    public ProvisionExceptionFoo(Unscoped1 a, Unscoped2 b)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public String s()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.Foo"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.throwingproviders.ThrowingInject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProviderTest.SubMockFoo",
			"extends": "com.google.inject.throwingproviders.CheckedProviderTest.MockFoo",
			"Methods": [
				{
					"signature": "public SubMockFoo() throws RemoteException, BindException",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * Unit tests for {@link CheckedProviders}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest",
			"extends": "junit.framework.TestCase",
			"Methods": [
				{
					"signature": "public void testCheckedProviderClass_get_returnsValidString() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCheckedProviderTypeLiteral_get_returnsValidString() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCheckedProviderClassNull_get_returnsNull() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCheckedProviderTypeLiteralNull_get_returnsNull() throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testThrowingCheckedProviderClass_get_throwsException()",
					"documentation": ""
				},
				{
					"signature": "public void testThrowingCheckedProviderTypeLiteral_get_throwsException()",
					"documentation": ""
				},
				{
					"signature": "public void testUnsupportedMethods_otherMethod_throwsIllegalArgumentException()\n      throws NoSuchMethodException",
					"documentation": ""
				},
				{
					"signature": "public void testCheckThrowable_unsupportedThrowableConstructor_throwsIllegalArgumentException()",
					"documentation": ""
				},
				{
					"signature": "public void testCheckThrowable_checkedExceptionNotDeclared_throwsIllegalArgumentException()\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCheckThrowable_runtimeExceptionNotDeclared_throwsExpectedRuntimeException()\n      throws Exception",
					"documentation": ""
				},
				{
					"signature": "public void testCheckThrowable_errorNotDeclared_throwsExpectedError() throws Exception",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.TypeLiteral"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.CheckedProvidersTest.StringCheckedProvider",
				"com.google.inject.throwingproviders.CheckedProvidersTest.FooException",
				"com.google.inject.throwingproviders.FooCheckedProvider",
				"com.google.inject.throwingproviders.MoreMethodsCheckedProvider",
				"com.google.inject.throwingproviders.CheckedProvidersTest.StringException",
				"com.google.inject.throwingproviders.CheckedProvidersTest.BarException",
				"com.google.inject.throwingproviders.CheckedProvidersTest.ExpectedRuntimeException",
				"com.google.inject.throwingproviders.CheckedProvidersTest.ExpectedError"
			]
		},
		{
			"documentation": "/**\n * Unit tests for {@link CheckedProviders}.\n *\n * @author eatnumber1@google.com (Russ Harmon)\n */",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.StringCheckedProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.FooException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.FooCheckedProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.MoreMethodsCheckedProvider",
			"extends": "com.google.inject.throwingproviders.CheckedProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.StringException",
			"extends": "RuntimeException",
			"Methods": [
				{
					"signature": "StringException(String arg)",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.BarException",
			"extends": "Exception",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.ExpectedRuntimeException",
			"extends": "RuntimeException",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.CheckedProvidersTest.ExpectedError",
			"extends": "Error",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * A simple scope that can be explicitly reset.\n *\n * @author jmourits@google.com (Jerome Mourits)\n */",
			"name": "com.google.inject.throwingproviders.TestScope",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public \u003cT\u003e Provider\u003cT\u003e scope(final Key\u003cT\u003e key, final Provider\u003cT\u003e provider)",
					"documentation": ""
				},
				{
					"signature": "@Override\n      @SuppressWarnings({\"unchecked\"})\n      public T get()",
					"documentation": ""
				},
				{
					"signature": "public void beginNewScope()",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.Scope"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Provider",
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": [
				"com.google.inject.throwingproviders.Scoped"
			]
		},
		{
			"documentation": "/**\n * A simple scope that can be explicitly reset.\n *\n * @author jmourits@google.com (Jerome Mourits)\n */",
			"name": "com.google.inject.throwingproviders.Scoped",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.ScopeAnnotation"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest",
			"extends": "",
			"Methods": [
				{
					"signature": "@Test\n  public void testExceptionsThrown_Bind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionsThrown_Provides()",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsThrown(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testValuesScoped_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testValuesScoped_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testValuesScopedWhenNotExceptionScoping_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testValuesScopedWhenNotExceptionScoping_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "private void tValuesScoped(Injector injector, Class\u003c? extends Annotation\u003e annotation)\n      throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionsScoped_Bind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionsScoped_Provides()",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsScoped(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionsNotScopedWhenNotExceptionScoping_Bind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testExceptionsNotScopedWhenNotExceptionScoping_Provides()",
					"documentation": ""
				},
				{
					"signature": "private void tExceptionsNotScopedWhenNotExceptionScoping(Injector injector)",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAnnotations_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testAnnotations_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "private void tAnnotations(\n      Injector injector, MockRemoteProvider\u003cString\u003e mockA, MockRemoteProvider\u003cString\u003e mockB)\n      throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testUndeclaredExceptions_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testUndeclaredExceptions_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "private void tUndeclaredExceptions(Injector injector) throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testThrowingProviderSubclassing() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToNonInterfaceType_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToNonInterfaceType_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToSubSubInterface_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToSubSubInterface_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithExtraMethod_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithExtraMethod_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDependencies_Bind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testDependencies_Provides()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithBoundValueType_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithBoundValueType_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithGeneric_Bind() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testBindingToInterfaceWithGeneric_Provides() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodWithWrongException()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodWithSubclassOfExceptionIsOk()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodWithSuperclassFails()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodWithRuntimeExceptionsIsOk() throws RemoteException",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testProviderMethodWithManyExceptions()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testMoreTypeParameters()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testWrongThrowingProviderType()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testOneMethodThatIsntGet()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testManyMethods()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testIncorrectPredefinedType_Bind()",
					"documentation": ""
				},
				{
					"signature": "@Test\n  public void testIncorrectPredefinedType_Provides()",
					"documentation": ""
				}
			],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.AbstractModule",
				"com.google.inject.BindingAnnotation",
				"com.google.inject.Guice",
				"com.google.inject.Inject",
				"com.google.inject.Key",
				"com.google.inject.TypeLiteral",
				"com.google.inject.internal.util.Classes",
				"com.google.inject.name.Named",
				"com.google.inject.name.Names",
				"com.google.inject.spi.Dependency",
				"com.google.inject.throwingproviders.CheckedProvides",
				"com.google.inject.throwingproviders.NotExceptionScoping",
				"com.google.inject.throwingproviders.ThrowingProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider"
			],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": [
				"com.google.inject.throwingproviders.NotExceptionScoping",
				"com.google.inject.throwingproviders.ThrowingProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.SubRemoteProvider",
				"com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
				"com.google.inject.throwingproviders.RemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider",
				"com.google.inject.throwingproviders.StringRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.TooManyTypeParameters",
				"com.google.inject.throwingproviders.ThrowingProviderTest.WrongThrowingProviderType",
				"com.google.inject.throwingproviders.ThrowingProviderTest.OneNoneGetMethod",
				"com.google.inject.throwingproviders.ThrowingProviderTest.ManyMethods"
			]
		},
		{
			"documentation": "/**\n * @author jmourits@google.com (Jerome Mourits)\n * @author jessewilson@google.com (Jesse Wilson)\n */",
			"name": "com.google.inject.throwingproviders.NotExceptionScoping",
			"extends": "",
			"Methods": [],
			"interfaces": [],
			"type": "annotation",
			"isTest": false,
			"testClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest",
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.BindingAnnotation"
			],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.SubMockRemoteProvider",
			"extends": "com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider",
			"Methods": [],
			"interfaces": [],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.SubRemoteProvider",
			"extends": "com.google.inject.throwingproviders.RemoteProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.RemoteProviderWithExtraMethod",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.RemoteProvider",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.SubRemoteProvider"
			],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.CheckedProviderTest.MockRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.DependentRemoteProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "@Inject\n    public DependentRemoteProvider(String foo, int bar)",
					"documentation": ""
				},
				{
					"signature": "@Inject\n    void initialize(long foo)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get() throws RemoteException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.RemoteProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [
				"com.google.inject.Inject"
			],
			"usedBy": [
				"com.google.inject.throwingproviders.ThrowingProviderTest"
			],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.MockRemoteProvider",
			"extends": "",
			"Methods": [
				{
					"signature": "public void throwOnNextGet(String message)",
					"documentation": ""
				},
				{
					"signature": "public void throwOnNextGet(Exception nextToThrow)",
					"documentation": ""
				},
				{
					"signature": "public void setNextToReturn(T nextToReturn)",
					"documentation": ""
				},
				{
					"signature": "@Override\n    public T get() throws RemoteException",
					"documentation": ""
				}
			],
			"interfaces": [
				"com.google.inject.throwingproviders.RemoteProvider"
			],
			"type": "class",
			"isTest": true,
			"testClasses": [],
			"subClasses": [
				"com.google.inject.throwingproviders.CheckedProviderTest.SubMockRemoteProvider",
				"com.google.inject.throwingproviders.ThrowingProviderTest.SubMockRemoteProvider"
			],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.StringRemoteProvider",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [
				"com.google.inject.throwingproviders.CheckedProviderTest.FailingProvider"
			],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.TooManyTypeParameters",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.WrongThrowingProviderType",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.OneNoneGetMethod",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "",
			"name": "com.google.inject.throwingproviders.ThrowingProviderTest.ManyMethods",
			"extends": "com.google.inject.throwingproviders.ThrowingProvider",
			"Methods": [],
			"interfaces": [],
			"type": "interface",
			"isTest": true,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": true,
			"InnerClasses": []
		},
		{
			"documentation": "/** Java binary that runs bndlib to analyze a jar file to generate OSGi bundle manifest. */",
			"name": "com.google.inject.tools.OsgiWrapper",
			"extends": "",
			"Methods": [
				{
					"signature": "@Override\n  public Integer call() throws Exception",
					"documentation": "/** Java binary that runs bndlib to analyze a jar file to generate OSGi bundle manifest. */"
				},
				{
					"signature": "public static void main(String[] args)",
					"documentation": ""
				}
			],
			"interfaces": [
				"java.util.concurrent.Callable"
			],
			"type": "class",
			"isTest": false,
			"testClasses": [],
			"subClasses": [],
			"implementedBy": [],
			"uses": [],
			"usedBy": [],
			"isPrivate": false,
			"InnerClasses": []
		}
	]
}
